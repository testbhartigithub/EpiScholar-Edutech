{"ast":null,"code":"// src/query/core/apiState.ts\nvar QueryStatus = /* @__PURE__ */(QueryStatus2 => {\n  QueryStatus2[\"uninitialized\"] = \"uninitialized\";\n  QueryStatus2[\"pending\"] = \"pending\";\n  QueryStatus2[\"fulfilled\"] = \"fulfilled\";\n  QueryStatus2[\"rejected\"] = \"rejected\";\n  return QueryStatus2;\n})(QueryStatus || {});\nfunction getRequestStatusFlags(status) {\n  return {\n    status,\n    isUninitialized: status === \"uninitialized\" /* uninitialized */,\n    isLoading: status === \"pending\" /* pending */,\n    isSuccess: status === \"fulfilled\" /* fulfilled */,\n    isError: status === \"rejected\" /* rejected */\n  };\n}\n\n// src/query/core/rtkImports.ts\nimport { createAction, createSlice, createSelector, createAsyncThunk, combineReducers, createNextState, isAnyOf, isAllOf, isAction, isPending, isRejected, isFulfilled, isRejectedWithValue, isAsyncThunkAction, prepareAutoBatched, SHOULD_AUTOBATCH, isPlainObject, nanoid } from \"@reduxjs/toolkit\";\n\n// src/query/utils/copyWithStructuralSharing.ts\nvar isPlainObject2 = isPlainObject;\nfunction copyWithStructuralSharing(oldObj, newObj) {\n  if (oldObj === newObj || !(isPlainObject2(oldObj) && isPlainObject2(newObj) || Array.isArray(oldObj) && Array.isArray(newObj))) {\n    return newObj;\n  }\n  const newKeys = Object.keys(newObj);\n  const oldKeys = Object.keys(oldObj);\n  let isSameObject = newKeys.length === oldKeys.length;\n  const mergeObj = Array.isArray(newObj) ? [] : {};\n  for (const key of newKeys) {\n    mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);\n    if (isSameObject) isSameObject = oldObj[key] === mergeObj[key];\n  }\n  return isSameObject ? oldObj : mergeObj;\n}\n\n// src/query/utils/countObjectKeys.ts\nfunction countObjectKeys(obj) {\n  let count = 0;\n  for (const _key in obj) {\n    count++;\n  }\n  return count;\n}\n\n// src/query/utils/flatten.ts\nvar flatten = arr => [].concat(...arr);\n\n// src/query/utils/isAbsoluteUrl.ts\nfunction isAbsoluteUrl(url) {\n  return new RegExp(`(^|:)//`).test(url);\n}\n\n// src/query/utils/isDocumentVisible.ts\nfunction isDocumentVisible() {\n  if (typeof document === \"undefined\") {\n    return true;\n  }\n  return document.visibilityState !== \"hidden\";\n}\n\n// src/query/utils/isNotNullish.ts\nfunction isNotNullish(v) {\n  return v != null;\n}\n\n// src/query/utils/isOnline.ts\nfunction isOnline() {\n  return typeof navigator === \"undefined\" ? true : navigator.onLine === void 0 ? true : navigator.onLine;\n}\n\n// src/query/utils/joinUrls.ts\nvar withoutTrailingSlash = url => url.replace(/\\/$/, \"\");\nvar withoutLeadingSlash = url => url.replace(/^\\//, \"\");\nfunction joinUrls(base, url) {\n  if (!base) {\n    return url;\n  }\n  if (!url) {\n    return base;\n  }\n  if (isAbsoluteUrl(url)) {\n    return url;\n  }\n  const delimiter = base.endsWith(\"/\") || !url.startsWith(\"?\") ? \"/\" : \"\";\n  base = withoutTrailingSlash(base);\n  url = withoutLeadingSlash(url);\n  return `${base}${delimiter}${url}`;\n}\n\n// src/query/utils/getOrInsert.ts\nfunction getOrInsert(map, key, value) {\n  if (map.has(key)) return map.get(key);\n  return map.set(key, value).get(key);\n}\n\n// src/query/fetchBaseQuery.ts\nvar defaultFetchFn = (...args) => fetch(...args);\nvar defaultValidateStatus = response => response.status >= 200 && response.status <= 299;\nvar defaultIsJsonContentType = headers => (/*applicat*/\n/ion\\/(vnd\\.api\\+)?json/.test(headers.get(\"content-type\") || \"\"));\nfunction stripUndefined(obj) {\n  if (!isPlainObject(obj)) {\n    return obj;\n  }\n  const copy = {\n    ...obj\n  };\n  for (const [k, v] of Object.entries(copy)) {\n    if (v === void 0) delete copy[k];\n  }\n  return copy;\n}\nfunction fetchBaseQuery({\n  baseUrl,\n  prepareHeaders = x => x,\n  fetchFn = defaultFetchFn,\n  paramsSerializer,\n  isJsonContentType = defaultIsJsonContentType,\n  jsonContentType = \"application/json\",\n  jsonReplacer,\n  timeout: defaultTimeout,\n  responseHandler: globalResponseHandler,\n  validateStatus: globalValidateStatus,\n  ...baseFetchOptions\n} = {}) {\n  if (typeof fetch === \"undefined\" && fetchFn === defaultFetchFn) {\n    console.warn(\"Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.\");\n  }\n  return async (arg, api, extraOptions) => {\n    const {\n      getState,\n      extra,\n      endpoint,\n      forced,\n      type\n    } = api;\n    let meta;\n    let {\n      url,\n      headers = new Headers(baseFetchOptions.headers),\n      params = void 0,\n      responseHandler = globalResponseHandler ?? \"json\",\n      validateStatus = globalValidateStatus ?? defaultValidateStatus,\n      timeout = defaultTimeout,\n      ...rest\n    } = typeof arg == \"string\" ? {\n      url: arg\n    } : arg;\n    let abortController,\n      signal = api.signal;\n    if (timeout) {\n      abortController = new AbortController();\n      api.signal.addEventListener(\"abort\", abortController.abort);\n      signal = abortController.signal;\n    }\n    let config = {\n      ...baseFetchOptions,\n      signal,\n      ...rest\n    };\n    headers = new Headers(stripUndefined(headers));\n    config.headers = (await prepareHeaders(headers, {\n      getState,\n      arg,\n      extra,\n      endpoint,\n      forced,\n      type,\n      extraOptions\n    })) || headers;\n    const isJsonifiable = body => typeof body === \"object\" && (isPlainObject(body) || Array.isArray(body) || typeof body.toJSON === \"function\");\n    if (!config.headers.has(\"content-type\") && isJsonifiable(config.body)) {\n      config.headers.set(\"content-type\", jsonContentType);\n    }\n    if (isJsonifiable(config.body) && isJsonContentType(config.headers)) {\n      config.body = JSON.stringify(config.body, jsonReplacer);\n    }\n    if (params) {\n      const divider = ~url.indexOf(\"?\") ? \"&\" : \"?\";\n      const query = paramsSerializer ? paramsSerializer(params) : new URLSearchParams(stripUndefined(params));\n      url += divider + query;\n    }\n    url = joinUrls(baseUrl, url);\n    const request = new Request(url, config);\n    const requestClone = new Request(url, config);\n    meta = {\n      request: requestClone\n    };\n    let response,\n      timedOut = false,\n      timeoutId = abortController && setTimeout(() => {\n        timedOut = true;\n        abortController.abort();\n      }, timeout);\n    try {\n      response = await fetchFn(request);\n    } catch (e) {\n      return {\n        error: {\n          status: timedOut ? \"TIMEOUT_ERROR\" : \"FETCH_ERROR\",\n          error: String(e)\n        },\n        meta\n      };\n    } finally {\n      if (timeoutId) clearTimeout(timeoutId);\n      abortController?.signal.removeEventListener(\"abort\", abortController.abort);\n    }\n    const responseClone = response.clone();\n    meta.response = responseClone;\n    let resultData;\n    let responseText = \"\";\n    try {\n      let handleResponseError;\n      await Promise.all([handleResponse(response, responseHandler).then(r => resultData = r, e => handleResponseError = e),\n      // see https://github.com/node-fetch/node-fetch/issues/665#issuecomment-538995182\n      // we *have* to \"use up\" both streams at the same time or they will stop running in node-fetch scenarios\n      responseClone.text().then(r => responseText = r, () => {})]);\n      if (handleResponseError) throw handleResponseError;\n    } catch (e) {\n      return {\n        error: {\n          status: \"PARSING_ERROR\",\n          originalStatus: response.status,\n          data: responseText,\n          error: String(e)\n        },\n        meta\n      };\n    }\n    return validateStatus(response, resultData) ? {\n      data: resultData,\n      meta\n    } : {\n      error: {\n        status: response.status,\n        data: resultData\n      },\n      meta\n    };\n  };\n  async function handleResponse(response, responseHandler) {\n    if (typeof responseHandler === \"function\") {\n      return responseHandler(response);\n    }\n    if (responseHandler === \"content-type\") {\n      responseHandler = isJsonContentType(response.headers) ? \"json\" : \"text\";\n    }\n    if (responseHandler === \"json\") {\n      const text = await response.text();\n      return text.length ? JSON.parse(text) : null;\n    }\n    return response.text();\n  }\n}\n\n// src/query/HandledError.ts\nvar HandledError = class {\n  constructor(value, meta = void 0) {\n    this.value = value;\n    this.meta = meta;\n  }\n};\n\n// src/query/retry.ts\nasync function defaultBackoff(attempt = 0, maxRetries = 5) {\n  const attempts = Math.min(attempt, maxRetries);\n  const timeout = ~~((Math.random() + 0.4) * (300 << attempts));\n  await new Promise(resolve => setTimeout(res => resolve(res), timeout));\n}\nfunction fail(error, meta) {\n  throw Object.assign(new HandledError({\n    error,\n    meta\n  }), {\n    throwImmediately: true\n  });\n}\nvar EMPTY_OPTIONS = {};\nvar retryWithBackoff = (baseQuery, defaultOptions) => async (args, api, extraOptions) => {\n  const possibleMaxRetries = [5, (defaultOptions || EMPTY_OPTIONS).maxRetries, (extraOptions || EMPTY_OPTIONS).maxRetries].filter(x => x !== void 0);\n  const [maxRetries] = possibleMaxRetries.slice(-1);\n  const defaultRetryCondition = (_, __, {\n    attempt\n  }) => attempt <= maxRetries;\n  const options = {\n    maxRetries,\n    backoff: defaultBackoff,\n    retryCondition: defaultRetryCondition,\n    ...defaultOptions,\n    ...extraOptions\n  };\n  let retry2 = 0;\n  while (true) {\n    try {\n      const result = await baseQuery(args, api, extraOptions);\n      if (result.error) {\n        throw new HandledError(result);\n      }\n      return result;\n    } catch (e) {\n      retry2++;\n      if (e.throwImmediately) {\n        if (e instanceof HandledError) {\n          return e.value;\n        }\n        throw e;\n      }\n      if (e instanceof HandledError && !options.retryCondition(e.value.error, args, {\n        attempt: retry2,\n        baseQueryApi: api,\n        extraOptions\n      })) {\n        return e.value;\n      }\n      await options.backoff(retry2, options.maxRetries);\n    }\n  }\n};\nvar retry = /* @__PURE__ */Object.assign(retryWithBackoff, {\n  fail\n});\n\n// src/query/core/setupListeners.ts\nvar onFocus = /* @__PURE__ */createAction(\"__rtkq/focused\");\nvar onFocusLost = /* @__PURE__ */createAction(\"__rtkq/unfocused\");\nvar onOnline = /* @__PURE__ */createAction(\"__rtkq/online\");\nvar onOffline = /* @__PURE__ */createAction(\"__rtkq/offline\");\nvar initialized = false;\nfunction setupListeners(dispatch, customHandler) {\n  function defaultHandler() {\n    const handleFocus = () => dispatch(onFocus());\n    const handleFocusLost = () => dispatch(onFocusLost());\n    const handleOnline = () => dispatch(onOnline());\n    const handleOffline = () => dispatch(onOffline());\n    const handleVisibilityChange = () => {\n      if (window.document.visibilityState === \"visible\") {\n        handleFocus();\n      } else {\n        handleFocusLost();\n      }\n    };\n    if (!initialized) {\n      if (typeof window !== \"undefined\" && window.addEventListener) {\n        window.addEventListener(\"visibilitychange\", handleVisibilityChange, false);\n        window.addEventListener(\"focus\", handleFocus, false);\n        window.addEventListener(\"online\", handleOnline, false);\n        window.addEventListener(\"offline\", handleOffline, false);\n        initialized = true;\n      }\n    }\n    const unsubscribe = () => {\n      window.removeEventListener(\"focus\", handleFocus);\n      window.removeEventListener(\"visibilitychange\", handleVisibilityChange);\n      window.removeEventListener(\"online\", handleOnline);\n      window.removeEventListener(\"offline\", handleOffline);\n      initialized = false;\n    };\n    return unsubscribe;\n  }\n  return customHandler ? customHandler(dispatch, {\n    onFocus,\n    onFocusLost,\n    onOffline,\n    onOnline\n  }) : defaultHandler();\n}\n\n// src/query/endpointDefinitions.ts\nfunction isQueryDefinition(e) {\n  return e.type === \"query\" /* query */;\n}\nfunction isMutationDefinition(e) {\n  return e.type === \"mutation\" /* mutation */;\n}\nfunction calculateProvidedBy(description, result, error, queryArg, meta, assertTagTypes) {\n  if (isFunction(description)) {\n    return description(result, error, queryArg, meta).filter(isNotNullish).map(expandTagDescription).map(assertTagTypes);\n  }\n  if (Array.isArray(description)) {\n    return description.map(expandTagDescription).map(assertTagTypes);\n  }\n  return [];\n}\nfunction isFunction(t) {\n  return typeof t === \"function\";\n}\nfunction expandTagDescription(description) {\n  return typeof description === \"string\" ? {\n    type: description\n  } : description;\n}\n\n// src/query/core/buildThunks.ts\nimport { isDraftable, produceWithPatches } from \"immer\";\n\n// src/query/core/buildInitiate.ts\nimport { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\n\n// src/tsHelpers.ts\nfunction asSafePromise(promise, fallback) {\n  return promise.catch(fallback);\n}\n\n// src/query/core/buildInitiate.ts\nvar forceQueryFnSymbol = Symbol(\"forceQueryFn\");\nvar isUpsertQuery = arg => typeof arg[forceQueryFnSymbol] === \"function\";\nfunction buildInitiate({\n  serializeQueryArgs,\n  queryThunk,\n  mutationThunk,\n  api,\n  context\n}) {\n  const runningQueries = /* @__PURE__ */new Map();\n  const runningMutations = /* @__PURE__ */new Map();\n  const {\n    unsubscribeQueryResult,\n    removeMutationResult,\n    updateSubscriptionOptions\n  } = api.internalActions;\n  return {\n    buildInitiateQuery,\n    buildInitiateMutation,\n    getRunningQueryThunk,\n    getRunningMutationThunk,\n    getRunningQueriesThunk,\n    getRunningMutationsThunk\n  };\n  function getRunningQueryThunk(endpointName, queryArgs) {\n    return dispatch => {\n      const endpointDefinition = context.endpointDefinitions[endpointName];\n      const queryCacheKey = serializeQueryArgs({\n        queryArgs,\n        endpointDefinition,\n        endpointName\n      });\n      return runningQueries.get(dispatch)?.[queryCacheKey];\n    };\n  }\n  function getRunningMutationThunk(_endpointName, fixedCacheKeyOrRequestId) {\n    return dispatch => {\n      return runningMutations.get(dispatch)?.[fixedCacheKeyOrRequestId];\n    };\n  }\n  function getRunningQueriesThunk() {\n    return dispatch => Object.values(runningQueries.get(dispatch) || {}).filter(isNotNullish);\n  }\n  function getRunningMutationsThunk() {\n    return dispatch => Object.values(runningMutations.get(dispatch) || {}).filter(isNotNullish);\n  }\n  function middlewareWarning(dispatch) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (middlewareWarning.triggered) return;\n      const returnedValue = dispatch(api.internalActions.internal_getRTKQSubscriptions());\n      middlewareWarning.triggered = true;\n      if (typeof returnedValue !== \"object\" || typeof returnedValue?.type === \"string\") {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(34) : `Warning: Middleware for RTK-Query API at reducerPath \"${api.reducerPath}\" has not been added to the store.\nYou must add the middleware for RTK-Query to function correctly!`);\n      }\n    }\n  }\n  function buildInitiateQuery(endpointName, endpointDefinition) {\n    const queryAction = (arg, {\n      subscribe = true,\n      forceRefetch,\n      subscriptionOptions,\n      [forceQueryFnSymbol]: forceQueryFn,\n      ...rest\n    } = {}) => (dispatch, getState) => {\n      const queryCacheKey = serializeQueryArgs({\n        queryArgs: arg,\n        endpointDefinition,\n        endpointName\n      });\n      const thunk = queryThunk({\n        ...rest,\n        type: \"query\",\n        subscribe,\n        forceRefetch,\n        subscriptionOptions,\n        endpointName,\n        originalArgs: arg,\n        queryCacheKey,\n        [forceQueryFnSymbol]: forceQueryFn\n      });\n      const selector = api.endpoints[endpointName].select(arg);\n      const thunkResult = dispatch(thunk);\n      const stateAfter = selector(getState());\n      middlewareWarning(dispatch);\n      const {\n        requestId,\n        abort\n      } = thunkResult;\n      const skippedSynchronously = stateAfter.requestId !== requestId;\n      const runningQuery = runningQueries.get(dispatch)?.[queryCacheKey];\n      const selectFromState = () => selector(getState());\n      const statePromise = Object.assign(forceQueryFn ?\n      // a query has been forced (upsertQueryData)\n      // -> we want to resolve it once data has been written with the data that will be written\n      thunkResult.then(selectFromState) : skippedSynchronously && !runningQuery ?\n      // a query has been skipped due to a condition and we do not have any currently running query\n      // -> we want to resolve it immediately with the current data\n      Promise.resolve(stateAfter) :\n      // query just started or one is already in flight\n      // -> wait for the running query, then resolve with data from after that\n      Promise.all([runningQuery, thunkResult]).then(selectFromState), {\n        arg,\n        requestId,\n        subscriptionOptions,\n        queryCacheKey,\n        abort,\n        async unwrap() {\n          const result = await statePromise;\n          if (result.isError) {\n            throw result.error;\n          }\n          return result.data;\n        },\n        refetch: () => dispatch(queryAction(arg, {\n          subscribe: false,\n          forceRefetch: true\n        })),\n        unsubscribe() {\n          if (subscribe) dispatch(unsubscribeQueryResult({\n            queryCacheKey,\n            requestId\n          }));\n        },\n        updateSubscriptionOptions(options) {\n          statePromise.subscriptionOptions = options;\n          dispatch(updateSubscriptionOptions({\n            endpointName,\n            requestId,\n            queryCacheKey,\n            options\n          }));\n        }\n      });\n      if (!runningQuery && !skippedSynchronously && !forceQueryFn) {\n        const running = getOrInsert(runningQueries, dispatch, {});\n        running[queryCacheKey] = statePromise;\n        statePromise.then(() => {\n          delete running[queryCacheKey];\n          if (!countObjectKeys(running)) {\n            runningQueries.delete(dispatch);\n          }\n        });\n      }\n      return statePromise;\n    };\n    return queryAction;\n  }\n  function buildInitiateMutation(endpointName) {\n    return (arg, {\n      track = true,\n      fixedCacheKey\n    } = {}) => (dispatch, getState) => {\n      const thunk = mutationThunk({\n        type: \"mutation\",\n        endpointName,\n        originalArgs: arg,\n        track,\n        fixedCacheKey\n      });\n      const thunkResult = dispatch(thunk);\n      middlewareWarning(dispatch);\n      const {\n        requestId,\n        abort,\n        unwrap\n      } = thunkResult;\n      const returnValuePromise = asSafePromise(thunkResult.unwrap().then(data => ({\n        data\n      })), error => ({\n        error\n      }));\n      const reset = () => {\n        dispatch(removeMutationResult({\n          requestId,\n          fixedCacheKey\n        }));\n      };\n      const ret = Object.assign(returnValuePromise, {\n        arg: thunkResult.arg,\n        requestId,\n        abort,\n        unwrap,\n        reset\n      });\n      const running = runningMutations.get(dispatch) || {};\n      runningMutations.set(dispatch, running);\n      running[requestId] = ret;\n      ret.then(() => {\n        delete running[requestId];\n        if (!countObjectKeys(running)) {\n          runningMutations.delete(dispatch);\n        }\n      });\n      if (fixedCacheKey) {\n        running[fixedCacheKey] = ret;\n        ret.then(() => {\n          if (running[fixedCacheKey] === ret) {\n            delete running[fixedCacheKey];\n            if (!countObjectKeys(running)) {\n              runningMutations.delete(dispatch);\n            }\n          }\n        });\n      }\n      return ret;\n    };\n  }\n}\n\n// src/query/core/buildThunks.ts\nfunction defaultTransformResponse(baseQueryReturnValue) {\n  return baseQueryReturnValue;\n}\nfunction buildThunks({\n  reducerPath,\n  baseQuery,\n  context: {\n    endpointDefinitions\n  },\n  serializeQueryArgs,\n  api,\n  assertTagType\n}) {\n  const patchQueryData = (endpointName, arg, patches, updateProvided) => (dispatch, getState) => {\n    const endpointDefinition = endpointDefinitions[endpointName];\n    const queryCacheKey = serializeQueryArgs({\n      queryArgs: arg,\n      endpointDefinition,\n      endpointName\n    });\n    dispatch(api.internalActions.queryResultPatched({\n      queryCacheKey,\n      patches\n    }));\n    if (!updateProvided) {\n      return;\n    }\n    const newValue = api.endpoints[endpointName].select(arg)(\n    // Work around TS 4.1 mismatch\n    getState());\n    const providedTags = calculateProvidedBy(endpointDefinition.providesTags, newValue.data, void 0, arg, {}, assertTagType);\n    dispatch(api.internalActions.updateProvidedBy({\n      queryCacheKey,\n      providedTags\n    }));\n  };\n  const updateQueryData = (endpointName, arg, updateRecipe, updateProvided = true) => (dispatch, getState) => {\n    const endpointDefinition = api.endpoints[endpointName];\n    const currentState = endpointDefinition.select(arg)(\n    // Work around TS 4.1 mismatch\n    getState());\n    const ret = {\n      patches: [],\n      inversePatches: [],\n      undo: () => dispatch(api.util.patchQueryData(endpointName, arg, ret.inversePatches, updateProvided))\n    };\n    if (currentState.status === \"uninitialized\" /* uninitialized */) {\n      return ret;\n    }\n    let newValue;\n    if (\"data\" in currentState) {\n      if (isDraftable(currentState.data)) {\n        const [value, patches, inversePatches] = produceWithPatches(currentState.data, updateRecipe);\n        ret.patches.push(...patches);\n        ret.inversePatches.push(...inversePatches);\n        newValue = value;\n      } else {\n        newValue = updateRecipe(currentState.data);\n        ret.patches.push({\n          op: \"replace\",\n          path: [],\n          value: newValue\n        });\n        ret.inversePatches.push({\n          op: \"replace\",\n          path: [],\n          value: currentState.data\n        });\n      }\n    }\n    if (ret.patches.length === 0) {\n      return ret;\n    }\n    dispatch(api.util.patchQueryData(endpointName, arg, ret.patches, updateProvided));\n    return ret;\n  };\n  const upsertQueryData = (endpointName, arg, value) => dispatch => {\n    return dispatch(api.endpoints[endpointName].initiate(arg, {\n      subscribe: false,\n      forceRefetch: true,\n      [forceQueryFnSymbol]: () => ({\n        data: value\n      })\n    }));\n  };\n  const executeEndpoint = async (arg, {\n    signal,\n    abort,\n    rejectWithValue,\n    fulfillWithValue,\n    dispatch,\n    getState,\n    extra\n  }) => {\n    const endpointDefinition = endpointDefinitions[arg.endpointName];\n    try {\n      let transformResponse = defaultTransformResponse;\n      let result;\n      const baseQueryApi = {\n        signal,\n        abort,\n        dispatch,\n        getState,\n        extra,\n        endpoint: arg.endpointName,\n        type: arg.type,\n        forced: arg.type === \"query\" ? isForcedQuery(arg, getState()) : void 0,\n        queryCacheKey: arg.type === \"query\" ? arg.queryCacheKey : void 0\n      };\n      const forceQueryFn = arg.type === \"query\" ? arg[forceQueryFnSymbol] : void 0;\n      if (forceQueryFn) {\n        result = forceQueryFn();\n      } else if (endpointDefinition.query) {\n        result = await baseQuery(endpointDefinition.query(arg.originalArgs), baseQueryApi, endpointDefinition.extraOptions);\n        if (endpointDefinition.transformResponse) {\n          transformResponse = endpointDefinition.transformResponse;\n        }\n      } else {\n        result = await endpointDefinition.queryFn(arg.originalArgs, baseQueryApi, endpointDefinition.extraOptions, arg2 => baseQuery(arg2, baseQueryApi, endpointDefinition.extraOptions));\n      }\n      if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n        const what = endpointDefinition.query ? \"`baseQuery`\" : \"`queryFn`\";\n        let err;\n        if (!result) {\n          err = `${what} did not return anything.`;\n        } else if (typeof result !== \"object\") {\n          err = `${what} did not return an object.`;\n        } else if (result.error && result.data) {\n          err = `${what} returned an object containing both \\`error\\` and \\`result\\`.`;\n        } else if (result.error === void 0 && result.data === void 0) {\n          err = `${what} returned an object containing neither a valid \\`error\\` and \\`result\\`. At least one of them should not be \\`undefined\\``;\n        } else {\n          for (const key of Object.keys(result)) {\n            if (key !== \"error\" && key !== \"data\" && key !== \"meta\") {\n              err = `The object returned by ${what} has the unknown property ${key}.`;\n              break;\n            }\n          }\n        }\n        if (err) {\n          console.error(`Error encountered handling the endpoint ${arg.endpointName}.\n              ${err}\n              It needs to return an object with either the shape \\`{ data: <value> }\\` or \\`{ error: <value> }\\` that may contain an optional \\`meta\\` property.\n              Object returned was:`, result);\n        }\n      }\n      if (result.error) throw new HandledError(result.error, result.meta);\n      return fulfillWithValue(await transformResponse(result.data, result.meta, arg.originalArgs), {\n        fulfilledTimeStamp: Date.now(),\n        baseQueryMeta: result.meta,\n        [SHOULD_AUTOBATCH]: true\n      });\n    } catch (error) {\n      let catchedError = error;\n      if (catchedError instanceof HandledError) {\n        let transformErrorResponse = defaultTransformResponse;\n        if (endpointDefinition.query && endpointDefinition.transformErrorResponse) {\n          transformErrorResponse = endpointDefinition.transformErrorResponse;\n        }\n        try {\n          return rejectWithValue(await transformErrorResponse(catchedError.value, catchedError.meta, arg.originalArgs), {\n            baseQueryMeta: catchedError.meta,\n            [SHOULD_AUTOBATCH]: true\n          });\n        } catch (e) {\n          catchedError = e;\n        }\n      }\n      if (typeof process !== \"undefined\" && process.env.NODE_ENV !== \"production\") {\n        console.error(`An unhandled error occurred processing a request for the endpoint \"${arg.endpointName}\".\nIn the case of an unhandled error, no tags will be \"provided\" or \"invalidated\".`, catchedError);\n      } else {\n        console.error(catchedError);\n      }\n      throw catchedError;\n    }\n  };\n  function isForcedQuery(arg, state) {\n    const requestState = state[reducerPath]?.queries?.[arg.queryCacheKey];\n    const baseFetchOnMountOrArgChange = state[reducerPath]?.config.refetchOnMountOrArgChange;\n    const fulfilledVal = requestState?.fulfilledTimeStamp;\n    const refetchVal = arg.forceRefetch ?? (arg.subscribe && baseFetchOnMountOrArgChange);\n    if (refetchVal) {\n      return refetchVal === true || (Number(/* @__PURE__ */new Date()) - Number(fulfilledVal)) / 1e3 >= refetchVal;\n    }\n    return false;\n  }\n  const queryThunk = createAsyncThunk(`${reducerPath}/executeQuery`, executeEndpoint, {\n    getPendingMeta() {\n      return {\n        startedTimeStamp: Date.now(),\n        [SHOULD_AUTOBATCH]: true\n      };\n    },\n    condition(queryThunkArgs, {\n      getState\n    }) {\n      const state = getState();\n      const requestState = state[reducerPath]?.queries?.[queryThunkArgs.queryCacheKey];\n      const fulfilledVal = requestState?.fulfilledTimeStamp;\n      const currentArg = queryThunkArgs.originalArgs;\n      const previousArg = requestState?.originalArgs;\n      const endpointDefinition = endpointDefinitions[queryThunkArgs.endpointName];\n      if (isUpsertQuery(queryThunkArgs)) {\n        return true;\n      }\n      if (requestState?.status === \"pending\") {\n        return false;\n      }\n      if (isForcedQuery(queryThunkArgs, state)) {\n        return true;\n      }\n      if (isQueryDefinition(endpointDefinition) && endpointDefinition?.forceRefetch?.({\n        currentArg,\n        previousArg,\n        endpointState: requestState,\n        state\n      })) {\n        return true;\n      }\n      if (fulfilledVal) {\n        return false;\n      }\n      return true;\n    },\n    dispatchConditionRejection: true\n  });\n  const mutationThunk = createAsyncThunk(`${reducerPath}/executeMutation`, executeEndpoint, {\n    getPendingMeta() {\n      return {\n        startedTimeStamp: Date.now(),\n        [SHOULD_AUTOBATCH]: true\n      };\n    }\n  });\n  const hasTheForce = options => \"force\" in options;\n  const hasMaxAge = options => \"ifOlderThan\" in options;\n  const prefetch = (endpointName, arg, options) => (dispatch, getState) => {\n    const force = hasTheForce(options) && options.force;\n    const maxAge = hasMaxAge(options) && options.ifOlderThan;\n    const queryAction = (force2 = true) => {\n      const options2 = {\n        forceRefetch: force2,\n        isPrefetch: true\n      };\n      return api.endpoints[endpointName].initiate(arg, options2);\n    };\n    const latestStateValue = api.endpoints[endpointName].select(arg)(getState());\n    if (force) {\n      dispatch(queryAction());\n    } else if (maxAge) {\n      const lastFulfilledTs = latestStateValue?.fulfilledTimeStamp;\n      if (!lastFulfilledTs) {\n        dispatch(queryAction());\n        return;\n      }\n      const shouldRetrigger = (Number(/* @__PURE__ */new Date()) - Number(new Date(lastFulfilledTs))) / 1e3 >= maxAge;\n      if (shouldRetrigger) {\n        dispatch(queryAction());\n      }\n    } else {\n      dispatch(queryAction(false));\n    }\n  };\n  function matchesEndpoint(endpointName) {\n    return action => action?.meta?.arg?.endpointName === endpointName;\n  }\n  function buildMatchThunkActions(thunk, endpointName) {\n    return {\n      matchPending: isAllOf(isPending(thunk), matchesEndpoint(endpointName)),\n      matchFulfilled: isAllOf(isFulfilled(thunk), matchesEndpoint(endpointName)),\n      matchRejected: isAllOf(isRejected(thunk), matchesEndpoint(endpointName))\n    };\n  }\n  return {\n    queryThunk,\n    mutationThunk,\n    prefetch,\n    updateQueryData,\n    upsertQueryData,\n    patchQueryData,\n    buildMatchThunkActions\n  };\n}\nfunction calculateProvidedByThunk(action, type, endpointDefinitions, assertTagType) {\n  return calculateProvidedBy(endpointDefinitions[action.meta.arg.endpointName][type], isFulfilled(action) ? action.payload : void 0, isRejectedWithValue(action) ? action.payload : void 0, action.meta.arg.originalArgs, \"baseQueryMeta\" in action.meta ? action.meta.baseQueryMeta : void 0, assertTagType);\n}\n\n// src/query/core/buildSlice.ts\nimport { isDraft } from \"immer\";\nimport { applyPatches, original } from \"immer\";\nfunction updateQuerySubstateIfExists(state, queryCacheKey, update) {\n  const substate = state[queryCacheKey];\n  if (substate) {\n    update(substate);\n  }\n}\nfunction getMutationCacheKey(id) {\n  return (\"arg\" in id ? id.arg.fixedCacheKey : id.fixedCacheKey) ?? id.requestId;\n}\nfunction updateMutationSubstateIfExists(state, id, update) {\n  const substate = state[getMutationCacheKey(id)];\n  if (substate) {\n    update(substate);\n  }\n}\nvar initialState = {};\nfunction buildSlice({\n  reducerPath,\n  queryThunk,\n  mutationThunk,\n  serializeQueryArgs,\n  context: {\n    endpointDefinitions: definitions,\n    apiUid,\n    extractRehydrationInfo,\n    hasRehydrationInfo\n  },\n  assertTagType,\n  config\n}) {\n  const resetApiState = createAction(`${reducerPath}/resetApiState`);\n  function writePendingCacheEntry(draft, arg, upserting, meta) {\n    draft[arg.queryCacheKey] ??= {\n      status: \"uninitialized\" /* uninitialized */,\n      endpointName: arg.endpointName\n    };\n    updateQuerySubstateIfExists(draft, arg.queryCacheKey, substate => {\n      substate.status = \"pending\" /* pending */;\n      substate.requestId = upserting && substate.requestId ?\n      // for `upsertQuery` **updates**, keep the current `requestId`\n      substate.requestId :\n      // for normal queries or `upsertQuery` **inserts** always update the `requestId`\n      meta.requestId;\n      if (arg.originalArgs !== void 0) {\n        substate.originalArgs = arg.originalArgs;\n      }\n      substate.startedTimeStamp = meta.startedTimeStamp;\n    });\n  }\n  function writeFulfilledCacheEntry(draft, meta, payload, upserting) {\n    updateQuerySubstateIfExists(draft, meta.arg.queryCacheKey, substate => {\n      if (substate.requestId !== meta.requestId && !upserting) return;\n      const {\n        merge\n      } = definitions[meta.arg.endpointName];\n      substate.status = \"fulfilled\" /* fulfilled */;\n      if (merge) {\n        if (substate.data !== void 0) {\n          const {\n            fulfilledTimeStamp,\n            arg,\n            baseQueryMeta,\n            requestId\n          } = meta;\n          let newData = createNextState(substate.data, draftSubstateData => {\n            return merge(draftSubstateData, payload, {\n              arg: arg.originalArgs,\n              baseQueryMeta,\n              fulfilledTimeStamp,\n              requestId\n            });\n          });\n          substate.data = newData;\n        } else {\n          substate.data = payload;\n        }\n      } else {\n        substate.data = definitions[meta.arg.endpointName].structuralSharing ?? true ? copyWithStructuralSharing(isDraft(substate.data) ? original(substate.data) : substate.data, payload) : payload;\n      }\n      delete substate.error;\n      substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n    });\n  }\n  const querySlice = createSlice({\n    name: `${reducerPath}/queries`,\n    initialState,\n    reducers: {\n      removeQueryResult: {\n        reducer(draft, {\n          payload: {\n            queryCacheKey\n          }\n        }) {\n          delete draft[queryCacheKey];\n        },\n        prepare: prepareAutoBatched()\n      },\n      cacheEntriesUpserted: {\n        reducer(draft, action) {\n          for (const entry of action.payload) {\n            const {\n              queryDescription: arg,\n              value\n            } = entry;\n            writePendingCacheEntry(draft, arg, true, {\n              arg,\n              requestId: action.meta.requestId,\n              startedTimeStamp: action.meta.timestamp\n            });\n            writeFulfilledCacheEntry(draft, {\n              arg,\n              requestId: action.meta.requestId,\n              fulfilledTimeStamp: action.meta.timestamp,\n              baseQueryMeta: {}\n            }, value,\n            // We know we're upserting here\n            true);\n          }\n        },\n        prepare: payload => {\n          const queryDescriptions = payload.map(entry => {\n            const {\n              endpointName,\n              arg,\n              value\n            } = entry;\n            const endpointDefinition = definitions[endpointName];\n            const queryDescription = {\n              type: \"query\",\n              endpointName,\n              originalArgs: entry.arg,\n              queryCacheKey: serializeQueryArgs({\n                queryArgs: arg,\n                endpointDefinition,\n                endpointName\n              })\n            };\n            return {\n              queryDescription,\n              value\n            };\n          });\n          const result = {\n            payload: queryDescriptions,\n            meta: {\n              [SHOULD_AUTOBATCH]: true,\n              requestId: nanoid(),\n              timestamp: Date.now()\n            }\n          };\n          return result;\n        }\n      },\n      queryResultPatched: {\n        reducer(draft, {\n          payload: {\n            queryCacheKey,\n            patches\n          }\n        }) {\n          updateQuerySubstateIfExists(draft, queryCacheKey, substate => {\n            substate.data = applyPatches(substate.data, patches.concat());\n          });\n        },\n        prepare: prepareAutoBatched()\n      }\n    },\n    extraReducers(builder) {\n      builder.addCase(queryThunk.pending, (draft, {\n        meta,\n        meta: {\n          arg\n        }\n      }) => {\n        const upserting = isUpsertQuery(arg);\n        writePendingCacheEntry(draft, arg, upserting, meta);\n      }).addCase(queryThunk.fulfilled, (draft, {\n        meta,\n        payload\n      }) => {\n        const upserting = isUpsertQuery(meta.arg);\n        writeFulfilledCacheEntry(draft, meta, payload, upserting);\n      }).addCase(queryThunk.rejected, (draft, {\n        meta: {\n          condition,\n          arg,\n          requestId\n        },\n        error,\n        payload\n      }) => {\n        updateQuerySubstateIfExists(draft, arg.queryCacheKey, substate => {\n          if (condition) {} else {\n            if (substate.requestId !== requestId) return;\n            substate.status = \"rejected\" /* rejected */;\n            substate.error = payload ?? error;\n          }\n        });\n      }).addMatcher(hasRehydrationInfo, (draft, action) => {\n        const {\n          queries\n        } = extractRehydrationInfo(action);\n        for (const [key, entry] of Object.entries(queries)) {\n          if (\n          // do not rehydrate entries that were currently in flight.\n          entry?.status === \"fulfilled\" /* fulfilled */ || entry?.status === \"rejected\" /* rejected */) {\n            draft[key] = entry;\n          }\n        }\n      });\n    }\n  });\n  const mutationSlice = createSlice({\n    name: `${reducerPath}/mutations`,\n    initialState,\n    reducers: {\n      removeMutationResult: {\n        reducer(draft, {\n          payload\n        }) {\n          const cacheKey = getMutationCacheKey(payload);\n          if (cacheKey in draft) {\n            delete draft[cacheKey];\n          }\n        },\n        prepare: prepareAutoBatched()\n      }\n    },\n    extraReducers(builder) {\n      builder.addCase(mutationThunk.pending, (draft, {\n        meta,\n        meta: {\n          requestId,\n          arg,\n          startedTimeStamp\n        }\n      }) => {\n        if (!arg.track) return;\n        draft[getMutationCacheKey(meta)] = {\n          requestId,\n          status: \"pending\" /* pending */,\n          endpointName: arg.endpointName,\n          startedTimeStamp\n        };\n      }).addCase(mutationThunk.fulfilled, (draft, {\n        payload,\n        meta\n      }) => {\n        if (!meta.arg.track) return;\n        updateMutationSubstateIfExists(draft, meta, substate => {\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = \"fulfilled\" /* fulfilled */;\n          substate.data = payload;\n          substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n        });\n      }).addCase(mutationThunk.rejected, (draft, {\n        payload,\n        error,\n        meta\n      }) => {\n        if (!meta.arg.track) return;\n        updateMutationSubstateIfExists(draft, meta, substate => {\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = \"rejected\" /* rejected */;\n          substate.error = payload ?? error;\n        });\n      }).addMatcher(hasRehydrationInfo, (draft, action) => {\n        const {\n          mutations\n        } = extractRehydrationInfo(action);\n        for (const [key, entry] of Object.entries(mutations)) {\n          if (\n          // do not rehydrate entries that were currently in flight.\n          (entry?.status === \"fulfilled\" /* fulfilled */ || entry?.status === \"rejected\" /* rejected */) &&\n          // only rehydrate endpoints that were persisted using a `fixedCacheKey`\n          key !== entry?.requestId) {\n            draft[key] = entry;\n          }\n        }\n      });\n    }\n  });\n  const invalidationSlice = createSlice({\n    name: `${reducerPath}/invalidation`,\n    initialState,\n    reducers: {\n      updateProvidedBy: {\n        reducer(draft, action) {\n          const {\n            queryCacheKey,\n            providedTags\n          } = action.payload;\n          for (const tagTypeSubscriptions of Object.values(draft)) {\n            for (const idSubscriptions of Object.values(tagTypeSubscriptions)) {\n              const foundAt = idSubscriptions.indexOf(queryCacheKey);\n              if (foundAt !== -1) {\n                idSubscriptions.splice(foundAt, 1);\n              }\n            }\n          }\n          for (const {\n            type,\n            id\n          } of providedTags) {\n            const subscribedQueries = (draft[type] ??= {})[id || \"__internal_without_id\"] ??= [];\n            const alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n            if (!alreadySubscribed) {\n              subscribedQueries.push(queryCacheKey);\n            }\n          }\n        },\n        prepare: prepareAutoBatched()\n      }\n    },\n    extraReducers(builder) {\n      builder.addCase(querySlice.actions.removeQueryResult, (draft, {\n        payload: {\n          queryCacheKey\n        }\n      }) => {\n        for (const tagTypeSubscriptions of Object.values(draft)) {\n          for (const idSubscriptions of Object.values(tagTypeSubscriptions)) {\n            const foundAt = idSubscriptions.indexOf(queryCacheKey);\n            if (foundAt !== -1) {\n              idSubscriptions.splice(foundAt, 1);\n            }\n          }\n        }\n      }).addMatcher(hasRehydrationInfo, (draft, action) => {\n        const {\n          provided\n        } = extractRehydrationInfo(action);\n        for (const [type, incomingTags] of Object.entries(provided)) {\n          for (const [id, cacheKeys] of Object.entries(incomingTags)) {\n            const subscribedQueries = (draft[type] ??= {})[id || \"__internal_without_id\"] ??= [];\n            for (const queryCacheKey of cacheKeys) {\n              const alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n              if (!alreadySubscribed) {\n                subscribedQueries.push(queryCacheKey);\n              }\n            }\n          }\n        }\n      }).addMatcher(isAnyOf(isFulfilled(queryThunk), isRejectedWithValue(queryThunk)), (draft, action) => {\n        const providedTags = calculateProvidedByThunk(action, \"providesTags\", definitions, assertTagType);\n        const {\n          queryCacheKey\n        } = action.meta.arg;\n        invalidationSlice.caseReducers.updateProvidedBy(draft, invalidationSlice.actions.updateProvidedBy({\n          queryCacheKey,\n          providedTags\n        }));\n      });\n    }\n  });\n  const subscriptionSlice = createSlice({\n    name: `${reducerPath}/subscriptions`,\n    initialState,\n    reducers: {\n      updateSubscriptionOptions(d, a) {},\n      unsubscribeQueryResult(d, a) {},\n      internal_getRTKQSubscriptions() {}\n    }\n  });\n  const internalSubscriptionsSlice = createSlice({\n    name: `${reducerPath}/internalSubscriptions`,\n    initialState,\n    reducers: {\n      subscriptionsUpdated: {\n        reducer(state, action) {\n          return applyPatches(state, action.payload);\n        },\n        prepare: prepareAutoBatched()\n      }\n    }\n  });\n  const configSlice = createSlice({\n    name: `${reducerPath}/config`,\n    initialState: {\n      online: isOnline(),\n      focused: isDocumentVisible(),\n      middlewareRegistered: false,\n      ...config\n    },\n    reducers: {\n      middlewareRegistered(state, {\n        payload\n      }) {\n        state.middlewareRegistered = state.middlewareRegistered === \"conflict\" || apiUid !== payload ? \"conflict\" : true;\n      }\n    },\n    extraReducers: builder => {\n      builder.addCase(onOnline, state => {\n        state.online = true;\n      }).addCase(onOffline, state => {\n        state.online = false;\n      }).addCase(onFocus, state => {\n        state.focused = true;\n      }).addCase(onFocusLost, state => {\n        state.focused = false;\n      }).addMatcher(hasRehydrationInfo, draft => ({\n        ...draft\n      }));\n    }\n  });\n  const combinedReducer = combineReducers({\n    queries: querySlice.reducer,\n    mutations: mutationSlice.reducer,\n    provided: invalidationSlice.reducer,\n    subscriptions: internalSubscriptionsSlice.reducer,\n    config: configSlice.reducer\n  });\n  const reducer = (state, action) => combinedReducer(resetApiState.match(action) ? void 0 : state, action);\n  const actions = {\n    ...configSlice.actions,\n    ...querySlice.actions,\n    ...subscriptionSlice.actions,\n    ...internalSubscriptionsSlice.actions,\n    ...mutationSlice.actions,\n    ...invalidationSlice.actions,\n    resetApiState\n  };\n  return {\n    reducer,\n    actions\n  };\n}\n\n// src/query/core/buildSelectors.ts\nvar skipToken = /* @__PURE__ */Symbol.for(\"RTKQ/skipToken\");\nvar initialSubState = {\n  status: \"uninitialized\" /* uninitialized */\n};\nvar defaultQuerySubState = /* @__PURE__ */createNextState(initialSubState, () => {});\nvar defaultMutationSubState = /* @__PURE__ */createNextState(initialSubState, () => {});\nfunction buildSelectors({\n  serializeQueryArgs,\n  reducerPath,\n  createSelector: createSelector2\n}) {\n  const selectSkippedQuery = state => defaultQuerySubState;\n  const selectSkippedMutation = state => defaultMutationSubState;\n  return {\n    buildQuerySelector,\n    buildMutationSelector,\n    selectInvalidatedBy,\n    selectCachedArgsForQuery\n  };\n  function withRequestFlags(substate) {\n    return {\n      ...substate,\n      ...getRequestStatusFlags(substate.status)\n    };\n  }\n  function selectInternalState(rootState) {\n    const state = rootState[reducerPath];\n    if (process.env.NODE_ENV !== \"production\") {\n      if (!state) {\n        if (selectInternalState.triggered) return state;\n        selectInternalState.triggered = true;\n        console.error(`Error: No data found at \\`state.${reducerPath}\\`. Did you forget to add the reducer to the store?`);\n      }\n    }\n    return state;\n  }\n  function buildQuerySelector(endpointName, endpointDefinition) {\n    return queryArgs => {\n      if (queryArgs === skipToken) {\n        return createSelector2(selectSkippedQuery, withRequestFlags);\n      }\n      const serializedArgs = serializeQueryArgs({\n        queryArgs,\n        endpointDefinition,\n        endpointName\n      });\n      const selectQuerySubstate = state => selectInternalState(state)?.queries?.[serializedArgs] ?? defaultQuerySubState;\n      return createSelector2(selectQuerySubstate, withRequestFlags);\n    };\n  }\n  function buildMutationSelector() {\n    return id => {\n      let mutationId;\n      if (typeof id === \"object\") {\n        mutationId = getMutationCacheKey(id) ?? skipToken;\n      } else {\n        mutationId = id;\n      }\n      const selectMutationSubstate = state => selectInternalState(state)?.mutations?.[mutationId] ?? defaultMutationSubState;\n      const finalSelectMutationSubstate = mutationId === skipToken ? selectSkippedMutation : selectMutationSubstate;\n      return createSelector2(finalSelectMutationSubstate, withRequestFlags);\n    };\n  }\n  function selectInvalidatedBy(state, tags) {\n    const apiState = state[reducerPath];\n    const toInvalidate = /* @__PURE__ */new Set();\n    for (const tag of tags.filter(isNotNullish).map(expandTagDescription)) {\n      const provided = apiState.provided[tag.type];\n      if (!provided) {\n        continue;\n      }\n      let invalidateSubscriptions = (tag.id !== void 0 ?\n      // id given: invalidate all queries that provide this type & id\n      provided[tag.id] :\n      // no id: invalidate all queries that provide this type\n      flatten(Object.values(provided))) ?? [];\n      for (const invalidate of invalidateSubscriptions) {\n        toInvalidate.add(invalidate);\n      }\n    }\n    return flatten(Array.from(toInvalidate.values()).map(queryCacheKey => {\n      const querySubState = apiState.queries[queryCacheKey];\n      return querySubState ? [{\n        queryCacheKey,\n        endpointName: querySubState.endpointName,\n        originalArgs: querySubState.originalArgs\n      }] : [];\n    }));\n  }\n  function selectCachedArgsForQuery(state, queryName) {\n    return Object.values(state[reducerPath].queries).filter(entry => entry?.endpointName === queryName && entry.status !== \"uninitialized\" /* uninitialized */).map(entry => entry.originalArgs);\n  }\n}\n\n// src/query/createApi.ts\nimport { formatProdErrorMessage as _formatProdErrorMessage2 } from \"@reduxjs/toolkit\";\n\n// src/query/defaultSerializeQueryArgs.ts\nvar cache = WeakMap ? /* @__PURE__ */new WeakMap() : void 0;\nvar defaultSerializeQueryArgs = ({\n  endpointName,\n  queryArgs\n}) => {\n  let serialized = \"\";\n  const cached = cache?.get(queryArgs);\n  if (typeof cached === \"string\") {\n    serialized = cached;\n  } else {\n    const stringified = JSON.stringify(queryArgs, (key, value) => {\n      value = typeof value === \"bigint\" ? {\n        $bigint: value.toString()\n      } : value;\n      value = isPlainObject(value) ? Object.keys(value).sort().reduce((acc, key2) => {\n        acc[key2] = value[key2];\n        return acc;\n      }, {}) : value;\n      return value;\n    });\n    if (isPlainObject(queryArgs)) {\n      cache?.set(queryArgs, stringified);\n    }\n    serialized = stringified;\n  }\n  return `${endpointName}(${serialized})`;\n};\n\n// src/query/createApi.ts\nimport { weakMapMemoize } from \"reselect\";\nfunction buildCreateApi(...modules) {\n  return function baseCreateApi(options) {\n    const extractRehydrationInfo = weakMapMemoize(action => options.extractRehydrationInfo?.(action, {\n      reducerPath: options.reducerPath ?? \"api\"\n    }));\n    const optionsWithDefaults = {\n      reducerPath: \"api\",\n      keepUnusedDataFor: 60,\n      refetchOnMountOrArgChange: false,\n      refetchOnFocus: false,\n      refetchOnReconnect: false,\n      invalidationBehavior: \"delayed\",\n      ...options,\n      extractRehydrationInfo,\n      serializeQueryArgs(queryArgsApi) {\n        let finalSerializeQueryArgs = defaultSerializeQueryArgs;\n        if (\"serializeQueryArgs\" in queryArgsApi.endpointDefinition) {\n          const endpointSQA = queryArgsApi.endpointDefinition.serializeQueryArgs;\n          finalSerializeQueryArgs = queryArgsApi2 => {\n            const initialResult = endpointSQA(queryArgsApi2);\n            if (typeof initialResult === \"string\") {\n              return initialResult;\n            } else {\n              return defaultSerializeQueryArgs({\n                ...queryArgsApi2,\n                queryArgs: initialResult\n              });\n            }\n          };\n        } else if (options.serializeQueryArgs) {\n          finalSerializeQueryArgs = options.serializeQueryArgs;\n        }\n        return finalSerializeQueryArgs(queryArgsApi);\n      },\n      tagTypes: [...(options.tagTypes || [])]\n    };\n    const context = {\n      endpointDefinitions: {},\n      batch(fn) {\n        fn();\n      },\n      apiUid: nanoid(),\n      extractRehydrationInfo,\n      hasRehydrationInfo: weakMapMemoize(action => extractRehydrationInfo(action) != null)\n    };\n    const api = {\n      injectEndpoints,\n      enhanceEndpoints({\n        addTagTypes,\n        endpoints\n      }) {\n        if (addTagTypes) {\n          for (const eT of addTagTypes) {\n            if (!optionsWithDefaults.tagTypes.includes(eT)) {\n              ;\n              optionsWithDefaults.tagTypes.push(eT);\n            }\n          }\n        }\n        if (endpoints) {\n          for (const [endpointName, partialDefinition] of Object.entries(endpoints)) {\n            if (typeof partialDefinition === \"function\") {\n              partialDefinition(context.endpointDefinitions[endpointName]);\n            } else {\n              Object.assign(context.endpointDefinitions[endpointName] || {}, partialDefinition);\n            }\n          }\n        }\n        return api;\n      }\n    };\n    const initializedModules = modules.map(m => m.init(api, optionsWithDefaults, context));\n    function injectEndpoints(inject) {\n      const evaluatedEndpoints = inject.endpoints({\n        query: x => ({\n          ...x,\n          type: \"query\" /* query */\n        }),\n        mutation: x => ({\n          ...x,\n          type: \"mutation\" /* mutation */\n        })\n      });\n      for (const [endpointName, definition] of Object.entries(evaluatedEndpoints)) {\n        if (inject.overrideExisting !== true && endpointName in context.endpointDefinitions) {\n          if (inject.overrideExisting === \"throw\") {\n            throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(39) : `called \\`injectEndpoints\\` to override already-existing endpointName ${endpointName} without specifying \\`overrideExisting: true\\``);\n          } else if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n            console.error(`called \\`injectEndpoints\\` to override already-existing endpointName ${endpointName} without specifying \\`overrideExisting: true\\``);\n          }\n          continue;\n        }\n        context.endpointDefinitions[endpointName] = definition;\n        for (const m of initializedModules) {\n          m.injectEndpoint(endpointName, definition);\n        }\n      }\n      return api;\n    }\n    return api.injectEndpoints({\n      endpoints: options.endpoints\n    });\n  };\n}\n\n// src/query/fakeBaseQuery.ts\nimport { formatProdErrorMessage as _formatProdErrorMessage3 } from \"@reduxjs/toolkit\";\nvar _NEVER = /* @__PURE__ */Symbol();\nfunction fakeBaseQuery() {\n  return function () {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(33) : \"When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.\");\n  };\n}\n\n// src/query/core/module.ts\nimport { enablePatches } from \"immer\";\n\n// src/query/tsHelpers.ts\nfunction assertCast(v) {}\nfunction safeAssign(target, ...args) {\n  return Object.assign(target, ...args);\n}\n\n// src/query/core/buildMiddleware/batchActions.ts\nimport { produceWithPatches as produceWithPatches2 } from \"immer\";\nvar buildBatchedActionsHandler = ({\n  api,\n  queryThunk,\n  internalState\n}) => {\n  const subscriptionsPrefix = `${api.reducerPath}/subscriptions`;\n  let previousSubscriptions = null;\n  let updateSyncTimer = null;\n  const {\n    updateSubscriptionOptions,\n    unsubscribeQueryResult\n  } = api.internalActions;\n  const actuallyMutateSubscriptions = (mutableState, action) => {\n    if (updateSubscriptionOptions.match(action)) {\n      const {\n        queryCacheKey,\n        requestId,\n        options\n      } = action.payload;\n      if (mutableState?.[queryCacheKey]?.[requestId]) {\n        mutableState[queryCacheKey][requestId] = options;\n      }\n      return true;\n    }\n    if (unsubscribeQueryResult.match(action)) {\n      const {\n        queryCacheKey,\n        requestId\n      } = action.payload;\n      if (mutableState[queryCacheKey]) {\n        delete mutableState[queryCacheKey][requestId];\n      }\n      return true;\n    }\n    if (api.internalActions.removeQueryResult.match(action)) {\n      delete mutableState[action.payload.queryCacheKey];\n      return true;\n    }\n    if (queryThunk.pending.match(action)) {\n      const {\n        meta: {\n          arg,\n          requestId\n        }\n      } = action;\n      const substate = mutableState[arg.queryCacheKey] ??= {};\n      substate[`${requestId}_running`] = {};\n      if (arg.subscribe) {\n        substate[requestId] = arg.subscriptionOptions ?? substate[requestId] ?? {};\n      }\n      return true;\n    }\n    let mutated = false;\n    if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action)) {\n      const state = mutableState[action.meta.arg.queryCacheKey] || {};\n      const key = `${action.meta.requestId}_running`;\n      mutated ||= !!state[key];\n      delete state[key];\n    }\n    if (queryThunk.rejected.match(action)) {\n      const {\n        meta: {\n          condition,\n          arg,\n          requestId\n        }\n      } = action;\n      if (condition && arg.subscribe) {\n        const substate = mutableState[arg.queryCacheKey] ??= {};\n        substate[requestId] = arg.subscriptionOptions ?? substate[requestId] ?? {};\n        mutated = true;\n      }\n    }\n    return mutated;\n  };\n  const getSubscriptions = () => internalState.currentSubscriptions;\n  const getSubscriptionCount = queryCacheKey => {\n    const subscriptions = getSubscriptions();\n    const subscriptionsForQueryArg = subscriptions[queryCacheKey] ?? {};\n    return countObjectKeys(subscriptionsForQueryArg);\n  };\n  const isRequestSubscribed = (queryCacheKey, requestId) => {\n    const subscriptions = getSubscriptions();\n    return !!subscriptions?.[queryCacheKey]?.[requestId];\n  };\n  const subscriptionSelectors = {\n    getSubscriptions,\n    getSubscriptionCount,\n    isRequestSubscribed\n  };\n  return (action, mwApi) => {\n    if (!previousSubscriptions) {\n      previousSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n    }\n    if (api.util.resetApiState.match(action)) {\n      previousSubscriptions = internalState.currentSubscriptions = {};\n      updateSyncTimer = null;\n      return [true, false];\n    }\n    if (api.internalActions.internal_getRTKQSubscriptions.match(action)) {\n      return [false, subscriptionSelectors];\n    }\n    const didMutate = actuallyMutateSubscriptions(internalState.currentSubscriptions, action);\n    let actionShouldContinue = true;\n    if (didMutate) {\n      if (!updateSyncTimer) {\n        updateSyncTimer = setTimeout(() => {\n          const newSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n          const [, patches] = produceWithPatches2(previousSubscriptions, () => newSubscriptions);\n          mwApi.next(api.internalActions.subscriptionsUpdated(patches));\n          previousSubscriptions = newSubscriptions;\n          updateSyncTimer = null;\n        }, 500);\n      }\n      const isSubscriptionSliceAction = typeof action.type == \"string\" && !!action.type.startsWith(subscriptionsPrefix);\n      const isAdditionalSubscriptionAction = queryThunk.rejected.match(action) && action.meta.condition && !!action.meta.arg.subscribe;\n      actionShouldContinue = !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;\n    }\n    return [actionShouldContinue, false];\n  };\n};\n\n// src/query/core/buildMiddleware/cacheCollection.ts\nfunction isObjectEmpty(obj) {\n  for (const k in obj) {\n    return false;\n  }\n  return true;\n}\nvar THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2147483647 / 1e3 - 1;\nvar buildCacheCollectionHandler = ({\n  reducerPath,\n  api,\n  queryThunk,\n  context,\n  internalState\n}) => {\n  const {\n    removeQueryResult,\n    unsubscribeQueryResult,\n    cacheEntriesUpserted\n  } = api.internalActions;\n  const canTriggerUnsubscribe = isAnyOf(unsubscribeQueryResult.match, queryThunk.fulfilled, queryThunk.rejected, cacheEntriesUpserted.match);\n  function anySubscriptionsRemainingForKey(queryCacheKey) {\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    return !!subscriptions && !isObjectEmpty(subscriptions);\n  }\n  const currentRemovalTimeouts = {};\n  const handler = (action, mwApi, internalState2) => {\n    if (canTriggerUnsubscribe(action)) {\n      const state = mwApi.getState()[reducerPath];\n      let queryCacheKeys;\n      if (cacheEntriesUpserted.match(action)) {\n        queryCacheKeys = action.payload.map(entry => entry.queryDescription.queryCacheKey);\n      } else {\n        const {\n          queryCacheKey\n        } = unsubscribeQueryResult.match(action) ? action.payload : action.meta.arg;\n        queryCacheKeys = [queryCacheKey];\n      }\n      for (const queryCacheKey of queryCacheKeys) {\n        handleUnsubscribe(queryCacheKey, state.queries[queryCacheKey]?.endpointName, mwApi, state.config);\n      }\n    }\n    if (api.util.resetApiState.match(action)) {\n      for (const [key, timeout] of Object.entries(currentRemovalTimeouts)) {\n        if (timeout) clearTimeout(timeout);\n        delete currentRemovalTimeouts[key];\n      }\n    }\n    if (context.hasRehydrationInfo(action)) {\n      const state = mwApi.getState()[reducerPath];\n      const {\n        queries\n      } = context.extractRehydrationInfo(action);\n      for (const [queryCacheKey, queryState] of Object.entries(queries)) {\n        handleUnsubscribe(queryCacheKey, queryState?.endpointName, mwApi, state.config);\n      }\n    }\n  };\n  function handleUnsubscribe(queryCacheKey, endpointName, api2, config) {\n    const endpointDefinition = context.endpointDefinitions[endpointName];\n    const keepUnusedDataFor = endpointDefinition?.keepUnusedDataFor ?? config.keepUnusedDataFor;\n    if (keepUnusedDataFor === Infinity) {\n      return;\n    }\n    const finalKeepUnusedDataFor = Math.max(0, Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS));\n    if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n      const currentTimeout = currentRemovalTimeouts[queryCacheKey];\n      if (currentTimeout) {\n        clearTimeout(currentTimeout);\n      }\n      currentRemovalTimeouts[queryCacheKey] = setTimeout(() => {\n        if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n          api2.dispatch(removeQueryResult({\n            queryCacheKey\n          }));\n        }\n        delete currentRemovalTimeouts[queryCacheKey];\n      }, finalKeepUnusedDataFor * 1e3);\n    }\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/cacheLifecycle.ts\nvar neverResolvedError = new Error(\"Promise never resolved before cacheEntryRemoved.\");\nvar buildCacheLifecycleHandler = ({\n  api,\n  reducerPath,\n  context,\n  queryThunk,\n  mutationThunk,\n  internalState\n}) => {\n  const isQueryThunk = isAsyncThunkAction(queryThunk);\n  const isMutationThunk = isAsyncThunkAction(mutationThunk);\n  const isFulfilledThunk = isFulfilled(queryThunk, mutationThunk);\n  const lifecycleMap = {};\n  function resolveLifecycleEntry(cacheKey, data, meta) {\n    const lifecycle = lifecycleMap[cacheKey];\n    if (lifecycle?.valueResolved) {\n      lifecycle.valueResolved({\n        data,\n        meta\n      });\n      delete lifecycle.valueResolved;\n    }\n  }\n  function removeLifecycleEntry(cacheKey) {\n    const lifecycle = lifecycleMap[cacheKey];\n    if (lifecycle) {\n      delete lifecycleMap[cacheKey];\n      lifecycle.cacheEntryRemoved();\n    }\n  }\n  const handler = (action, mwApi, stateBefore) => {\n    const cacheKey = getCacheKey(action);\n    function checkForNewCacheKey(endpointName, cacheKey2, requestId, originalArgs) {\n      const oldState = stateBefore[reducerPath].queries[cacheKey2];\n      const state = mwApi.getState()[reducerPath].queries[cacheKey2];\n      if (!oldState && state) {\n        handleNewKey(endpointName, originalArgs, cacheKey2, mwApi, requestId);\n      }\n    }\n    if (queryThunk.pending.match(action)) {\n      checkForNewCacheKey(action.meta.arg.endpointName, cacheKey, action.meta.requestId, action.meta.arg.originalArgs);\n    } else if (api.internalActions.cacheEntriesUpserted.match(action)) {\n      for (const {\n        queryDescription,\n        value\n      } of action.payload) {\n        const {\n          endpointName,\n          originalArgs,\n          queryCacheKey\n        } = queryDescription;\n        checkForNewCacheKey(endpointName, queryCacheKey, action.meta.requestId, originalArgs);\n        resolveLifecycleEntry(queryCacheKey, value, {});\n      }\n    } else if (mutationThunk.pending.match(action)) {\n      const state = mwApi.getState()[reducerPath].mutations[cacheKey];\n      if (state) {\n        handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n      }\n    } else if (isFulfilledThunk(action)) {\n      resolveLifecycleEntry(cacheKey, action.payload, action.meta.baseQueryMeta);\n    } else if (api.internalActions.removeQueryResult.match(action) || api.internalActions.removeMutationResult.match(action)) {\n      removeLifecycleEntry(cacheKey);\n    } else if (api.util.resetApiState.match(action)) {\n      for (const cacheKey2 of Object.keys(lifecycleMap)) {\n        removeLifecycleEntry(cacheKey2);\n      }\n    }\n  };\n  function getCacheKey(action) {\n    if (isQueryThunk(action)) return action.meta.arg.queryCacheKey;\n    if (isMutationThunk(action)) {\n      return action.meta.arg.fixedCacheKey ?? action.meta.requestId;\n    }\n    if (api.internalActions.removeQueryResult.match(action)) return action.payload.queryCacheKey;\n    if (api.internalActions.removeMutationResult.match(action)) return getMutationCacheKey(action.payload);\n    return \"\";\n  }\n  function handleNewKey(endpointName, originalArgs, queryCacheKey, mwApi, requestId) {\n    const endpointDefinition = context.endpointDefinitions[endpointName];\n    const onCacheEntryAdded = endpointDefinition?.onCacheEntryAdded;\n    if (!onCacheEntryAdded) return;\n    const lifecycle = {};\n    const cacheEntryRemoved = new Promise(resolve => {\n      lifecycle.cacheEntryRemoved = resolve;\n    });\n    const cacheDataLoaded = Promise.race([new Promise(resolve => {\n      lifecycle.valueResolved = resolve;\n    }), cacheEntryRemoved.then(() => {\n      throw neverResolvedError;\n    })]);\n    cacheDataLoaded.catch(() => {});\n    lifecycleMap[queryCacheKey] = lifecycle;\n    const selector = api.endpoints[endpointName].select(endpointDefinition.type === \"query\" /* query */ ? originalArgs : queryCacheKey);\n    const extra = mwApi.dispatch((_, __, extra2) => extra2);\n    const lifecycleApi = {\n      ...mwApi,\n      getCacheEntry: () => selector(mwApi.getState()),\n      requestId,\n      extra,\n      updateCachedData: endpointDefinition.type === \"query\" /* query */ ? updateRecipe => mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe)) : void 0,\n      cacheDataLoaded,\n      cacheEntryRemoved\n    };\n    const runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi);\n    Promise.resolve(runningHandler).catch(e => {\n      if (e === neverResolvedError) return;\n      throw e;\n    });\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/devMiddleware.ts\nvar buildDevCheckHandler = ({\n  api,\n  context: {\n    apiUid\n  },\n  reducerPath\n}) => {\n  return (action, mwApi) => {\n    if (api.util.resetApiState.match(action)) {\n      mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n    }\n    if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n      if (api.internalActions.middlewareRegistered.match(action) && action.payload === apiUid && mwApi.getState()[reducerPath]?.config?.middlewareRegistered === \"conflict\") {\n        console.warn(`There is a mismatch between slice and middleware for the reducerPath \"${reducerPath}\".\nYou can only have one api per reducer path, this will lead to crashes in various situations!${reducerPath === \"api\" ? `\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!` : \"\"}`);\n      }\n    }\n  };\n};\n\n// src/query/core/buildMiddleware/invalidationByTags.ts\nvar buildInvalidationByTagsHandler = ({\n  reducerPath,\n  context,\n  context: {\n    endpointDefinitions\n  },\n  mutationThunk,\n  queryThunk,\n  api,\n  assertTagType,\n  refetchQuery,\n  internalState\n}) => {\n  const {\n    removeQueryResult\n  } = api.internalActions;\n  const isThunkActionWithTags = isAnyOf(isFulfilled(mutationThunk), isRejectedWithValue(mutationThunk));\n  const isQueryEnd = isAnyOf(isFulfilled(mutationThunk, queryThunk), isRejected(mutationThunk, queryThunk));\n  let pendingTagInvalidations = [];\n  const handler = (action, mwApi) => {\n    if (isThunkActionWithTags(action)) {\n      invalidateTags(calculateProvidedByThunk(action, \"invalidatesTags\", endpointDefinitions, assertTagType), mwApi);\n    } else if (isQueryEnd(action)) {\n      invalidateTags([], mwApi);\n    } else if (api.util.invalidateTags.match(action)) {\n      invalidateTags(calculateProvidedBy(action.payload, void 0, void 0, void 0, void 0, assertTagType), mwApi);\n    }\n  };\n  function hasPendingRequests(state) {\n    for (const key in state.queries) {\n      if (state.queries[key]?.status === \"pending\" /* pending */) return true;\n    }\n    for (const key in state.mutations) {\n      if (state.mutations[key]?.status === \"pending\" /* pending */) return true;\n    }\n    return false;\n  }\n  function invalidateTags(newTags, mwApi) {\n    const rootState = mwApi.getState();\n    const state = rootState[reducerPath];\n    pendingTagInvalidations.push(...newTags);\n    if (state.config.invalidationBehavior === \"delayed\" && hasPendingRequests(state)) {\n      return;\n    }\n    const tags = pendingTagInvalidations;\n    pendingTagInvalidations = [];\n    if (tags.length === 0) return;\n    const toInvalidate = api.util.selectInvalidatedBy(rootState, tags);\n    context.batch(() => {\n      const valuesArray = Array.from(toInvalidate.values());\n      for (const {\n        queryCacheKey\n      } of valuesArray) {\n        const querySubState = state.queries[queryCacheKey];\n        const subscriptionSubState = internalState.currentSubscriptions[queryCacheKey] ?? {};\n        if (querySubState) {\n          if (countObjectKeys(subscriptionSubState) === 0) {\n            mwApi.dispatch(removeQueryResult({\n              queryCacheKey\n            }));\n          } else if (querySubState.status !== \"uninitialized\" /* uninitialized */) {\n            mwApi.dispatch(refetchQuery(querySubState));\n          }\n        }\n      }\n    });\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/polling.ts\nvar buildPollingHandler = ({\n  reducerPath,\n  queryThunk,\n  api,\n  refetchQuery,\n  internalState\n}) => {\n  const currentPolls = {};\n  const handler = (action, mwApi) => {\n    if (api.internalActions.updateSubscriptionOptions.match(action) || api.internalActions.unsubscribeQueryResult.match(action)) {\n      updatePollingInterval(action.payload, mwApi);\n    }\n    if (queryThunk.pending.match(action) || queryThunk.rejected.match(action) && action.meta.condition) {\n      updatePollingInterval(action.meta.arg, mwApi);\n    }\n    if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action) && !action.meta.condition) {\n      startNextPoll(action.meta.arg, mwApi);\n    }\n    if (api.util.resetApiState.match(action)) {\n      clearPolls();\n    }\n  };\n  function startNextPoll({\n    queryCacheKey\n  }, api2) {\n    const state = api2.getState()[reducerPath];\n    const querySubState = state.queries[queryCacheKey];\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    if (!querySubState || querySubState.status === \"uninitialized\" /* uninitialized */) return;\n    const {\n      lowestPollingInterval,\n      skipPollingIfUnfocused\n    } = findLowestPollingInterval(subscriptions);\n    if (!Number.isFinite(lowestPollingInterval)) return;\n    const currentPoll = currentPolls[queryCacheKey];\n    if (currentPoll?.timeout) {\n      clearTimeout(currentPoll.timeout);\n      currentPoll.timeout = void 0;\n    }\n    const nextPollTimestamp = Date.now() + lowestPollingInterval;\n    currentPolls[queryCacheKey] = {\n      nextPollTimestamp,\n      pollingInterval: lowestPollingInterval,\n      timeout: setTimeout(() => {\n        if (state.config.focused || !skipPollingIfUnfocused) {\n          api2.dispatch(refetchQuery(querySubState));\n        }\n        startNextPoll({\n          queryCacheKey\n        }, api2);\n      }, lowestPollingInterval)\n    };\n  }\n  function updatePollingInterval({\n    queryCacheKey\n  }, api2) {\n    const state = api2.getState()[reducerPath];\n    const querySubState = state.queries[queryCacheKey];\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    if (!querySubState || querySubState.status === \"uninitialized\" /* uninitialized */) {\n      return;\n    }\n    const {\n      lowestPollingInterval\n    } = findLowestPollingInterval(subscriptions);\n    if (!Number.isFinite(lowestPollingInterval)) {\n      cleanupPollForKey(queryCacheKey);\n      return;\n    }\n    const currentPoll = currentPolls[queryCacheKey];\n    const nextPollTimestamp = Date.now() + lowestPollingInterval;\n    if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {\n      startNextPoll({\n        queryCacheKey\n      }, api2);\n    }\n  }\n  function cleanupPollForKey(key) {\n    const existingPoll = currentPolls[key];\n    if (existingPoll?.timeout) {\n      clearTimeout(existingPoll.timeout);\n    }\n    delete currentPolls[key];\n  }\n  function clearPolls() {\n    for (const key of Object.keys(currentPolls)) {\n      cleanupPollForKey(key);\n    }\n  }\n  function findLowestPollingInterval(subscribers = {}) {\n    let skipPollingIfUnfocused = false;\n    let lowestPollingInterval = Number.POSITIVE_INFINITY;\n    for (let key in subscribers) {\n      if (!!subscribers[key].pollingInterval) {\n        lowestPollingInterval = Math.min(subscribers[key].pollingInterval, lowestPollingInterval);\n        skipPollingIfUnfocused = subscribers[key].skipPollingIfUnfocused || skipPollingIfUnfocused;\n      }\n    }\n    return {\n      lowestPollingInterval,\n      skipPollingIfUnfocused\n    };\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/queryLifecycle.ts\nvar buildQueryLifecycleHandler = ({\n  api,\n  context,\n  queryThunk,\n  mutationThunk\n}) => {\n  const isPendingThunk = isPending(queryThunk, mutationThunk);\n  const isRejectedThunk = isRejected(queryThunk, mutationThunk);\n  const isFullfilledThunk = isFulfilled(queryThunk, mutationThunk);\n  const lifecycleMap = {};\n  const handler = (action, mwApi) => {\n    if (isPendingThunk(action)) {\n      const {\n        requestId,\n        arg: {\n          endpointName,\n          originalArgs\n        }\n      } = action.meta;\n      const endpointDefinition = context.endpointDefinitions[endpointName];\n      const onQueryStarted = endpointDefinition?.onQueryStarted;\n      if (onQueryStarted) {\n        const lifecycle = {};\n        const queryFulfilled = new Promise((resolve, reject) => {\n          lifecycle.resolve = resolve;\n          lifecycle.reject = reject;\n        });\n        queryFulfilled.catch(() => {});\n        lifecycleMap[requestId] = lifecycle;\n        const selector = api.endpoints[endpointName].select(endpointDefinition.type === \"query\" /* query */ ? originalArgs : requestId);\n        const extra = mwApi.dispatch((_, __, extra2) => extra2);\n        const lifecycleApi = {\n          ...mwApi,\n          getCacheEntry: () => selector(mwApi.getState()),\n          requestId,\n          extra,\n          updateCachedData: endpointDefinition.type === \"query\" /* query */ ? updateRecipe => mwApi.dispatch(api.util.updateQueryData(endpointName, originalArgs, updateRecipe)) : void 0,\n          queryFulfilled\n        };\n        onQueryStarted(originalArgs, lifecycleApi);\n      }\n    } else if (isFullfilledThunk(action)) {\n      const {\n        requestId,\n        baseQueryMeta\n      } = action.meta;\n      lifecycleMap[requestId]?.resolve({\n        data: action.payload,\n        meta: baseQueryMeta\n      });\n      delete lifecycleMap[requestId];\n    } else if (isRejectedThunk(action)) {\n      const {\n        requestId,\n        rejectedWithValue,\n        baseQueryMeta\n      } = action.meta;\n      lifecycleMap[requestId]?.reject({\n        error: action.payload ?? action.error,\n        isUnhandledError: !rejectedWithValue,\n        meta: baseQueryMeta\n      });\n      delete lifecycleMap[requestId];\n    }\n  };\n  return handler;\n};\n\n// src/query/core/buildMiddleware/windowEventHandling.ts\nvar buildWindowEventHandler = ({\n  reducerPath,\n  context,\n  api,\n  refetchQuery,\n  internalState\n}) => {\n  const {\n    removeQueryResult\n  } = api.internalActions;\n  const handler = (action, mwApi) => {\n    if (onFocus.match(action)) {\n      refetchValidQueries(mwApi, \"refetchOnFocus\");\n    }\n    if (onOnline.match(action)) {\n      refetchValidQueries(mwApi, \"refetchOnReconnect\");\n    }\n  };\n  function refetchValidQueries(api2, type) {\n    const state = api2.getState()[reducerPath];\n    const queries = state.queries;\n    const subscriptions = internalState.currentSubscriptions;\n    context.batch(() => {\n      for (const queryCacheKey of Object.keys(subscriptions)) {\n        const querySubState = queries[queryCacheKey];\n        const subscriptionSubState = subscriptions[queryCacheKey];\n        if (!subscriptionSubState || !querySubState) continue;\n        const shouldRefetch = Object.values(subscriptionSubState).some(sub => sub[type] === true) || Object.values(subscriptionSubState).every(sub => sub[type] === void 0) && state.config[type];\n        if (shouldRefetch) {\n          if (countObjectKeys(subscriptionSubState) === 0) {\n            api2.dispatch(removeQueryResult({\n              queryCacheKey\n            }));\n          } else if (querySubState.status !== \"uninitialized\" /* uninitialized */) {\n            api2.dispatch(refetchQuery(querySubState));\n          }\n        }\n      }\n    });\n  }\n  return handler;\n};\n\n// src/query/core/buildMiddleware/index.ts\nfunction buildMiddleware(input) {\n  const {\n    reducerPath,\n    queryThunk,\n    api,\n    context\n  } = input;\n  const {\n    apiUid\n  } = context;\n  const actions = {\n    invalidateTags: createAction(`${reducerPath}/invalidateTags`)\n  };\n  const isThisApiSliceAction = action => action.type.startsWith(`${reducerPath}/`);\n  const handlerBuilders = [buildDevCheckHandler, buildCacheCollectionHandler, buildInvalidationByTagsHandler, buildPollingHandler, buildCacheLifecycleHandler, buildQueryLifecycleHandler];\n  const middleware = mwApi => {\n    let initialized2 = false;\n    const internalState = {\n      currentSubscriptions: {}\n    };\n    const builderArgs = {\n      ...input,\n      internalState,\n      refetchQuery,\n      isThisApiSliceAction\n    };\n    const handlers = handlerBuilders.map(build => build(builderArgs));\n    const batchedActionsHandler = buildBatchedActionsHandler(builderArgs);\n    const windowEventsHandler = buildWindowEventHandler(builderArgs);\n    return next => {\n      return action => {\n        if (!isAction(action)) {\n          return next(action);\n        }\n        if (!initialized2) {\n          initialized2 = true;\n          mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n        }\n        const mwApiWithNext = {\n          ...mwApi,\n          next\n        };\n        const stateBefore = mwApi.getState();\n        const [actionShouldContinue, internalProbeResult] = batchedActionsHandler(action, mwApiWithNext, stateBefore);\n        let res;\n        if (actionShouldContinue) {\n          res = next(action);\n        } else {\n          res = internalProbeResult;\n        }\n        if (!!mwApi.getState()[reducerPath]) {\n          windowEventsHandler(action, mwApiWithNext, stateBefore);\n          if (isThisApiSliceAction(action) || context.hasRehydrationInfo(action)) {\n            for (const handler of handlers) {\n              handler(action, mwApiWithNext, stateBefore);\n            }\n          }\n        }\n        return res;\n      };\n    };\n  };\n  return {\n    middleware,\n    actions\n  };\n  function refetchQuery(querySubState) {\n    return input.api.endpoints[querySubState.endpointName].initiate(querySubState.originalArgs, {\n      subscribe: false,\n      forceRefetch: true\n    });\n  }\n}\n\n// src/query/core/module.ts\nvar coreModuleName = /* @__PURE__ */Symbol();\nvar coreModule = ({\n  createSelector: createSelector2 = createSelector\n} = {}) => ({\n  name: coreModuleName,\n  init(api, {\n    baseQuery,\n    tagTypes,\n    reducerPath,\n    serializeQueryArgs,\n    keepUnusedDataFor,\n    refetchOnMountOrArgChange,\n    refetchOnFocus,\n    refetchOnReconnect,\n    invalidationBehavior\n  }, context) {\n    enablePatches();\n    assertCast(serializeQueryArgs);\n    const assertTagType = tag => {\n      if (typeof process !== \"undefined\" && process.env.NODE_ENV === \"development\") {\n        if (!tagTypes.includes(tag.type)) {\n          console.error(`Tag type '${tag.type}' was used, but not specified in \\`tagTypes\\`!`);\n        }\n      }\n      return tag;\n    };\n    Object.assign(api, {\n      reducerPath,\n      endpoints: {},\n      internalActions: {\n        onOnline,\n        onOffline,\n        onFocus,\n        onFocusLost\n      },\n      util: {}\n    });\n    const {\n      queryThunk,\n      mutationThunk,\n      patchQueryData,\n      updateQueryData,\n      upsertQueryData,\n      prefetch,\n      buildMatchThunkActions\n    } = buildThunks({\n      baseQuery,\n      reducerPath,\n      context,\n      api,\n      serializeQueryArgs,\n      assertTagType\n    });\n    const {\n      reducer,\n      actions: sliceActions\n    } = buildSlice({\n      context,\n      queryThunk,\n      mutationThunk,\n      serializeQueryArgs,\n      reducerPath,\n      assertTagType,\n      config: {\n        refetchOnFocus,\n        refetchOnReconnect,\n        refetchOnMountOrArgChange,\n        keepUnusedDataFor,\n        reducerPath,\n        invalidationBehavior\n      }\n    });\n    safeAssign(api.util, {\n      patchQueryData,\n      updateQueryData,\n      upsertQueryData,\n      prefetch,\n      resetApiState: sliceActions.resetApiState,\n      upsertQueryEntries: sliceActions.cacheEntriesUpserted\n    });\n    safeAssign(api.internalActions, sliceActions);\n    const {\n      middleware,\n      actions: middlewareActions\n    } = buildMiddleware({\n      reducerPath,\n      context,\n      queryThunk,\n      mutationThunk,\n      api,\n      assertTagType\n    });\n    safeAssign(api.util, middlewareActions);\n    safeAssign(api, {\n      reducer,\n      middleware\n    });\n    const {\n      buildQuerySelector,\n      buildMutationSelector,\n      selectInvalidatedBy,\n      selectCachedArgsForQuery\n    } = buildSelectors({\n      serializeQueryArgs,\n      reducerPath,\n      createSelector: createSelector2\n    });\n    safeAssign(api.util, {\n      selectInvalidatedBy,\n      selectCachedArgsForQuery\n    });\n    const {\n      buildInitiateQuery,\n      buildInitiateMutation,\n      getRunningMutationThunk,\n      getRunningMutationsThunk,\n      getRunningQueriesThunk,\n      getRunningQueryThunk\n    } = buildInitiate({\n      queryThunk,\n      mutationThunk,\n      api,\n      serializeQueryArgs,\n      context\n    });\n    safeAssign(api.util, {\n      getRunningMutationThunk,\n      getRunningMutationsThunk,\n      getRunningQueryThunk,\n      getRunningQueriesThunk\n    });\n    return {\n      name: coreModuleName,\n      injectEndpoint(endpointName, definition) {\n        const anyApi = api;\n        anyApi.endpoints[endpointName] ??= {};\n        if (isQueryDefinition(definition)) {\n          safeAssign(anyApi.endpoints[endpointName], {\n            name: endpointName,\n            select: buildQuerySelector(endpointName, definition),\n            initiate: buildInitiateQuery(endpointName, definition)\n          }, buildMatchThunkActions(queryThunk, endpointName));\n        } else if (isMutationDefinition(definition)) {\n          safeAssign(anyApi.endpoints[endpointName], {\n            name: endpointName,\n            select: buildMutationSelector(),\n            initiate: buildInitiateMutation(endpointName)\n          }, buildMatchThunkActions(mutationThunk, endpointName));\n        }\n      }\n    };\n  }\n});\n\n// src/query/core/index.ts\nvar createApi = /* @__PURE__ */buildCreateApi(coreModule());\nexport { QueryStatus, _NEVER, buildCreateApi, copyWithStructuralSharing, coreModule, coreModuleName, createApi, defaultSerializeQueryArgs, fakeBaseQuery, fetchBaseQuery, retry, setupListeners, skipToken };","map":{"version":3,"names":["QueryStatus","QueryStatus2","getRequestStatusFlags","status","isUninitialized","isLoading","isSuccess","isError","createAction","createSlice","createSelector","createAsyncThunk","combineReducers","createNextState","isAnyOf","isAllOf","isAction","isPending","isRejected","isFulfilled","isRejectedWithValue","isAsyncThunkAction","prepareAutoBatched","SHOULD_AUTOBATCH","isPlainObject","nanoid","isPlainObject2","copyWithStructuralSharing","oldObj","newObj","Array","isArray","newKeys","Object","keys","oldKeys","isSameObject","length","mergeObj","key","countObjectKeys","obj","count","_key","flatten","arr","concat","isAbsoluteUrl","url","RegExp","test","isDocumentVisible","document","visibilityState","isNotNullish","v","isOnline","navigator","onLine","withoutTrailingSlash","replace","withoutLeadingSlash","joinUrls","base","delimiter","endsWith","startsWith","getOrInsert","map","value","has","get","set","defaultFetchFn","args","fetch","defaultValidateStatus","response","defaultIsJsonContentType","headers","stripUndefined","copy","k","entries","fetchBaseQuery","baseUrl","prepareHeaders","x","fetchFn","paramsSerializer","isJsonContentType","jsonContentType","jsonReplacer","timeout","defaultTimeout","responseHandler","globalResponseHandler","validateStatus","globalValidateStatus","baseFetchOptions","console","warn","arg","api","extraOptions","getState","extra","endpoint","forced","type","meta","Headers","params","rest","abortController","signal","AbortController","addEventListener","abort","config","isJsonifiable","body","toJSON","JSON","stringify","divider","indexOf","query","URLSearchParams","request","Request","requestClone","timedOut","timeoutId","setTimeout","e","error","String","clearTimeout","removeEventListener","responseClone","clone","resultData","responseText","handleResponseError","Promise","all","handleResponse","then","r","text","originalStatus","data","parse","HandledError","constructor","defaultBackoff","attempt","maxRetries","attempts","Math","min","random","resolve","res","fail","assign","throwImmediately","EMPTY_OPTIONS","retryWithBackoff","baseQuery","defaultOptions","possibleMaxRetries","filter","slice","defaultRetryCondition","_","__","options","backoff","retryCondition","retry2","result","baseQueryApi","retry","onFocus","onFocusLost","onOnline","onOffline","initialized","setupListeners","dispatch","customHandler","defaultHandler","handleFocus","handleFocusLost","handleOnline","handleOffline","handleVisibilityChange","window","unsubscribe","isQueryDefinition","isMutationDefinition","calculateProvidedBy","description","queryArg","assertTagTypes","isFunction","expandTagDescription","t","isDraftable","produceWithPatches","formatProdErrorMessage","_formatProdErrorMessage","asSafePromise","promise","fallback","catch","forceQueryFnSymbol","Symbol","isUpsertQuery","buildInitiate","serializeQueryArgs","queryThunk","mutationThunk","context","runningQueries","Map","runningMutations","unsubscribeQueryResult","removeMutationResult","updateSubscriptionOptions","internalActions","buildInitiateQuery","buildInitiateMutation","getRunningQueryThunk","getRunningMutationThunk","getRunningQueriesThunk","getRunningMutationsThunk","endpointName","queryArgs","endpointDefinition","endpointDefinitions","queryCacheKey","_endpointName","fixedCacheKeyOrRequestId","values","middlewareWarning","process","env","NODE_ENV","triggered","returnedValue","internal_getRTKQSubscriptions","Error","reducerPath","queryAction","subscribe","forceRefetch","subscriptionOptions","forceQueryFn","thunk","originalArgs","selector","endpoints","select","thunkResult","stateAfter","requestId","skippedSynchronously","runningQuery","selectFromState","statePromise","unwrap","refetch","running","delete","track","fixedCacheKey","returnValuePromise","reset","ret","defaultTransformResponse","baseQueryReturnValue","buildThunks","assertTagType","patchQueryData","patches","updateProvided","queryResultPatched","newValue","providedTags","providesTags","updateProvidedBy","updateQueryData","updateRecipe","currentState","inversePatches","undo","util","push","op","path","upsertQueryData","initiate","executeEndpoint","rejectWithValue","fulfillWithValue","transformResponse","isForcedQuery","queryFn","arg2","what","err","fulfilledTimeStamp","Date","now","baseQueryMeta","catchedError","transformErrorResponse","state","requestState","queries","baseFetchOnMountOrArgChange","refetchOnMountOrArgChange","fulfilledVal","refetchVal","Number","getPendingMeta","startedTimeStamp","condition","queryThunkArgs","currentArg","previousArg","endpointState","dispatchConditionRejection","hasTheForce","hasMaxAge","prefetch","force","maxAge","ifOlderThan","force2","options2","isPrefetch","latestStateValue","lastFulfilledTs","shouldRetrigger","matchesEndpoint","action","buildMatchThunkActions","matchPending","matchFulfilled","matchRejected","calculateProvidedByThunk","payload","isDraft","applyPatches","original","updateQuerySubstateIfExists","update","substate","getMutationCacheKey","id","updateMutationSubstateIfExists","initialState","buildSlice","definitions","apiUid","extractRehydrationInfo","hasRehydrationInfo","resetApiState","writePendingCacheEntry","draft","upserting","writeFulfilledCacheEntry","merge","newData","draftSubstateData","structuralSharing","querySlice","name","reducers","removeQueryResult","reducer","prepare","cacheEntriesUpserted","entry","queryDescription","timestamp","queryDescriptions","extraReducers","builder","addCase","pending","fulfilled","rejected","addMatcher","mutationSlice","cacheKey","mutations","invalidationSlice","tagTypeSubscriptions","idSubscriptions","foundAt","splice","subscribedQueries","alreadySubscribed","includes","actions","provided","incomingTags","cacheKeys","caseReducers","subscriptionSlice","d","a","internalSubscriptionsSlice","subscriptionsUpdated","configSlice","online","focused","middlewareRegistered","combinedReducer","subscriptions","match","skipToken","for","initialSubState","defaultQuerySubState","defaultMutationSubState","buildSelectors","createSelector2","selectSkippedQuery","selectSkippedMutation","buildQuerySelector","buildMutationSelector","selectInvalidatedBy","selectCachedArgsForQuery","withRequestFlags","selectInternalState","rootState","serializedArgs","selectQuerySubstate","mutationId","selectMutationSubstate","finalSelectMutationSubstate","tags","apiState","toInvalidate","Set","tag","invalidateSubscriptions","invalidate","add","from","querySubState","queryName","_formatProdErrorMessage2","cache","WeakMap","defaultSerializeQueryArgs","serialized","cached","stringified","$bigint","toString","sort","reduce","acc","key2","weakMapMemoize","buildCreateApi","modules","baseCreateApi","optionsWithDefaults","keepUnusedDataFor","refetchOnFocus","refetchOnReconnect","invalidationBehavior","queryArgsApi","finalSerializeQueryArgs","endpointSQA","queryArgsApi2","initialResult","tagTypes","batch","fn","injectEndpoints","enhanceEndpoints","addTagTypes","eT","partialDefinition","initializedModules","m","init","inject","evaluatedEndpoints","mutation","definition","overrideExisting","injectEndpoint","_formatProdErrorMessage3","_NEVER","fakeBaseQuery","enablePatches","assertCast","safeAssign","target","produceWithPatches2","buildBatchedActionsHandler","internalState","subscriptionsPrefix","previousSubscriptions","updateSyncTimer","actuallyMutateSubscriptions","mutableState","mutated","getSubscriptions","currentSubscriptions","getSubscriptionCount","subscriptionsForQueryArg","isRequestSubscribed","subscriptionSelectors","mwApi","didMutate","actionShouldContinue","newSubscriptions","next","isSubscriptionSliceAction","isAdditionalSubscriptionAction","isObjectEmpty","THIRTY_TWO_BIT_MAX_TIMER_SECONDS","buildCacheCollectionHandler","canTriggerUnsubscribe","anySubscriptionsRemainingForKey","currentRemovalTimeouts","handler","internalState2","queryCacheKeys","handleUnsubscribe","queryState","api2","Infinity","finalKeepUnusedDataFor","max","currentTimeout","neverResolvedError","buildCacheLifecycleHandler","isQueryThunk","isMutationThunk","isFulfilledThunk","lifecycleMap","resolveLifecycleEntry","lifecycle","valueResolved","removeLifecycleEntry","cacheEntryRemoved","stateBefore","getCacheKey","checkForNewCacheKey","cacheKey2","oldState","handleNewKey","onCacheEntryAdded","cacheDataLoaded","race","extra2","lifecycleApi","getCacheEntry","updateCachedData","runningHandler","buildDevCheckHandler","buildInvalidationByTagsHandler","refetchQuery","isThunkActionWithTags","isQueryEnd","pendingTagInvalidations","invalidateTags","hasPendingRequests","newTags","valuesArray","subscriptionSubState","buildPollingHandler","currentPolls","updatePollingInterval","startNextPoll","clearPolls","lowestPollingInterval","skipPollingIfUnfocused","findLowestPollingInterval","isFinite","currentPoll","nextPollTimestamp","pollingInterval","cleanupPollForKey","existingPoll","subscribers","POSITIVE_INFINITY","buildQueryLifecycleHandler","isPendingThunk","isRejectedThunk","isFullfilledThunk","onQueryStarted","queryFulfilled","reject","rejectedWithValue","isUnhandledError","buildWindowEventHandler","refetchValidQueries","shouldRefetch","some","sub","every","buildMiddleware","input","isThisApiSliceAction","handlerBuilders","middleware","initialized2","builderArgs","handlers","build","batchedActionsHandler","windowEventsHandler","mwApiWithNext","internalProbeResult","coreModuleName","coreModule","sliceActions","upsertQueryEntries","middlewareActions","anyApi","createApi"],"sources":["D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\apiState.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\rtkImports.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\copyWithStructuralSharing.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\countObjectKeys.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\flatten.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\isAbsoluteUrl.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\isDocumentVisible.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\isNotNullish.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\isOnline.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\joinUrls.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\utils\\getOrInsert.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\fetchBaseQuery.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\HandledError.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\retry.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\setupListeners.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\endpointDefinitions.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildThunks.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildInitiate.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\tsHelpers.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildSlice.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildSelectors.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\createApi.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\defaultSerializeQueryArgs.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\fakeBaseQuery.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\module.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\tsHelpers.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\batchActions.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\cacheCollection.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\cacheLifecycle.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\devMiddleware.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\invalidationByTags.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\polling.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\queryLifecycle.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\windowEventHandling.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\buildMiddleware\\index.ts","D:\\COALITION TECH\\assignment_epischolar\\node_modules\\@reduxjs\\toolkit\\src\\query\\core\\index.ts"],"sourcesContent":["import type { SerializedError } from '@reduxjs/toolkit';\nimport type { BaseQueryError } from '../baseQueryTypes';\nimport type { QueryDefinition, MutationDefinition, EndpointDefinitions, BaseEndpointDefinition, ResultTypeFrom, QueryArgFrom } from '../endpointDefinitions';\nimport type { Id, WithRequiredProp } from '../tsHelpers';\nexport type QueryCacheKey = string & {\n  _type: 'queryCacheKey';\n};\nexport type QuerySubstateIdentifier = {\n  queryCacheKey: QueryCacheKey;\n};\nexport type MutationSubstateIdentifier = {\n  requestId: string;\n  fixedCacheKey?: string;\n} | {\n  requestId?: string;\n  fixedCacheKey: string;\n};\nexport type RefetchConfigOptions = {\n  refetchOnMountOrArgChange: boolean | number;\n  refetchOnReconnect: boolean;\n  refetchOnFocus: boolean;\n};\n\n/**\n * Strings describing the query state at any given time.\n */\nexport enum QueryStatus {\n  uninitialized = 'uninitialized',\n  pending = 'pending',\n  fulfilled = 'fulfilled',\n  rejected = 'rejected',\n}\nexport type RequestStatusFlags = {\n  status: QueryStatus.uninitialized;\n  isUninitialized: true;\n  isLoading: false;\n  isSuccess: false;\n  isError: false;\n} | {\n  status: QueryStatus.pending;\n  isUninitialized: false;\n  isLoading: true;\n  isSuccess: false;\n  isError: false;\n} | {\n  status: QueryStatus.fulfilled;\n  isUninitialized: false;\n  isLoading: false;\n  isSuccess: true;\n  isError: false;\n} | {\n  status: QueryStatus.rejected;\n  isUninitialized: false;\n  isLoading: false;\n  isSuccess: false;\n  isError: true;\n};\nexport function getRequestStatusFlags(status: QueryStatus): RequestStatusFlags {\n  return {\n    status,\n    isUninitialized: status === QueryStatus.uninitialized,\n    isLoading: status === QueryStatus.pending,\n    isSuccess: status === QueryStatus.fulfilled,\n    isError: status === QueryStatus.rejected\n  } as any;\n}\n\n/**\n * @public\n */\nexport type SubscriptionOptions = {\n  /**\n   * How frequently to automatically re-fetch data (in milliseconds). Defaults to `0` (off).\n   */\n  pollingInterval?: number;\n  /**\n   *  Defaults to 'false'. This setting allows you to control whether RTK Query will continue polling if the window is not focused.\n   *\n   *  If pollingInterval is not set or set to 0, this **will not be evaluated** until pollingInterval is greater than 0.\n   *\n   *  Note: requires [`setupListeners`](./setupListeners) to have been called.\n   */\n  skipPollingIfUnfocused?: boolean;\n  /**\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after regaining a network connection.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   *\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\n   */\n  refetchOnReconnect?: boolean;\n  /**\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after the application window regains focus.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   *\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\n   */\n  refetchOnFocus?: boolean;\n};\nexport type Subscribers = {\n  [requestId: string]: SubscriptionOptions;\n};\nexport type QueryKeys<Definitions extends EndpointDefinitions> = { [K in keyof Definitions]: Definitions[K] extends QueryDefinition<any, any, any, any> ? K : never }[keyof Definitions];\nexport type MutationKeys<Definitions extends EndpointDefinitions> = { [K in keyof Definitions]: Definitions[K] extends MutationDefinition<any, any, any, any> ? K : never }[keyof Definitions];\ntype BaseQuerySubState<D extends BaseEndpointDefinition<any, any, any>> = {\n  /**\n   * The argument originally passed into the hook or `initiate` action call\n   */\n  originalArgs: QueryArgFrom<D>;\n  /**\n   * A unique ID associated with the request\n   */\n  requestId: string;\n  /**\n   * The received data from the query\n   */\n  data?: ResultTypeFrom<D>;\n  /**\n   * The received error if applicable\n   */\n  error?: SerializedError | (D extends QueryDefinition<any, infer BaseQuery, any, any> ? BaseQueryError<BaseQuery> : never);\n  /**\n   * The name of the endpoint associated with the query\n   */\n  endpointName: string;\n  /**\n   * Time that the latest query started\n   */\n  startedTimeStamp: number;\n  /**\n   * Time that the latest query was fulfilled\n   */\n  fulfilledTimeStamp?: number;\n};\nexport type QuerySubState<D extends BaseEndpointDefinition<any, any, any>> = Id<({\n  status: QueryStatus.fulfilled;\n} & WithRequiredProp<BaseQuerySubState<D>, 'data' | 'fulfilledTimeStamp'> & {\n  error: undefined;\n}) | ({\n  status: QueryStatus.pending;\n} & BaseQuerySubState<D>) | ({\n  status: QueryStatus.rejected;\n} & WithRequiredProp<BaseQuerySubState<D>, 'error'>) | {\n  status: QueryStatus.uninitialized;\n  originalArgs?: undefined;\n  data?: undefined;\n  error?: undefined;\n  requestId?: undefined;\n  endpointName?: string;\n  startedTimeStamp?: undefined;\n  fulfilledTimeStamp?: undefined;\n}>;\ntype BaseMutationSubState<D extends BaseEndpointDefinition<any, any, any>> = {\n  requestId: string;\n  data?: ResultTypeFrom<D>;\n  error?: SerializedError | (D extends MutationDefinition<any, infer BaseQuery, any, any> ? BaseQueryError<BaseQuery> : never);\n  endpointName: string;\n  startedTimeStamp: number;\n  fulfilledTimeStamp?: number;\n};\nexport type MutationSubState<D extends BaseEndpointDefinition<any, any, any>> = (({\n  status: QueryStatus.fulfilled;\n} & WithRequiredProp<BaseMutationSubState<D>, 'data' | 'fulfilledTimeStamp'>) & {\n  error: undefined;\n}) | (({\n  status: QueryStatus.pending;\n} & BaseMutationSubState<D>) & {\n  data?: undefined;\n}) | ({\n  status: QueryStatus.rejected;\n} & WithRequiredProp<BaseMutationSubState<D>, 'error'>) | {\n  requestId?: undefined;\n  status: QueryStatus.uninitialized;\n  data?: undefined;\n  error?: undefined;\n  endpointName?: string;\n  startedTimeStamp?: undefined;\n  fulfilledTimeStamp?: undefined;\n};\nexport type CombinedState<D extends EndpointDefinitions, E extends string, ReducerPath extends string> = {\n  queries: QueryState<D>;\n  mutations: MutationState<D>;\n  provided: InvalidationState<E>;\n  subscriptions: SubscriptionState;\n  config: ConfigState<ReducerPath>;\n};\nexport type InvalidationState<TagTypes extends string> = { [_ in TagTypes]: {\n  [id: string]: Array<QueryCacheKey>;\n  [id: number]: Array<QueryCacheKey>;\n} };\nexport type QueryState<D extends EndpointDefinitions> = {\n  [queryCacheKey: string]: QuerySubState<D[string]> | undefined;\n};\nexport type SubscriptionState = {\n  [queryCacheKey: string]: Subscribers | undefined;\n};\nexport type ConfigState<ReducerPath> = RefetchConfigOptions & {\n  reducerPath: ReducerPath;\n  online: boolean;\n  focused: boolean;\n  middlewareRegistered: boolean | 'conflict';\n} & ModifiableConfigState;\nexport type ModifiableConfigState = {\n  keepUnusedDataFor: number;\n  invalidationBehavior: 'delayed' | 'immediately';\n} & RefetchConfigOptions;\nexport type MutationState<D extends EndpointDefinitions> = {\n  [requestId: string]: MutationSubState<D[string]> | undefined;\n};\nexport type RootState<Definitions extends EndpointDefinitions, TagTypes extends string, ReducerPath extends string> = { [P in ReducerPath]: CombinedState<Definitions, TagTypes, P> };","// This file exists to consolidate all of the imports from the `@reduxjs/toolkit` package.\n// ESBuild does not de-duplicate imports, so this file is used to ensure that each method\n// imported is only listed once, and there's only one mention of the `@reduxjs/toolkit` package.\n\nexport { createAction, createSlice, createSelector, createAsyncThunk, combineReducers, createNextState, isAnyOf, isAllOf, isAction, isPending, isRejected, isFulfilled, isRejectedWithValue, isAsyncThunkAction, prepareAutoBatched, SHOULD_AUTOBATCH, isPlainObject, nanoid } from '@reduxjs/toolkit';","import { isPlainObject as _iPO } from '../core/rtkImports';\n\n// remove type guard\nconst isPlainObject: (_: any) => boolean = _iPO;\nexport function copyWithStructuralSharing<T>(oldObj: any, newObj: T): T;\nexport function copyWithStructuralSharing(oldObj: any, newObj: any): any {\n  if (oldObj === newObj || !(isPlainObject(oldObj) && isPlainObject(newObj) || Array.isArray(oldObj) && Array.isArray(newObj))) {\n    return newObj;\n  }\n  const newKeys = Object.keys(newObj);\n  const oldKeys = Object.keys(oldObj);\n  let isSameObject = newKeys.length === oldKeys.length;\n  const mergeObj: any = Array.isArray(newObj) ? [] : {};\n  for (const key of newKeys) {\n    mergeObj[key] = copyWithStructuralSharing(oldObj[key], newObj[key]);\n    if (isSameObject) isSameObject = oldObj[key] === mergeObj[key];\n  }\n  return isSameObject ? oldObj : mergeObj;\n}","// Fast method for counting an object's keys\n// without resorting to `Object.keys(obj).length\n// Will this make a big difference in perf? Probably not\n// But we can save a few allocations.\n\nexport function countObjectKeys(obj: Record<any, any>) {\n  let count = 0;\n  for (const _key in obj) {\n    count++;\n  }\n  return count;\n}","/**\r\n * Alternative to `Array.flat(1)`\r\n * @param arr An array like [1,2,3,[1,2]]\r\n * @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\r\n */\nexport const flatten = (arr: readonly any[]) => [].concat(...arr);","/**\r\n * If either :// or // is present consider it to be an absolute url\r\n *\r\n * @param url string\r\n */\n\nexport function isAbsoluteUrl(url: string) {\n  return new RegExp(`(^|:)//`).test(url);\n}","/**\r\n * Assumes true for a non-browser env, otherwise makes a best effort\r\n * @link https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState\r\n */\nexport function isDocumentVisible(): boolean {\n  // `document` may not exist in non-browser envs (like RN)\n  if (typeof document === 'undefined') {\n    return true;\n  }\n  // Match true for visible, prerender, undefined\n  return document.visibilityState !== 'hidden';\n}","export function isNotNullish<T>(v: T | null | undefined): v is T {\n  return v != null;\n}","/**\n * Assumes a browser is online if `undefined`, otherwise makes a best effort\n * @link https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine\n */\nexport function isOnline() {\n  // We set the default config value in the store, so we'd need to check for this in a SSR env\n  return typeof navigator === 'undefined' ? true : navigator.onLine === undefined ? true : navigator.onLine;\n}","import { isAbsoluteUrl } from './isAbsoluteUrl';\nconst withoutTrailingSlash = (url: string) => url.replace(/\\/$/, '');\nconst withoutLeadingSlash = (url: string) => url.replace(/^\\//, '');\nexport function joinUrls(base: string | undefined, url: string | undefined): string {\n  if (!base) {\n    return url!;\n  }\n  if (!url) {\n    return base;\n  }\n  if (isAbsoluteUrl(url)) {\n    return url;\n  }\n  const delimiter = base.endsWith('/') || !url.startsWith('?') ? '/' : '';\n  base = withoutTrailingSlash(base);\n  url = withoutLeadingSlash(url);\n  return `${base}${delimiter}${url}`;\n}","export function getOrInsert<K extends object, V>(map: WeakMap<K, V>, key: K, value: V): V;\nexport function getOrInsert<K, V>(map: Map<K, V>, key: K, value: V): V;\nexport function getOrInsert<K extends object, V>(map: Map<K, V> | WeakMap<K, V>, key: K, value: V): V {\n  if (map.has(key)) return map.get(key) as V;\n  return map.set(key, value).get(key) as V;\n}","import { joinUrls } from './utils';\nimport { isPlainObject } from './core/rtkImports';\nimport type { BaseQueryApi, BaseQueryFn } from './baseQueryTypes';\nimport type { MaybePromise, Override } from './tsHelpers';\nexport type ResponseHandler = 'content-type' | 'json' | 'text' | ((response: Response) => Promise<any>);\ntype CustomRequestInit = Override<RequestInit, {\n  headers?: Headers | string[][] | Record<string, string | undefined> | undefined;\n}>;\nexport interface FetchArgs extends CustomRequestInit {\n  url: string;\n  params?: Record<string, any>;\n  body?: any;\n  responseHandler?: ResponseHandler;\n  validateStatus?: (response: Response, body: any) => boolean;\n  /**\n   * A number in milliseconds that represents that maximum time a request can take before timing out.\n   */\n  timeout?: number;\n}\n\n/**\n * A mini-wrapper that passes arguments straight through to\n * {@link [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)}.\n * Avoids storing `fetch` in a closure, in order to permit mocking/monkey-patching.\n */\nconst defaultFetchFn: typeof fetch = (...args) => fetch(...args);\nconst defaultValidateStatus = (response: Response) => response.status >= 200 && response.status <= 299;\nconst defaultIsJsonContentType = (headers: Headers) => /*applicat*//ion\\/(vnd\\.api\\+)?json/.test(headers.get('content-type') || '');\nexport type FetchBaseQueryError = {\n  /**\n   * * `number`:\n   *   HTTP status code\n   */\n  status: number;\n  data: unknown;\n} | {\n  /**\n   * * `\"FETCH_ERROR\"`:\n   *   An error that occurred during execution of `fetch` or the `fetchFn` callback option\n   **/\n  status: 'FETCH_ERROR';\n  data?: undefined;\n  error: string;\n} | {\n  /**\n   * * `\"PARSING_ERROR\"`:\n   *   An error happened during parsing.\n   *   Most likely a non-JSON-response was returned with the default `responseHandler` \"JSON\",\n   *   or an error occurred while executing a custom `responseHandler`.\n   **/\n  status: 'PARSING_ERROR';\n  originalStatus: number;\n  data: string;\n  error: string;\n} | {\n  /**\n   * * `\"TIMEOUT_ERROR\"`:\n   *   Request timed out\n   **/\n  status: 'TIMEOUT_ERROR';\n  data?: undefined;\n  error: string;\n} | {\n  /**\n   * * `\"CUSTOM_ERROR\"`:\n   *   A custom error type that you can return from your `queryFn` where another error might not make sense.\n   **/\n  status: 'CUSTOM_ERROR';\n  data?: unknown;\n  error: string;\n};\nfunction stripUndefined(obj: any) {\n  if (!isPlainObject(obj)) {\n    return obj;\n  }\n  const copy: Record<string, any> = {\n    ...obj\n  };\n  for (const [k, v] of Object.entries(copy)) {\n    if (v === undefined) delete copy[k];\n  }\n  return copy;\n}\nexport type FetchBaseQueryArgs = {\n  baseUrl?: string;\n  prepareHeaders?: (headers: Headers, api: Pick<BaseQueryApi, 'getState' | 'extra' | 'endpoint' | 'type' | 'forced'> & {\n    arg: string | FetchArgs;\n    extraOptions: unknown;\n  }) => MaybePromise<Headers | void>;\n  fetchFn?: (input: RequestInfo, init?: RequestInit | undefined) => Promise<Response>;\n  paramsSerializer?: (params: Record<string, any>) => string;\n  /**\n   * By default, we only check for 'application/json' and 'application/vnd.api+json' as the content-types for json. If you need to support another format, you can pass\n   * in a predicate function for your given api to get the same automatic stringifying behavior\n   * @example\n   * ```ts\n   * const isJsonContentType = (headers: Headers) => [\"application/vnd.api+json\", \"application/json\", \"application/vnd.hal+json\"].includes(headers.get(\"content-type\")?.trim());\n   * ```\n   */\n  isJsonContentType?: (headers: Headers) => boolean;\n  /**\n   * Defaults to `application/json`;\n   */\n  jsonContentType?: string;\n\n  /**\n   * Custom replacer function used when calling `JSON.stringify()`;\n   */\n  jsonReplacer?: (this: any, key: string, value: any) => any;\n} & RequestInit & Pick<FetchArgs, 'responseHandler' | 'validateStatus' | 'timeout'>;\nexport type FetchBaseQueryMeta = {\n  request: Request;\n  response?: Response;\n};\n\n/**\n * This is a very small wrapper around fetch that aims to simplify requests.\n *\n * @example\n * ```ts\n * const baseQuery = fetchBaseQuery({\n *   baseUrl: 'https://api.your-really-great-app.com/v1/',\n *   prepareHeaders: (headers, { getState }) => {\n *     const token = (getState() as RootState).auth.token;\n *     // If we have a token set in state, let's assume that we should be passing it.\n *     if (token) {\n *       headers.set('authorization', `Bearer ${token}`);\n *     }\n *     return headers;\n *   },\n * })\n * ```\n *\n * @param {string} baseUrl\n * The base URL for an API service.\n * Typically in the format of https://example.com/\n *\n * @param {(headers: Headers, api: { getState: () => unknown; arg: string | FetchArgs; extra: unknown; endpoint: string; type: 'query' | 'mutation'; forced: boolean; }) => Headers} prepareHeaders\n * An optional function that can be used to inject headers on requests.\n * Provides a Headers object, most of the `BaseQueryApi` (`dispatch` is not available), and the arg passed into the query function.\n * Useful for setting authentication or headers that need to be set conditionally.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/Headers\n *\n * @param {(input: RequestInfo, init?: RequestInit | undefined) => Promise<Response>} fetchFn\n * Accepts a custom `fetch` function if you do not want to use the default on the window.\n * Useful in SSR environments if you need to use a library such as `isomorphic-fetch` or `cross-fetch`\n *\n * @param {(params: Record<string, unknown>) => string} paramsSerializer\n * An optional function that can be used to stringify querystring parameters.\n *\n * @param {(headers: Headers) => boolean} isJsonContentType\n * An optional predicate function to determine if `JSON.stringify()` should be called on the `body` arg of `FetchArgs`\n *\n * @param {string} jsonContentType Used when automatically setting the content-type header for a request with a jsonifiable body that does not have an explicit content-type header. Defaults to `application/json`.\n *\n * @param {(this: any, key: string, value: any) => any} jsonReplacer Custom replacer function used when calling `JSON.stringify()`.\n *\n * @param {number} timeout\n * A number in milliseconds that represents the maximum time a request can take before timing out.\n */\n\nexport function fetchBaseQuery({\n  baseUrl,\n  prepareHeaders = x => x,\n  fetchFn = defaultFetchFn,\n  paramsSerializer,\n  isJsonContentType = defaultIsJsonContentType,\n  jsonContentType = 'application/json',\n  jsonReplacer,\n  timeout: defaultTimeout,\n  responseHandler: globalResponseHandler,\n  validateStatus: globalValidateStatus,\n  ...baseFetchOptions\n}: FetchBaseQueryArgs = {}): BaseQueryFn<string | FetchArgs, unknown, FetchBaseQueryError, {}, FetchBaseQueryMeta> {\n  if (typeof fetch === 'undefined' && fetchFn === defaultFetchFn) {\n    console.warn('Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments.');\n  }\n  return async (arg, api, extraOptions) => {\n    const {\n      getState,\n      extra,\n      endpoint,\n      forced,\n      type\n    } = api;\n    let meta: FetchBaseQueryMeta | undefined;\n    let {\n      url,\n      headers = new Headers(baseFetchOptions.headers),\n      params = undefined,\n      responseHandler = globalResponseHandler ?? 'json' as const,\n      validateStatus = globalValidateStatus ?? defaultValidateStatus,\n      timeout = defaultTimeout,\n      ...rest\n    } = typeof arg == 'string' ? {\n      url: arg\n    } : arg;\n    let abortController: AbortController | undefined,\n      signal = api.signal;\n    if (timeout) {\n      abortController = new AbortController();\n      api.signal.addEventListener('abort', abortController.abort);\n      signal = abortController.signal;\n    }\n    let config: RequestInit = {\n      ...baseFetchOptions,\n      signal,\n      ...rest\n    };\n    headers = new Headers(stripUndefined(headers));\n    config.headers = (await prepareHeaders(headers, {\n      getState,\n      arg,\n      extra,\n      endpoint,\n      forced,\n      type,\n      extraOptions\n    })) || headers;\n\n    // Only set the content-type to json if appropriate. Will not be true for FormData, ArrayBuffer, Blob, etc.\n    const isJsonifiable = (body: any) => typeof body === 'object' && (isPlainObject(body) || Array.isArray(body) || typeof body.toJSON === 'function');\n    if (!config.headers.has('content-type') && isJsonifiable(config.body)) {\n      config.headers.set('content-type', jsonContentType);\n    }\n    if (isJsonifiable(config.body) && isJsonContentType(config.headers)) {\n      config.body = JSON.stringify(config.body, jsonReplacer);\n    }\n    if (params) {\n      const divider = ~url.indexOf('?') ? '&' : '?';\n      const query = paramsSerializer ? paramsSerializer(params) : new URLSearchParams(stripUndefined(params));\n      url += divider + query;\n    }\n    url = joinUrls(baseUrl, url);\n    const request = new Request(url, config);\n    const requestClone = new Request(url, config);\n    meta = {\n      request: requestClone\n    };\n    let response,\n      timedOut = false,\n      timeoutId = abortController && setTimeout(() => {\n        timedOut = true;\n        abortController!.abort();\n      }, timeout);\n    try {\n      response = await fetchFn(request);\n    } catch (e) {\n      return {\n        error: {\n          status: timedOut ? 'TIMEOUT_ERROR' : 'FETCH_ERROR',\n          error: String(e)\n        },\n        meta\n      };\n    } finally {\n      if (timeoutId) clearTimeout(timeoutId);\n      abortController?.signal.removeEventListener('abort', abortController.abort);\n    }\n    const responseClone = response.clone();\n    meta.response = responseClone;\n    let resultData: any;\n    let responseText: string = '';\n    try {\n      let handleResponseError;\n      await Promise.all([handleResponse(response, responseHandler).then(r => resultData = r, e => handleResponseError = e),\n      // see https://github.com/node-fetch/node-fetch/issues/665#issuecomment-538995182\n      // we *have* to \"use up\" both streams at the same time or they will stop running in node-fetch scenarios\n      responseClone.text().then(r => responseText = r, () => {})]);\n      if (handleResponseError) throw handleResponseError;\n    } catch (e) {\n      return {\n        error: {\n          status: 'PARSING_ERROR',\n          originalStatus: response.status,\n          data: responseText,\n          error: String(e)\n        },\n        meta\n      };\n    }\n    return validateStatus(response, resultData) ? {\n      data: resultData,\n      meta\n    } : {\n      error: {\n        status: response.status,\n        data: resultData\n      },\n      meta\n    };\n  };\n  async function handleResponse(response: Response, responseHandler: ResponseHandler) {\n    if (typeof responseHandler === 'function') {\n      return responseHandler(response);\n    }\n    if (responseHandler === 'content-type') {\n      responseHandler = isJsonContentType(response.headers) ? 'json' : 'text';\n    }\n    if (responseHandler === 'json') {\n      const text = await response.text();\n      return text.length ? JSON.parse(text) : null;\n    }\n    return response.text();\n  }\n}","export class HandledError {\n  constructor(public readonly value: any, public readonly meta: any = undefined) {}\n}","import type { BaseQueryApi, BaseQueryArg, BaseQueryEnhancer, BaseQueryError, BaseQueryExtraOptions, BaseQueryFn, BaseQueryMeta } from './baseQueryTypes';\nimport type { FetchBaseQueryError } from './fetchBaseQuery';\nimport { HandledError } from './HandledError';\n\n/**\n * Exponential backoff based on the attempt number.\n *\n * @remarks\n * 1. 600ms * random(0.4, 1.4)\n * 2. 1200ms * random(0.4, 1.4)\n * 3. 2400ms * random(0.4, 1.4)\n * 4. 4800ms * random(0.4, 1.4)\n * 5. 9600ms * random(0.4, 1.4)\n *\n * @param attempt - Current attempt\n * @param maxRetries - Maximum number of retries\n */\nasync function defaultBackoff(attempt: number = 0, maxRetries: number = 5) {\n  const attempts = Math.min(attempt, maxRetries);\n  const timeout = ~~((Math.random() + 0.4) * (300 << attempts)); // Force a positive int in the case we make this an option\n  await new Promise(resolve => setTimeout((res: any) => resolve(res), timeout));\n}\ntype RetryConditionFunction = (error: BaseQueryError<BaseQueryFn>, args: BaseQueryArg<BaseQueryFn>, extraArgs: {\n  attempt: number;\n  baseQueryApi: BaseQueryApi;\n  extraOptions: BaseQueryExtraOptions<BaseQueryFn> & RetryOptions;\n}) => boolean;\nexport type RetryOptions = {\n  /**\n   * Function used to determine delay between retries\n   */\n  backoff?: (attempt: number, maxRetries: number) => Promise<void>;\n} & ({\n  /**\n   * How many times the query will be retried (default: 5)\n   */\n  maxRetries?: number;\n  retryCondition?: undefined;\n} | {\n  /**\n   * Callback to determine if a retry should be attempted.\n   * Return `true` for another retry and `false` to quit trying prematurely.\n   */\n  retryCondition?: RetryConditionFunction;\n  maxRetries?: undefined;\n});\nfunction fail<BaseQuery extends BaseQueryFn = BaseQueryFn>(error: BaseQueryError<BaseQuery>, meta?: BaseQueryMeta<BaseQuery>): never {\n  throw Object.assign(new HandledError({\n    error,\n    meta\n  }), {\n    throwImmediately: true\n  });\n}\nconst EMPTY_OPTIONS = {};\nconst retryWithBackoff: BaseQueryEnhancer<unknown, RetryOptions, RetryOptions | void> = (baseQuery, defaultOptions) => async (args, api, extraOptions) => {\n  // We need to figure out `maxRetries` before we define `defaultRetryCondition.\n  // This is probably goofy, but ought to work.\n  // Put our defaults in one array, filter out undefineds, grab the last value.\n  const possibleMaxRetries: number[] = [5, (defaultOptions as any || EMPTY_OPTIONS).maxRetries, (extraOptions as any || EMPTY_OPTIONS).maxRetries].filter(x => x !== undefined);\n  const [maxRetries] = possibleMaxRetries.slice(-1);\n  const defaultRetryCondition: RetryConditionFunction = (_, __, {\n    attempt\n  }) => attempt <= maxRetries;\n  const options: {\n    maxRetries: number;\n    backoff: typeof defaultBackoff;\n    retryCondition: typeof defaultRetryCondition;\n  } = {\n    maxRetries,\n    backoff: defaultBackoff,\n    retryCondition: defaultRetryCondition,\n    ...defaultOptions,\n    ...extraOptions\n  };\n  let retry = 0;\n  while (true) {\n    try {\n      const result = await baseQuery(args, api, extraOptions);\n      // baseQueries _should_ return an error property, so we should check for that and throw it to continue retrying\n      if (result.error) {\n        throw new HandledError(result);\n      }\n      return result;\n    } catch (e: any) {\n      retry++;\n      if (e.throwImmediately) {\n        if (e instanceof HandledError) {\n          return e.value;\n        }\n\n        // We don't know what this is, so we have to rethrow it\n        throw e;\n      }\n      if (e instanceof HandledError && !options.retryCondition(e.value.error as FetchBaseQueryError, args, {\n        attempt: retry,\n        baseQueryApi: api,\n        extraOptions\n      })) {\n        return e.value;\n      }\n      await options.backoff(retry, options.maxRetries);\n    }\n  }\n};\n\n/**\n * A utility that can wrap `baseQuery` in the API definition to provide retries with a basic exponential backoff.\n *\n * @example\n *\n * ```ts\n * // codeblock-meta title=\"Retry every request 5 times by default\"\n * import { createApi, fetchBaseQuery, retry } from '@reduxjs/toolkit/query/react'\n * interface Post {\n *   id: number\n *   name: string\n * }\n * type PostsResponse = Post[]\n *\n * // maxRetries: 5 is the default, and can be omitted. Shown for documentation purposes.\n * const staggeredBaseQuery = retry(fetchBaseQuery({ baseUrl: '/' }), { maxRetries: 5 });\n * export const api = createApi({\n *   baseQuery: staggeredBaseQuery,\n *   endpoints: (build) => ({\n *     getPosts: build.query<PostsResponse, void>({\n *       query: () => ({ url: 'posts' }),\n *     }),\n *     getPost: build.query<PostsResponse, string>({\n *       query: (id) => ({ url: `post/${id}` }),\n *       extraOptions: { maxRetries: 8 }, // You can override the retry behavior on each endpoint\n *     }),\n *   }),\n * });\n *\n * export const { useGetPostsQuery, useGetPostQuery } = api;\n * ```\n */\nexport const retry = /* @__PURE__ */Object.assign(retryWithBackoff, {\n  fail\n});","import type { ThunkDispatch, ActionCreatorWithoutPayload // Workaround for API-Extractor\n} from '@reduxjs/toolkit';\nimport { createAction } from './rtkImports';\nexport const onFocus = /* @__PURE__ */createAction('__rtkq/focused');\nexport const onFocusLost = /* @__PURE__ */createAction('__rtkq/unfocused');\nexport const onOnline = /* @__PURE__ */createAction('__rtkq/online');\nexport const onOffline = /* @__PURE__ */createAction('__rtkq/offline');\nlet initialized = false;\n\n/**\n * A utility used to enable `refetchOnMount` and `refetchOnReconnect` behaviors.\n * It requires the dispatch method from your store.\n * Calling `setupListeners(store.dispatch)` will configure listeners with the recommended defaults,\n * but you have the option of providing a callback for more granular control.\n *\n * @example\n * ```ts\n * setupListeners(store.dispatch)\n * ```\n *\n * @param dispatch - The dispatch method from your store\n * @param customHandler - An optional callback for more granular control over listener behavior\n * @returns Return value of the handler.\n * The default handler returns an `unsubscribe` method that can be called to remove the listeners.\n */\nexport function setupListeners(dispatch: ThunkDispatch<any, any, any>, customHandler?: (dispatch: ThunkDispatch<any, any, any>, actions: {\n  onFocus: typeof onFocus;\n  onFocusLost: typeof onFocusLost;\n  onOnline: typeof onOnline;\n  onOffline: typeof onOffline;\n}) => () => void) {\n  function defaultHandler() {\n    const handleFocus = () => dispatch(onFocus());\n    const handleFocusLost = () => dispatch(onFocusLost());\n    const handleOnline = () => dispatch(onOnline());\n    const handleOffline = () => dispatch(onOffline());\n    const handleVisibilityChange = () => {\n      if (window.document.visibilityState === 'visible') {\n        handleFocus();\n      } else {\n        handleFocusLost();\n      }\n    };\n    if (!initialized) {\n      if (typeof window !== 'undefined' && window.addEventListener) {\n        // Handle focus events\n        window.addEventListener('visibilitychange', handleVisibilityChange, false);\n        window.addEventListener('focus', handleFocus, false);\n\n        // Handle connection events\n        window.addEventListener('online', handleOnline, false);\n        window.addEventListener('offline', handleOffline, false);\n        initialized = true;\n      }\n    }\n    const unsubscribe = () => {\n      window.removeEventListener('focus', handleFocus);\n      window.removeEventListener('visibilitychange', handleVisibilityChange);\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      initialized = false;\n    };\n    return unsubscribe;\n  }\n  return customHandler ? customHandler(dispatch, {\n    onFocus,\n    onFocusLost,\n    onOffline,\n    onOnline\n  }) : defaultHandler();\n}","import type { Api } from '@reduxjs/toolkit/query';\nimport type { BaseQueryApi, BaseQueryArg, BaseQueryError, BaseQueryExtraOptions, BaseQueryFn, BaseQueryMeta, BaseQueryResult, QueryReturnValue } from './baseQueryTypes';\nimport type { QuerySubState, RootState } from './core';\nimport type { CacheCollectionQueryExtraOptions } from './core/buildMiddleware/cacheCollection';\nimport type { CacheLifecycleMutationExtraOptions, CacheLifecycleQueryExtraOptions } from './core/buildMiddleware/cacheLifecycle';\nimport type { QueryLifecycleMutationExtraOptions, QueryLifecycleQueryExtraOptions } from './core/buildMiddleware/queryLifecycle';\nimport type { SerializeQueryArgs } from './defaultSerializeQueryArgs';\nimport type { NEVER } from './fakeBaseQuery';\nimport type { CastAny, HasRequiredProps, MaybePromise, NonUndefined, OmitFromUnion, UnwrapPromise } from './tsHelpers';\nimport { isNotNullish } from './utils';\nconst resultType = /* @__PURE__ */Symbol();\nconst baseQuery = /* @__PURE__ */Symbol();\ntype EndpointDefinitionWithQuery<QueryArg, BaseQuery extends BaseQueryFn, ResultType> = {\n  /**\n   * `query` can be a function that returns either a `string` or an `object` which is passed to your `baseQuery`. If you are using [fetchBaseQuery](./fetchBaseQuery), this can return either a `string` or an `object` of properties in `FetchArgs`. If you use your own custom [`baseQuery`](../../rtk-query/usage/customizing-queries), you can customize this behavior to your liking.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"query example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   tagTypes: ['Post'],\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       // highlight-start\n   *       query: () => 'posts',\n   *       // highlight-end\n   *     }),\n   *     addPost: build.mutation<Post, Partial<Post>>({\n   *      // highlight-start\n   *      query: (body) => ({\n   *        url: `posts`,\n   *        method: 'POST',\n   *        body,\n   *      }),\n   *      // highlight-end\n   *      invalidatesTags: [{ type: 'Post', id: 'LIST' }],\n   *    }),\n   *   })\n   * })\n   * ```\n   */\n  query(arg: QueryArg): BaseQueryArg<BaseQuery>;\n  queryFn?: never;\n  /**\n   * A function to manipulate the data returned by a query or mutation.\n   */\n  transformResponse?(baseQueryReturnValue: BaseQueryResult<BaseQuery>, meta: BaseQueryMeta<BaseQuery>, arg: QueryArg): ResultType | Promise<ResultType>;\n  /**\n   * A function to manipulate the data returned by a failed query or mutation.\n   */\n  transformErrorResponse?(baseQueryReturnValue: BaseQueryError<BaseQuery>, meta: BaseQueryMeta<BaseQuery>, arg: QueryArg): unknown;\n  /**\n   * Defaults to `true`.\n   *\n   * Most apps should leave this setting on. The only time it can be a performance issue\n   * is if an API returns extremely large amounts of data (e.g. 10,000 rows per request) and\n   * you're unable to paginate it.\n   *\n   * For details of how this works, please see the below. When it is set to `false`,\n   * every request will cause subscribed components to rerender, even when the data has not changed.\n   *\n   * @see https://redux-toolkit.js.org/api/other-exports#copywithstructuralsharing\n   */\n  structuralSharing?: boolean;\n};\ntype EndpointDefinitionWithQueryFn<QueryArg, BaseQuery extends BaseQueryFn, ResultType> = {\n  /**\n   * Can be used in place of `query` as an inline function that bypasses `baseQuery` completely for the endpoint.\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta title=\"Basic queryFn example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *     }),\n   *     flipCoin: build.query<'heads' | 'tails', void>({\n   *       // highlight-start\n   *       queryFn(arg, queryApi, extraOptions, baseQuery) {\n   *         const randomVal = Math.random()\n   *         if (randomVal < 0.45) {\n   *           return { data: 'heads' }\n   *         }\n   *         if (randomVal < 0.9) {\n   *           return { data: 'tails' }\n   *         }\n   *         return { error: { status: 500, statusText: 'Internal Server Error', data: \"Coin landed on its edge!\" } }\n   *       }\n   *       // highlight-end\n   *     })\n   *   })\n   * })\n   * ```\n   */\n  queryFn(arg: QueryArg, api: BaseQueryApi, extraOptions: BaseQueryExtraOptions<BaseQuery>, baseQuery: (arg: Parameters<BaseQuery>[0]) => ReturnType<BaseQuery>): MaybePromise<QueryReturnValue<ResultType, BaseQueryError<BaseQuery>, BaseQueryMeta<BaseQuery>>>;\n  query?: never;\n  transformResponse?: never;\n  transformErrorResponse?: never;\n  /**\n   * Defaults to `true`.\n   *\n   * Most apps should leave this setting on. The only time it can be a performance issue\n   * is if an API returns extremely large amounts of data (e.g. 10,000 rows per request) and\n   * you're unable to paginate it.\n   *\n   * For details of how this works, please see the below. When it is set to `false`,\n   * every request will cause subscribed components to rerender, even when the data has not changed.\n   *\n   * @see https://redux-toolkit.js.org/api/other-exports#copywithstructuralsharing\n   */\n  structuralSharing?: boolean;\n};\ntype BaseEndpointTypes<QueryArg, BaseQuery extends BaseQueryFn, ResultType> = {\n  QueryArg: QueryArg;\n  BaseQuery: BaseQuery;\n  ResultType: ResultType;\n};\nexport type BaseEndpointDefinition<QueryArg, BaseQuery extends BaseQueryFn, ResultType> = (([CastAny<BaseQueryResult<BaseQuery>, {}>] extends [NEVER] ? never : EndpointDefinitionWithQuery<QueryArg, BaseQuery, ResultType>) | EndpointDefinitionWithQueryFn<QueryArg, BaseQuery, ResultType>) & {\n  /* phantom type */\n  [resultType]?: ResultType;\n  /* phantom type */\n  [baseQuery]?: BaseQuery;\n} & HasRequiredProps<BaseQueryExtraOptions<BaseQuery>, {\n  extraOptions: BaseQueryExtraOptions<BaseQuery>;\n}, {\n  extraOptions?: BaseQueryExtraOptions<BaseQuery>;\n}>;\nexport enum DefinitionType {\n  query = 'query',\n  mutation = 'mutation',\n}\nexport type GetResultDescriptionFn<TagTypes extends string, ResultType, QueryArg, ErrorType, MetaType> = (result: ResultType | undefined, error: ErrorType | undefined, arg: QueryArg, meta: MetaType) => ReadonlyArray<TagDescription<TagTypes> | undefined | null>;\nexport type FullTagDescription<TagType> = {\n  type: TagType;\n  id?: number | string;\n};\nexport type TagDescription<TagType> = TagType | FullTagDescription<TagType>;\n\n/**\n * @public\n */\nexport type ResultDescription<TagTypes extends string, ResultType, QueryArg, ErrorType, MetaType> = ReadonlyArray<TagDescription<TagTypes> | undefined | null> | GetResultDescriptionFn<TagTypes, ResultType, QueryArg, ErrorType, MetaType>;\ntype QueryTypes<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string> = BaseEndpointTypes<QueryArg, BaseQuery, ResultType> & {\n  /**\n   * The endpoint definition type. To be used with some internal generic types.\n   * @example\n   * ```ts\n   * const useMyWrappedHook: UseQuery<typeof api.endpoints.query.Types.QueryDefinition> = ...\n   * ```\n   */\n  QueryDefinition: QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n  TagTypes: TagTypes;\n  ReducerPath: ReducerPath;\n};\n\n/**\n * @public\n */\nexport interface QueryExtraOptions<TagTypes extends string, ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> extends CacheLifecycleQueryExtraOptions<ResultType, QueryArg, BaseQuery, ReducerPath>, QueryLifecycleQueryExtraOptions<ResultType, QueryArg, BaseQuery, ReducerPath>, CacheCollectionQueryExtraOptions {\n  type: DefinitionType.query;\n\n  /**\n   * Used by `query` endpoints. Determines which 'tag' is attached to the cached data returned by the query.\n   * Expects an array of tag type strings, an array of objects of tag types with ids, or a function that returns such an array.\n   * 1.  `['Post']` - equivalent to `2`\n   * 2.  `[{ type: 'Post' }]` - equivalent to `1`\n   * 3.  `[{ type: 'Post', id: 1 }]`\n   * 4.  `(result, error, arg) => ['Post']` - equivalent to `5`\n   * 5.  `(result, error, arg) => [{ type: 'Post' }]` - equivalent to `4`\n   * 6.  `(result, error, arg) => [{ type: 'Post', id: 1 }]`\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"providesTags example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   tagTypes: ['Posts'],\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *       // highlight-start\n   *       providesTags: (result) =>\n   *         result\n   *           ? [\n   *               ...result.map(({ id }) => ({ type: 'Posts' as const, id })),\n   *               { type: 'Posts', id: 'LIST' },\n   *             ]\n   *           : [{ type: 'Posts', id: 'LIST' }],\n   *       // highlight-end\n   *     })\n   *   })\n   * })\n   * ```\n   */\n  providesTags?: ResultDescription<TagTypes, ResultType, QueryArg, BaseQueryError<BaseQuery>, BaseQueryMeta<BaseQuery>>;\n  /**\n   * Not to be used. A query should not invalidate tags in the cache.\n   */\n  invalidatesTags?: never;\n\n  /**\n   * Can be provided to return a custom cache key value based on the query arguments.\n   *\n   * This is primarily intended for cases where a non-serializable value is passed as part of the query arg object and should be excluded from the cache key.  It may also be used for cases where an endpoint should only have a single cache entry, such as an infinite loading / pagination implementation.\n   *\n   * Unlike the `createApi` version which can _only_ return a string, this per-endpoint option can also return an an object, number, or boolean.  If it returns a string, that value will be used as the cache key directly.  If it returns an object / number / boolean, that value will be passed to the built-in `defaultSerializeQueryArgs`.  This simplifies the use case of stripping out args you don't want included in the cache key.\n   *\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"serializeQueryArgs : exclude value\"\n   *\n   * import { createApi, fetchBaseQuery, defaultSerializeQueryArgs } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   *\n   * interface MyApiClient {\n   *   fetchPost: (id: string) => Promise<Post>\n   * }\n   *\n   * createApi({\n   *  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *  endpoints: (build) => ({\n   *    // Example: an endpoint with an API client passed in as an argument,\n   *    // but only the item ID should be used as the cache key\n   *    getPost: build.query<Post, { id: string; client: MyApiClient }>({\n   *      queryFn: async ({ id, client }) => {\n   *        const post = await client.fetchPost(id)\n   *        return { data: post }\n   *      },\n   *      // highlight-start\n   *      serializeQueryArgs: ({ queryArgs, endpointDefinition, endpointName }) => {\n   *        const { id } = queryArgs\n   *        // This can return a string, an object, a number, or a boolean.\n   *        // If it returns an object, number or boolean, that value\n   *        // will be serialized automatically via `defaultSerializeQueryArgs`\n   *        return { id } // omit `client` from the cache key\n   *\n   *        // Alternately, you can use `defaultSerializeQueryArgs` yourself:\n   *        // return defaultSerializeQueryArgs({\n   *        //   endpointName,\n   *        //   queryArgs: { id },\n   *        //   endpointDefinition\n   *        // })\n   *        // Or  create and return a string yourself:\n   *        // return `getPost(${id})`\n   *      },\n   *      // highlight-end\n   *    }),\n   *  }),\n   *})\n   * ```\n   */\n  serializeQueryArgs?: SerializeQueryArgs<QueryArg, string | number | boolean | Record<any, any>>;\n\n  /**\n   * Can be provided to merge an incoming response value into the current cache data.\n   * If supplied, no automatic structural sharing will be applied - it's up to\n   * you to update the cache appropriately.\n   *\n   * Since RTKQ normally replaces cache entries with the new response, you will usually\n   * need to use this with the `serializeQueryArgs` or `forceRefetch` options to keep\n   * an existing cache entry so that it can be updated.\n   *\n   * Since this is wrapped with Immer, you may either mutate the `currentCacheValue` directly,\n   * or return a new value, but _not_ both at once.\n   *\n   * Will only be called if the existing `currentCacheData` is _not_ `undefined` - on first response,\n   * the cache entry will just save the response data directly.\n   *\n   * Useful if you don't want a new request to completely override the current cache value,\n   * maybe because you have manually updated it from another source and don't want those\n   * updates to get lost.\n   *\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"merge: pagination\"\n   *\n   * import { createApi, fetchBaseQuery, defaultSerializeQueryArgs } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   *\n   * createApi({\n   *  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *  endpoints: (build) => ({\n   *    listItems: build.query<string[], number>({\n   *      query: (pageNumber) => `/listItems?page=${pageNumber}`,\n   *     // Only have one cache entry because the arg always maps to one string\n   *     serializeQueryArgs: ({ endpointName }) => {\n   *       return endpointName\n   *      },\n   *      // Always merge incoming data to the cache entry\n   *      merge: (currentCache, newItems) => {\n   *        currentCache.push(...newItems)\n   *      },\n   *      // Refetch when the page arg changes\n   *      forceRefetch({ currentArg, previousArg }) {\n   *        return currentArg !== previousArg\n   *      },\n   *    }),\n   *  }),\n   *})\n   * ```\n   */\n  merge?(currentCacheData: ResultType, responseData: ResultType, otherArgs: {\n    arg: QueryArg;\n    baseQueryMeta: BaseQueryMeta<BaseQuery>;\n    requestId: string;\n    fulfilledTimeStamp: number;\n  }): ResultType | void;\n\n  /**\n   * Check to see if the endpoint should force a refetch in cases where it normally wouldn't.\n   * This is primarily useful for \"infinite scroll\" / pagination use cases where\n   * RTKQ is keeping a single cache entry that is added to over time, in combination\n   * with `serializeQueryArgs` returning a fixed cache key and a `merge` callback\n   * set to add incoming data to the cache entry each time.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"forceRefresh: pagination\"\n   *\n   * import { createApi, fetchBaseQuery, defaultSerializeQueryArgs } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   *\n   * createApi({\n   *  baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *  endpoints: (build) => ({\n   *    listItems: build.query<string[], number>({\n   *      query: (pageNumber) => `/listItems?page=${pageNumber}`,\n   *     // Only have one cache entry because the arg always maps to one string\n   *     serializeQueryArgs: ({ endpointName }) => {\n   *       return endpointName\n   *      },\n   *      // Always merge incoming data to the cache entry\n   *      merge: (currentCache, newItems) => {\n   *        currentCache.push(...newItems)\n   *      },\n   *      // Refetch when the page arg changes\n   *      forceRefetch({ currentArg, previousArg }) {\n   *        return currentArg !== previousArg\n   *      },\n   *    }),\n   *  }),\n   *})\n   * ```\n   */\n  forceRefetch?(params: {\n    currentArg: QueryArg | undefined;\n    previousArg: QueryArg | undefined;\n    state: RootState<any, any, string>;\n    endpointState?: QuerySubState<any>;\n  }): boolean;\n\n  /**\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\n   */\n  Types?: QueryTypes<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n}\nexport type QueryDefinition<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string> = BaseEndpointDefinition<QueryArg, BaseQuery, ResultType> & QueryExtraOptions<TagTypes, ResultType, QueryArg, BaseQuery, ReducerPath>;\ntype MutationTypes<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string> = BaseEndpointTypes<QueryArg, BaseQuery, ResultType> & {\n  /**\n   * The endpoint definition type. To be used with some internal generic types.\n   * @example\n   * ```ts\n   * const useMyWrappedHook: UseMutation<typeof api.endpoints.query.Types.MutationDefinition> = ...\n   * ```\n   */\n  MutationDefinition: MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n  TagTypes: TagTypes;\n  ReducerPath: ReducerPath;\n};\n\n/**\n * @public\n */\nexport interface MutationExtraOptions<TagTypes extends string, ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> extends CacheLifecycleMutationExtraOptions<ResultType, QueryArg, BaseQuery, ReducerPath>, QueryLifecycleMutationExtraOptions<ResultType, QueryArg, BaseQuery, ReducerPath> {\n  type: DefinitionType.mutation;\n\n  /**\n   * Used by `mutation` endpoints. Determines which cached data should be either re-fetched or removed from the cache.\n   * Expects the same shapes as `providesTags`.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"invalidatesTags example\"\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   tagTypes: ['Posts'],\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *       providesTags: (result) =>\n   *         result\n   *           ? [\n   *               ...result.map(({ id }) => ({ type: 'Posts' as const, id })),\n   *               { type: 'Posts', id: 'LIST' },\n   *             ]\n   *           : [{ type: 'Posts', id: 'LIST' }],\n   *     }),\n   *     addPost: build.mutation<Post, Partial<Post>>({\n   *       query(body) {\n   *         return {\n   *           url: `posts`,\n   *           method: 'POST',\n   *           body,\n   *         }\n   *       },\n   *       // highlight-start\n   *       invalidatesTags: [{ type: 'Posts', id: 'LIST' }],\n   *       // highlight-end\n   *     }),\n   *   })\n   * })\n   * ```\n   */\n  invalidatesTags?: ResultDescription<TagTypes, ResultType, QueryArg, BaseQueryError<BaseQuery>, BaseQueryMeta<BaseQuery>>;\n  /**\n   * Not to be used. A mutation should not provide tags to the cache.\n   */\n  providesTags?: never;\n\n  /**\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\n   */\n  Types?: MutationTypes<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n}\nexport type MutationDefinition<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string> = BaseEndpointDefinition<QueryArg, BaseQuery, ResultType> & MutationExtraOptions<TagTypes, ResultType, QueryArg, BaseQuery, ReducerPath>;\nexport type EndpointDefinition<QueryArg, BaseQuery extends BaseQueryFn, TagTypes extends string, ResultType, ReducerPath extends string = string> = QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath> | MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\nexport type EndpointDefinitions = Record<string, EndpointDefinition<any, any, any, any>>;\nexport function isQueryDefinition(e: EndpointDefinition<any, any, any, any>): e is QueryDefinition<any, any, any, any> {\n  return e.type === DefinitionType.query;\n}\nexport function isMutationDefinition(e: EndpointDefinition<any, any, any, any>): e is MutationDefinition<any, any, any, any> {\n  return e.type === DefinitionType.mutation;\n}\nexport type EndpointBuilder<BaseQuery extends BaseQueryFn, TagTypes extends string, ReducerPath extends string> = {\n  /**\n   * An endpoint definition that retrieves data, and may provide tags to the cache.\n   *\n   * @example\n   * ```js\n   * // codeblock-meta title=\"Example of all query endpoint options\"\n   * const api = createApi({\n   *  baseQuery,\n   *  endpoints: (build) => ({\n   *    getPost: build.query({\n   *      query: (id) => ({ url: `post/${id}` }),\n   *      // Pick out data and prevent nested properties in a hook or selector\n   *      transformResponse: (response) => response.data,\n   *      // Pick out error and prevent nested properties in a hook or selector\n   *      transformErrorResponse: (response) => response.error,\n   *      // `result` is the server response\n   *      providesTags: (result, error, id) => [{ type: 'Post', id }],\n   *      // trigger side effects or optimistic updates\n   *      onQueryStarted(id, { dispatch, getState, extra, requestId, queryFulfilled, getCacheEntry, updateCachedData }) {},\n   *      // handle subscriptions etc\n   *      onCacheEntryAdded(id, { dispatch, getState, extra, requestId, cacheEntryRemoved, cacheDataLoaded, getCacheEntry, updateCachedData }) {},\n   *    }),\n   *  }),\n   *});\n   *```\n   */\n  query<ResultType, QueryArg>(definition: OmitFromUnion<QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>, 'type'>): QueryDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n  /**\n   * An endpoint definition that alters data on the server or will possibly invalidate the cache.\n   *\n   * @example\n   * ```js\n   * // codeblock-meta title=\"Example of all mutation endpoint options\"\n   * const api = createApi({\n   *   baseQuery,\n   *   endpoints: (build) => ({\n   *     updatePost: build.mutation({\n   *       query: ({ id, ...patch }) => ({ url: `post/${id}`, method: 'PATCH', body: patch }),\n   *       // Pick out data and prevent nested properties in a hook or selector\n   *       transformResponse: (response) => response.data,\n   *       // Pick out error and prevent nested properties in a hook or selector\n   *       transformErrorResponse: (response) => response.error,\n   *       // `result` is the server response\n   *       invalidatesTags: (result, error, id) => [{ type: 'Post', id }],\n   *      // trigger side effects or optimistic updates\n   *      onQueryStarted(id, { dispatch, getState, extra, requestId, queryFulfilled, getCacheEntry }) {},\n   *      // handle subscriptions etc\n   *      onCacheEntryAdded(id, { dispatch, getState, extra, requestId, cacheEntryRemoved, cacheDataLoaded, getCacheEntry }) {},\n   *     }),\n   *   }),\n   * });\n   * ```\n   */\n  mutation<ResultType, QueryArg>(definition: OmitFromUnion<MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>, 'type'>): MutationDefinition<QueryArg, BaseQuery, TagTypes, ResultType, ReducerPath>;\n};\nexport type AssertTagTypes = <T extends FullTagDescription<string>>(t: T) => T;\nexport function calculateProvidedBy<ResultType, QueryArg, ErrorType, MetaType>(description: ResultDescription<string, ResultType, QueryArg, ErrorType, MetaType> | undefined, result: ResultType | undefined, error: ErrorType | undefined, queryArg: QueryArg, meta: MetaType | undefined, assertTagTypes: AssertTagTypes): readonly FullTagDescription<string>[] {\n  if (isFunction(description)) {\n    return description(result as ResultType, error as undefined, queryArg, meta as MetaType).filter(isNotNullish).map(expandTagDescription).map(assertTagTypes);\n  }\n  if (Array.isArray(description)) {\n    return description.map(expandTagDescription).map(assertTagTypes);\n  }\n  return [];\n}\nfunction isFunction<T>(t: T): t is Extract<T, Function> {\n  return typeof t === 'function';\n}\nexport function expandTagDescription(description: TagDescription<string>): FullTagDescription<string> {\n  return typeof description === 'string' ? {\n    type: description\n  } : description;\n}\nexport type QueryArgFrom<D extends BaseEndpointDefinition<any, any, any>> = D extends BaseEndpointDefinition<infer QA, any, any> ? QA : unknown;\nexport type ResultTypeFrom<D extends BaseEndpointDefinition<any, any, any>> = D extends BaseEndpointDefinition<any, any, infer RT> ? RT : unknown;\nexport type ReducerPathFrom<D extends EndpointDefinition<any, any, any, any, any>> = D extends EndpointDefinition<any, any, any, any, infer RP> ? RP : unknown;\nexport type TagTypesFrom<D extends EndpointDefinition<any, any, any, any>> = D extends EndpointDefinition<any, any, infer RP, any> ? RP : unknown;\nexport type TagTypesFromApi<T> = T extends Api<any, any, any, infer TagTypes> ? TagTypes : never;\nexport type DefinitionsFromApi<T> = T extends Api<any, infer Definitions, any, any> ? Definitions : never;\nexport type TransformedResponse<NewDefinitions extends EndpointDefinitions, K, ResultType> = K extends keyof NewDefinitions ? NewDefinitions[K]['transformResponse'] extends undefined ? ResultType : UnwrapPromise<ReturnType<NonUndefined<NewDefinitions[K]['transformResponse']>>> : ResultType;\nexport type OverrideResultType<Definition, NewResultType> = Definition extends QueryDefinition<infer QueryArg, infer BaseQuery, infer TagTypes, any, infer ReducerPath> ? QueryDefinition<QueryArg, BaseQuery, TagTypes, NewResultType, ReducerPath> : Definition extends MutationDefinition<infer QueryArg, infer BaseQuery, infer TagTypes, any, infer ReducerPath> ? MutationDefinition<QueryArg, BaseQuery, TagTypes, NewResultType, ReducerPath> : never;\nexport type UpdateDefinitions<Definitions extends EndpointDefinitions, NewTagTypes extends string, NewDefinitions extends EndpointDefinitions> = { [K in keyof Definitions]: Definitions[K] extends QueryDefinition<infer QueryArg, infer BaseQuery, any, infer ResultType, infer ReducerPath> ? QueryDefinition<QueryArg, BaseQuery, NewTagTypes, TransformedResponse<NewDefinitions, K, ResultType>, ReducerPath> : Definitions[K] extends MutationDefinition<infer QueryArg, infer BaseQuery, any, infer ResultType, infer ReducerPath> ? MutationDefinition<QueryArg, BaseQuery, NewTagTypes, TransformedResponse<NewDefinitions, K, ResultType>, ReducerPath> : never };","import type { AsyncThunk, AsyncThunkPayloadCreator, Draft, ThunkAction, ThunkDispatch, UnknownAction } from '@reduxjs/toolkit';\nimport type { Patch } from 'immer';\nimport { isDraftable, produceWithPatches } from 'immer';\nimport type { Api, ApiContext } from '../apiTypes';\nimport type { BaseQueryError, BaseQueryFn, QueryReturnValue } from '../baseQueryTypes';\nimport type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs';\nimport type { AssertTagTypes, EndpointDefinition, EndpointDefinitions, MutationDefinition, QueryArgFrom, QueryDefinition, ResultTypeFrom } from '../endpointDefinitions';\nimport { calculateProvidedBy, isQueryDefinition } from '../endpointDefinitions';\nimport { HandledError } from '../HandledError';\nimport type { UnwrapPromise } from '../tsHelpers';\nimport type { QueryKeys, QuerySubstateIdentifier, RootState } from './apiState';\nimport { QueryStatus } from './apiState';\nimport type { QueryActionCreatorResult, StartQueryActionCreatorOptions } from './buildInitiate';\nimport { forceQueryFnSymbol, isUpsertQuery } from './buildInitiate';\nimport type { ApiEndpointQuery, PrefetchOptions } from './module';\nimport { createAsyncThunk, isAllOf, isFulfilled, isPending, isRejected, isRejectedWithValue, SHOULD_AUTOBATCH } from './rtkImports';\nexport type BuildThunksApiEndpointQuery<Definition extends QueryDefinition<any, any, any, any, any>> = Matchers<QueryThunk, Definition>;\nexport type BuildThunksApiEndpointMutation<Definition extends MutationDefinition<any, any, any, any, any>> = Matchers<MutationThunk, Definition>;\ntype EndpointThunk<Thunk extends QueryThunk | MutationThunk, Definition extends EndpointDefinition<any, any, any, any>> = Definition extends EndpointDefinition<infer QueryArg, infer BaseQueryFn, any, infer ResultType> ? Thunk extends AsyncThunk<unknown, infer ATArg, infer ATConfig> ? AsyncThunk<ResultType, ATArg & {\n  originalArgs: QueryArg;\n}, ATConfig & {\n  rejectValue: BaseQueryError<BaseQueryFn>;\n}> : never : never;\nexport type PendingAction<Thunk extends QueryThunk | MutationThunk, Definition extends EndpointDefinition<any, any, any, any>> = ReturnType<EndpointThunk<Thunk, Definition>['pending']>;\nexport type FulfilledAction<Thunk extends QueryThunk | MutationThunk, Definition extends EndpointDefinition<any, any, any, any>> = ReturnType<EndpointThunk<Thunk, Definition>['fulfilled']>;\nexport type RejectedAction<Thunk extends QueryThunk | MutationThunk, Definition extends EndpointDefinition<any, any, any, any>> = ReturnType<EndpointThunk<Thunk, Definition>['rejected']>;\nexport type Matcher<M> = (value: any) => value is M;\nexport interface Matchers<Thunk extends QueryThunk | MutationThunk, Definition extends EndpointDefinition<any, any, any, any>> {\n  matchPending: Matcher<PendingAction<Thunk, Definition>>;\n  matchFulfilled: Matcher<FulfilledAction<Thunk, Definition>>;\n  matchRejected: Matcher<RejectedAction<Thunk, Definition>>;\n}\nexport type QueryThunkArg = QuerySubstateIdentifier & StartQueryActionCreatorOptions & {\n  type: 'query';\n  originalArgs: unknown;\n  endpointName: string;\n};\ntype MutationThunkArg = {\n  type: 'mutation';\n  originalArgs: unknown;\n  endpointName: string;\n  track?: boolean;\n  fixedCacheKey?: string;\n};\nexport type ThunkResult = unknown;\nexport type ThunkApiMetaConfig = {\n  pendingMeta: {\n    startedTimeStamp: number;\n    [SHOULD_AUTOBATCH]: true;\n  };\n  fulfilledMeta: {\n    fulfilledTimeStamp: number;\n    baseQueryMeta: unknown;\n    [SHOULD_AUTOBATCH]: true;\n  };\n  rejectedMeta: {\n    baseQueryMeta: unknown;\n    [SHOULD_AUTOBATCH]: true;\n  };\n};\nexport type QueryThunk = AsyncThunk<ThunkResult, QueryThunkArg, ThunkApiMetaConfig>;\nexport type MutationThunk = AsyncThunk<ThunkResult, MutationThunkArg, ThunkApiMetaConfig>;\nfunction defaultTransformResponse(baseQueryReturnValue: unknown) {\n  return baseQueryReturnValue;\n}\nexport type MaybeDrafted<T> = T | Draft<T>;\nexport type Recipe<T> = (data: MaybeDrafted<T>) => void | MaybeDrafted<T>;\nexport type UpsertRecipe<T> = (data: MaybeDrafted<T> | undefined) => void | MaybeDrafted<T>;\nexport type PatchQueryDataThunk<Definitions extends EndpointDefinitions, PartialState> = <EndpointName extends QueryKeys<Definitions>>(endpointName: EndpointName, arg: QueryArgFrom<Definitions[EndpointName]>, patches: readonly Patch[], updateProvided?: boolean) => ThunkAction<void, PartialState, any, UnknownAction>;\nexport type UpdateQueryDataThunk<Definitions extends EndpointDefinitions, PartialState> = <EndpointName extends QueryKeys<Definitions>>(endpointName: EndpointName, arg: QueryArgFrom<Definitions[EndpointName]>, updateRecipe: Recipe<ResultTypeFrom<Definitions[EndpointName]>>, updateProvided?: boolean) => ThunkAction<PatchCollection, PartialState, any, UnknownAction>;\nexport type UpsertQueryDataThunk<Definitions extends EndpointDefinitions, PartialState> = <EndpointName extends QueryKeys<Definitions>>(endpointName: EndpointName, arg: QueryArgFrom<Definitions[EndpointName]>, value: ResultTypeFrom<Definitions[EndpointName]>) => ThunkAction<QueryActionCreatorResult<Definitions[EndpointName] extends QueryDefinition<any, any, any, any> ? Definitions[EndpointName] : never>, PartialState, any, UnknownAction>;\n\n/**\n * An object returned from dispatching a `api.util.updateQueryData` call.\n */\nexport type PatchCollection = {\n  /**\n   * An `immer` Patch describing the cache update.\n   */\n  patches: Patch[];\n  /**\n   * An `immer` Patch to revert the cache update.\n   */\n  inversePatches: Patch[];\n  /**\n   * A function that will undo the cache update.\n   */\n  undo: () => void;\n};\nexport function buildThunks<BaseQuery extends BaseQueryFn, ReducerPath extends string, Definitions extends EndpointDefinitions>({\n  reducerPath,\n  baseQuery,\n  context: {\n    endpointDefinitions\n  },\n  serializeQueryArgs,\n  api,\n  assertTagType\n}: {\n  baseQuery: BaseQuery;\n  reducerPath: ReducerPath;\n  context: ApiContext<Definitions>;\n  serializeQueryArgs: InternalSerializeQueryArgs;\n  api: Api<BaseQuery, Definitions, ReducerPath, any>;\n  assertTagType: AssertTagTypes;\n}) {\n  type State = RootState<any, string, ReducerPath>;\n  const patchQueryData: PatchQueryDataThunk<EndpointDefinitions, State> = (endpointName, arg, patches, updateProvided) => (dispatch, getState) => {\n    const endpointDefinition = endpointDefinitions[endpointName];\n    const queryCacheKey = serializeQueryArgs({\n      queryArgs: arg,\n      endpointDefinition,\n      endpointName\n    });\n    dispatch(api.internalActions.queryResultPatched({\n      queryCacheKey,\n      patches\n    }));\n    if (!updateProvided) {\n      return;\n    }\n    const newValue = api.endpoints[endpointName].select(arg)(\n    // Work around TS 4.1 mismatch\n    getState() as RootState<any, any, any>);\n    const providedTags = calculateProvidedBy(endpointDefinition.providesTags, newValue.data, undefined, arg, {}, assertTagType);\n    dispatch(api.internalActions.updateProvidedBy({\n      queryCacheKey,\n      providedTags\n    }));\n  };\n  const updateQueryData: UpdateQueryDataThunk<EndpointDefinitions, State> = (endpointName, arg, updateRecipe, updateProvided = true) => (dispatch, getState) => {\n    const endpointDefinition = api.endpoints[endpointName];\n    const currentState = endpointDefinition.select(arg)(\n    // Work around TS 4.1 mismatch\n    getState() as RootState<any, any, any>);\n    const ret: PatchCollection = {\n      patches: [],\n      inversePatches: [],\n      undo: () => dispatch(api.util.patchQueryData(endpointName, arg, ret.inversePatches, updateProvided))\n    };\n    if (currentState.status === QueryStatus.uninitialized) {\n      return ret;\n    }\n    let newValue;\n    if ('data' in currentState) {\n      if (isDraftable(currentState.data)) {\n        const [value, patches, inversePatches] = produceWithPatches(currentState.data, updateRecipe);\n        ret.patches.push(...patches);\n        ret.inversePatches.push(...inversePatches);\n        newValue = value;\n      } else {\n        newValue = updateRecipe(currentState.data);\n        ret.patches.push({\n          op: 'replace',\n          path: [],\n          value: newValue\n        });\n        ret.inversePatches.push({\n          op: 'replace',\n          path: [],\n          value: currentState.data\n        });\n      }\n    }\n    if (ret.patches.length === 0) {\n      return ret;\n    }\n    dispatch(api.util.patchQueryData(endpointName, arg, ret.patches, updateProvided));\n    return ret;\n  };\n  const upsertQueryData: UpsertQueryDataThunk<Definitions, State> = (endpointName, arg, value) => dispatch => {\n    return dispatch((api.endpoints[endpointName] as ApiEndpointQuery<QueryDefinition<any, any, any, any, any>, Definitions>).initiate(arg, {\n      subscribe: false,\n      forceRefetch: true,\n      [forceQueryFnSymbol]: () => ({\n        data: value\n      })\n    }));\n  };\n  const executeEndpoint: AsyncThunkPayloadCreator<ThunkResult, QueryThunkArg | MutationThunkArg, ThunkApiMetaConfig & {\n    state: RootState<any, string, ReducerPath>;\n  }> = async (arg, {\n    signal,\n    abort,\n    rejectWithValue,\n    fulfillWithValue,\n    dispatch,\n    getState,\n    extra\n  }) => {\n    const endpointDefinition = endpointDefinitions[arg.endpointName];\n    try {\n      let transformResponse: (baseQueryReturnValue: any, meta: any, arg: any) => any = defaultTransformResponse;\n      let result: QueryReturnValue;\n      const baseQueryApi = {\n        signal,\n        abort,\n        dispatch,\n        getState,\n        extra,\n        endpoint: arg.endpointName,\n        type: arg.type,\n        forced: arg.type === 'query' ? isForcedQuery(arg, getState()) : undefined,\n        queryCacheKey: arg.type === 'query' ? arg.queryCacheKey : undefined\n      };\n      const forceQueryFn = arg.type === 'query' ? arg[forceQueryFnSymbol] : undefined;\n      if (forceQueryFn) {\n        result = forceQueryFn();\n      } else if (endpointDefinition.query) {\n        result = await baseQuery(endpointDefinition.query(arg.originalArgs), baseQueryApi, endpointDefinition.extraOptions as any);\n        if (endpointDefinition.transformResponse) {\n          transformResponse = endpointDefinition.transformResponse;\n        }\n      } else {\n        result = await endpointDefinition.queryFn(arg.originalArgs, baseQueryApi, endpointDefinition.extraOptions as any, arg => baseQuery(arg, baseQueryApi, endpointDefinition.extraOptions as any));\n      }\n      if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n        const what = endpointDefinition.query ? '`baseQuery`' : '`queryFn`';\n        let err: undefined | string;\n        if (!result) {\n          err = `${what} did not return anything.`;\n        } else if (typeof result !== 'object') {\n          err = `${what} did not return an object.`;\n        } else if (result.error && result.data) {\n          err = `${what} returned an object containing both \\`error\\` and \\`result\\`.`;\n        } else if (result.error === undefined && result.data === undefined) {\n          err = `${what} returned an object containing neither a valid \\`error\\` and \\`result\\`. At least one of them should not be \\`undefined\\``;\n        } else {\n          for (const key of Object.keys(result)) {\n            if (key !== 'error' && key !== 'data' && key !== 'meta') {\n              err = `The object returned by ${what} has the unknown property ${key}.`;\n              break;\n            }\n          }\n        }\n        if (err) {\n          console.error(`Error encountered handling the endpoint ${arg.endpointName}.\n              ${err}\n              It needs to return an object with either the shape \\`{ data: <value> }\\` or \\`{ error: <value> }\\` that may contain an optional \\`meta\\` property.\n              Object returned was:`, result);\n        }\n      }\n      if (result.error) throw new HandledError(result.error, result.meta);\n      return fulfillWithValue(await transformResponse(result.data, result.meta, arg.originalArgs), {\n        fulfilledTimeStamp: Date.now(),\n        baseQueryMeta: result.meta,\n        [SHOULD_AUTOBATCH]: true\n      });\n    } catch (error) {\n      let catchedError = error;\n      if (catchedError instanceof HandledError) {\n        let transformErrorResponse: (baseQueryReturnValue: any, meta: any, arg: any) => any = defaultTransformResponse;\n        if (endpointDefinition.query && endpointDefinition.transformErrorResponse) {\n          transformErrorResponse = endpointDefinition.transformErrorResponse;\n        }\n        try {\n          return rejectWithValue(await transformErrorResponse(catchedError.value, catchedError.meta, arg.originalArgs), {\n            baseQueryMeta: catchedError.meta,\n            [SHOULD_AUTOBATCH]: true\n          });\n        } catch (e) {\n          catchedError = e;\n        }\n      }\n      if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\n        console.error(`An unhandled error occurred processing a request for the endpoint \"${arg.endpointName}\".\nIn the case of an unhandled error, no tags will be \"provided\" or \"invalidated\".`, catchedError);\n      } else {\n        console.error(catchedError);\n      }\n      throw catchedError;\n    }\n  };\n  function isForcedQuery(arg: QueryThunkArg, state: RootState<any, string, ReducerPath>) {\n    const requestState = state[reducerPath]?.queries?.[arg.queryCacheKey];\n    const baseFetchOnMountOrArgChange = state[reducerPath]?.config.refetchOnMountOrArgChange;\n    const fulfilledVal = requestState?.fulfilledTimeStamp;\n    const refetchVal = arg.forceRefetch ?? (arg.subscribe && baseFetchOnMountOrArgChange);\n    if (refetchVal) {\n      // Return if it's true or compare the dates because it must be a number\n      return refetchVal === true || (Number(new Date()) - Number(fulfilledVal)) / 1000 >= refetchVal;\n    }\n    return false;\n  }\n  const queryThunk = createAsyncThunk<ThunkResult, QueryThunkArg, ThunkApiMetaConfig & {\n    state: RootState<any, string, ReducerPath>;\n  }>(`${reducerPath}/executeQuery`, executeEndpoint, {\n    getPendingMeta() {\n      return {\n        startedTimeStamp: Date.now(),\n        [SHOULD_AUTOBATCH]: true\n      };\n    },\n    condition(queryThunkArgs, {\n      getState\n    }) {\n      const state = getState();\n      const requestState = state[reducerPath]?.queries?.[queryThunkArgs.queryCacheKey];\n      const fulfilledVal = requestState?.fulfilledTimeStamp;\n      const currentArg = queryThunkArgs.originalArgs;\n      const previousArg = requestState?.originalArgs;\n      const endpointDefinition = endpointDefinitions[queryThunkArgs.endpointName];\n\n      // Order of these checks matters.\n      // In order for `upsertQueryData` to successfully run while an existing request is in flight,\n      /// we have to check for that first, otherwise `queryThunk` will bail out and not run at all.\n      if (isUpsertQuery(queryThunkArgs)) {\n        return true;\n      }\n\n      // Don't retry a request that's currently in-flight\n      if (requestState?.status === 'pending') {\n        return false;\n      }\n\n      // if this is forced, continue\n      if (isForcedQuery(queryThunkArgs, state)) {\n        return true;\n      }\n      if (isQueryDefinition(endpointDefinition) && endpointDefinition?.forceRefetch?.({\n        currentArg,\n        previousArg,\n        endpointState: requestState,\n        state\n      })) {\n        return true;\n      }\n\n      // Pull from the cache unless we explicitly force refetch or qualify based on time\n      if (fulfilledVal) {\n        // Value is cached and we didn't specify to refresh, skip it.\n        return false;\n      }\n      return true;\n    },\n    dispatchConditionRejection: true\n  });\n  const mutationThunk = createAsyncThunk<ThunkResult, MutationThunkArg, ThunkApiMetaConfig & {\n    state: RootState<any, string, ReducerPath>;\n  }>(`${reducerPath}/executeMutation`, executeEndpoint, {\n    getPendingMeta() {\n      return {\n        startedTimeStamp: Date.now(),\n        [SHOULD_AUTOBATCH]: true\n      };\n    }\n  });\n  const hasTheForce = (options: any): options is {\n    force: boolean;\n  } => 'force' in options;\n  const hasMaxAge = (options: any): options is {\n    ifOlderThan: false | number;\n  } => 'ifOlderThan' in options;\n  const prefetch = <EndpointName extends QueryKeys<Definitions>,>(endpointName: EndpointName, arg: any, options: PrefetchOptions): ThunkAction<void, any, any, UnknownAction> => (dispatch: ThunkDispatch<any, any, any>, getState: () => any) => {\n    const force = hasTheForce(options) && options.force;\n    const maxAge = hasMaxAge(options) && options.ifOlderThan;\n    const queryAction = (force: boolean = true) => {\n      const options = {\n        forceRefetch: force,\n        isPrefetch: true\n      };\n      return (api.endpoints[endpointName] as ApiEndpointQuery<any, any>).initiate(arg, options);\n    };\n    const latestStateValue = (api.endpoints[endpointName] as ApiEndpointQuery<any, any>).select(arg)(getState());\n    if (force) {\n      dispatch(queryAction());\n    } else if (maxAge) {\n      const lastFulfilledTs = latestStateValue?.fulfilledTimeStamp;\n      if (!lastFulfilledTs) {\n        dispatch(queryAction());\n        return;\n      }\n      const shouldRetrigger = (Number(new Date()) - Number(new Date(lastFulfilledTs))) / 1000 >= maxAge;\n      if (shouldRetrigger) {\n        dispatch(queryAction());\n      }\n    } else {\n      // If prefetching with no options, just let it try\n      dispatch(queryAction(false));\n    }\n  };\n  function matchesEndpoint(endpointName: string) {\n    return (action: any): action is UnknownAction => action?.meta?.arg?.endpointName === endpointName;\n  }\n  function buildMatchThunkActions<Thunk extends AsyncThunk<any, QueryThunkArg, ThunkApiMetaConfig> | AsyncThunk<any, MutationThunkArg, ThunkApiMetaConfig>>(thunk: Thunk, endpointName: string) {\n    return {\n      matchPending: isAllOf(isPending(thunk), matchesEndpoint(endpointName)),\n      matchFulfilled: isAllOf(isFulfilled(thunk), matchesEndpoint(endpointName)),\n      matchRejected: isAllOf(isRejected(thunk), matchesEndpoint(endpointName))\n    } as Matchers<Thunk, any>;\n  }\n  return {\n    queryThunk,\n    mutationThunk,\n    prefetch,\n    updateQueryData,\n    upsertQueryData,\n    patchQueryData,\n    buildMatchThunkActions\n  };\n}\nexport function calculateProvidedByThunk(action: UnwrapPromise<ReturnType<ReturnType<QueryThunk>> | ReturnType<ReturnType<MutationThunk>>>, type: 'providesTags' | 'invalidatesTags', endpointDefinitions: EndpointDefinitions, assertTagType: AssertTagTypes) {\n  return calculateProvidedBy(endpointDefinitions[action.meta.arg.endpointName][type], isFulfilled(action) ? action.payload : undefined, isRejectedWithValue(action) ? action.payload : undefined, action.meta.arg.originalArgs, 'baseQueryMeta' in action.meta ? action.meta.baseQueryMeta : undefined, assertTagType);\n}","import { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport type { SerializedError, ThunkAction, UnknownAction } from '@reduxjs/toolkit';\nimport type { Dispatch } from 'redux';\nimport type { SafePromise } from '../../tsHelpers';\nimport { asSafePromise } from '../../tsHelpers';\nimport type { Api, ApiContext } from '../apiTypes';\nimport type { BaseQueryError, QueryReturnValue } from '../baseQueryTypes';\nimport type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs';\nimport type { EndpointDefinitions, MutationDefinition, QueryArgFrom, QueryDefinition, ResultTypeFrom } from '../endpointDefinitions';\nimport { countObjectKeys, getOrInsert, isNotNullish } from '../utils';\nimport type { SubscriptionOptions } from './apiState';\nimport type { QueryResultSelectorResult } from './buildSelectors';\nimport type { MutationThunk, QueryThunk, QueryThunkArg } from './buildThunks';\nimport type { ApiEndpointQuery } from './module';\nexport type BuildInitiateApiEndpointQuery<Definition extends QueryDefinition<any, any, any, any, any>> = {\n  initiate: StartQueryActionCreator<Definition>;\n};\nexport type BuildInitiateApiEndpointMutation<Definition extends MutationDefinition<any, any, any, any, any>> = {\n  initiate: StartMutationActionCreator<Definition>;\n};\nexport const forceQueryFnSymbol = Symbol('forceQueryFn');\nexport const isUpsertQuery = (arg: QueryThunkArg) => typeof arg[forceQueryFnSymbol] === 'function';\nexport type StartQueryActionCreatorOptions = {\n  subscribe?: boolean;\n  forceRefetch?: boolean | number;\n  subscriptionOptions?: SubscriptionOptions;\n  [forceQueryFnSymbol]?: () => QueryReturnValue;\n};\ntype StartQueryActionCreator<D extends QueryDefinition<any, any, any, any, any>> = (arg: QueryArgFrom<D>, options?: StartQueryActionCreatorOptions) => ThunkAction<QueryActionCreatorResult<D>, any, any, UnknownAction>;\nexport type QueryActionCreatorResult<D extends QueryDefinition<any, any, any, any>> = SafePromise<QueryResultSelectorResult<D>> & {\n  arg: QueryArgFrom<D>;\n  requestId: string;\n  subscriptionOptions: SubscriptionOptions | undefined;\n  abort(): void;\n  unwrap(): Promise<ResultTypeFrom<D>>;\n  unsubscribe(): void;\n  refetch(): QueryActionCreatorResult<D>;\n  updateSubscriptionOptions(options: SubscriptionOptions): void;\n  queryCacheKey: string;\n};\ntype StartMutationActionCreator<D extends MutationDefinition<any, any, any, any>> = (arg: QueryArgFrom<D>, options?: {\n  /**\n   * If this mutation should be tracked in the store.\n   * If you just want to manually trigger this mutation using `dispatch` and don't care about the\n   * result, state & potential errors being held in store, you can set this to false.\n   * (defaults to `true`)\n   */\n  track?: boolean;\n  fixedCacheKey?: string;\n}) => ThunkAction<MutationActionCreatorResult<D>, any, any, UnknownAction>;\nexport type MutationActionCreatorResult<D extends MutationDefinition<any, any, any, any>> = SafePromise<{\n  data: ResultTypeFrom<D>;\n  error?: undefined;\n} | {\n  data?: undefined;\n  error: Exclude<BaseQueryError<D extends MutationDefinition<any, infer BaseQuery, any, any> ? BaseQuery : never>, undefined> | SerializedError;\n}> & {\n  /** @internal */\n  arg: {\n    /**\n     * The name of the given endpoint for the mutation\n     */\n    endpointName: string;\n    /**\n     * The original arguments supplied to the mutation call\n     */\n    originalArgs: QueryArgFrom<D>;\n    /**\n     * Whether the mutation is being tracked in the store.\n     */\n    track?: boolean;\n    fixedCacheKey?: string;\n  };\n  /**\n   * A unique string generated for the request sequence\n   */\n  requestId: string;\n\n  /**\n   * A method to cancel the mutation promise. Note that this is not intended to prevent the mutation\n   * that was fired off from reaching the server, but only to assist in handling the response.\n   *\n   * Calling `abort()` prior to the promise resolving will force it to reach the error state with\n   * the serialized error:\n   * `{ name: 'AbortError', message: 'Aborted' }`\n   *\n   * @example\n   * ```ts\n   * const [updateUser] = useUpdateUserMutation();\n   *\n   * useEffect(() => {\n   *   const promise = updateUser(id);\n   *   promise\n   *     .unwrap()\n   *     .catch((err) => {\n   *       if (err.name === 'AbortError') return;\n   *       // else handle the unexpected error\n   *     })\n   *\n   *   return () => {\n   *     promise.abort();\n   *   }\n   * }, [id, updateUser])\n   * ```\n   */\n  abort(): void;\n  /**\n   * Unwraps a mutation call to provide the raw response/error.\n   *\n   * @remarks\n   * If you need to access the error or success payload immediately after a mutation, you can chain .unwrap().\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta title=\"Using .unwrap\"\n   * addPost({ id: 1, name: 'Example' })\n   *   .unwrap()\n   *   .then((payload) => console.log('fulfilled', payload))\n   *   .catch((error) => console.error('rejected', error));\n   * ```\n   *\n   * @example\n   * ```ts\n   * // codeblock-meta title=\"Using .unwrap with async await\"\n   * try {\n   *   const payload = await addPost({ id: 1, name: 'Example' }).unwrap();\n   *   console.log('fulfilled', payload)\n   * } catch (error) {\n   *   console.error('rejected', error);\n   * }\n   * ```\n   */\n  unwrap(): Promise<ResultTypeFrom<D>>;\n  /**\n   * A method to manually unsubscribe from the mutation call, meaning it will be removed from cache after the usual caching grace period.\n   The value returned by the hook will reset to `isUninitialized` afterwards.\n   */\n  reset(): void;\n};\nexport function buildInitiate({\n  serializeQueryArgs,\n  queryThunk,\n  mutationThunk,\n  api,\n  context\n}: {\n  serializeQueryArgs: InternalSerializeQueryArgs;\n  queryThunk: QueryThunk;\n  mutationThunk: MutationThunk;\n  api: Api<any, EndpointDefinitions, any, any>;\n  context: ApiContext<EndpointDefinitions>;\n}) {\n  const runningQueries: Map<Dispatch, Record<string, QueryActionCreatorResult<any> | undefined>> = new Map();\n  const runningMutations: Map<Dispatch, Record<string, MutationActionCreatorResult<any> | undefined>> = new Map();\n  const {\n    unsubscribeQueryResult,\n    removeMutationResult,\n    updateSubscriptionOptions\n  } = api.internalActions;\n  return {\n    buildInitiateQuery,\n    buildInitiateMutation,\n    getRunningQueryThunk,\n    getRunningMutationThunk,\n    getRunningQueriesThunk,\n    getRunningMutationsThunk\n  };\n  function getRunningQueryThunk(endpointName: string, queryArgs: any) {\n    return (dispatch: Dispatch) => {\n      const endpointDefinition = context.endpointDefinitions[endpointName];\n      const queryCacheKey = serializeQueryArgs({\n        queryArgs,\n        endpointDefinition,\n        endpointName\n      });\n      return runningQueries.get(dispatch)?.[queryCacheKey] as QueryActionCreatorResult<never> | undefined;\n    };\n  }\n  function getRunningMutationThunk(\n  /**\n   * this is only here to allow TS to infer the result type by input value\n   * we could use it to validate the result, but it's probably not necessary\n   */\n  _endpointName: string, fixedCacheKeyOrRequestId: string) {\n    return (dispatch: Dispatch) => {\n      return runningMutations.get(dispatch)?.[fixedCacheKeyOrRequestId] as MutationActionCreatorResult<never> | undefined;\n    };\n  }\n  function getRunningQueriesThunk() {\n    return (dispatch: Dispatch) => Object.values(runningQueries.get(dispatch) || {}).filter(isNotNullish);\n  }\n  function getRunningMutationsThunk() {\n    return (dispatch: Dispatch) => Object.values(runningMutations.get(dispatch) || {}).filter(isNotNullish);\n  }\n  function middlewareWarning(dispatch: Dispatch) {\n    if (process.env.NODE_ENV !== 'production') {\n      if ((middlewareWarning as any).triggered) return;\n      const returnedValue = dispatch(api.internalActions.internal_getRTKQSubscriptions());\n      (middlewareWarning as any).triggered = true;\n\n      // The RTKQ middleware should return the internal state object,\n      // but it should _not_ be the action object.\n      if (typeof returnedValue !== 'object' || typeof returnedValue?.type === 'string') {\n        // Otherwise, must not have been added\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(34) : `Warning: Middleware for RTK-Query API at reducerPath \"${api.reducerPath}\" has not been added to the store.\nYou must add the middleware for RTK-Query to function correctly!`);\n      }\n    }\n  }\n  function buildInitiateQuery(endpointName: string, endpointDefinition: QueryDefinition<any, any, any, any>) {\n    const queryAction: StartQueryActionCreator<any> = (arg, {\n      subscribe = true,\n      forceRefetch,\n      subscriptionOptions,\n      [forceQueryFnSymbol]: forceQueryFn,\n      ...rest\n    } = {}) => (dispatch, getState) => {\n      const queryCacheKey = serializeQueryArgs({\n        queryArgs: arg,\n        endpointDefinition,\n        endpointName\n      });\n      const thunk = queryThunk({\n        ...rest,\n        type: 'query',\n        subscribe,\n        forceRefetch: forceRefetch,\n        subscriptionOptions,\n        endpointName,\n        originalArgs: arg,\n        queryCacheKey,\n        [forceQueryFnSymbol]: forceQueryFn\n      });\n      const selector = (api.endpoints[endpointName] as ApiEndpointQuery<any, any>).select(arg);\n      const thunkResult = dispatch(thunk);\n      const stateAfter = selector(getState());\n      middlewareWarning(dispatch);\n      const {\n        requestId,\n        abort\n      } = thunkResult;\n      const skippedSynchronously = stateAfter.requestId !== requestId;\n      const runningQuery = runningQueries.get(dispatch)?.[queryCacheKey];\n      const selectFromState = () => selector(getState());\n      const statePromise: QueryActionCreatorResult<any> = Object.assign((forceQueryFn ?\n      // a query has been forced (upsertQueryData)\n      // -> we want to resolve it once data has been written with the data that will be written\n      thunkResult.then(selectFromState) : skippedSynchronously && !runningQuery ?\n      // a query has been skipped due to a condition and we do not have any currently running query\n      // -> we want to resolve it immediately with the current data\n      Promise.resolve(stateAfter) :\n      // query just started or one is already in flight\n      // -> wait for the running query, then resolve with data from after that\n      Promise.all([runningQuery, thunkResult]).then(selectFromState)) as SafePromise<any>, {\n        arg,\n        requestId,\n        subscriptionOptions,\n        queryCacheKey,\n        abort,\n        async unwrap() {\n          const result = await statePromise;\n          if (result.isError) {\n            throw result.error;\n          }\n          return result.data;\n        },\n        refetch: () => dispatch(queryAction(arg, {\n          subscribe: false,\n          forceRefetch: true\n        })),\n        unsubscribe() {\n          if (subscribe) dispatch(unsubscribeQueryResult({\n            queryCacheKey,\n            requestId\n          }));\n        },\n        updateSubscriptionOptions(options: SubscriptionOptions) {\n          statePromise.subscriptionOptions = options;\n          dispatch(updateSubscriptionOptions({\n            endpointName,\n            requestId,\n            queryCacheKey,\n            options\n          }));\n        }\n      });\n      if (!runningQuery && !skippedSynchronously && !forceQueryFn) {\n        const running = getOrInsert(runningQueries, dispatch, {});\n        running[queryCacheKey] = statePromise;\n        statePromise.then(() => {\n          delete running[queryCacheKey];\n          if (!countObjectKeys(running)) {\n            runningQueries.delete(dispatch);\n          }\n        });\n      }\n      return statePromise;\n    };\n    return queryAction;\n  }\n  function buildInitiateMutation(endpointName: string): StartMutationActionCreator<any> {\n    return (arg, {\n      track = true,\n      fixedCacheKey\n    } = {}) => (dispatch, getState) => {\n      const thunk = mutationThunk({\n        type: 'mutation',\n        endpointName,\n        originalArgs: arg,\n        track,\n        fixedCacheKey\n      });\n      const thunkResult = dispatch(thunk);\n      middlewareWarning(dispatch);\n      const {\n        requestId,\n        abort,\n        unwrap\n      } = thunkResult;\n      const returnValuePromise = asSafePromise(thunkResult.unwrap().then(data => ({\n        data\n      })), error => ({\n        error\n      }));\n      const reset = () => {\n        dispatch(removeMutationResult({\n          requestId,\n          fixedCacheKey\n        }));\n      };\n      const ret = Object.assign(returnValuePromise, {\n        arg: thunkResult.arg,\n        requestId,\n        abort,\n        unwrap,\n        reset\n      });\n      const running = runningMutations.get(dispatch) || {};\n      runningMutations.set(dispatch, running);\n      running[requestId] = ret;\n      ret.then(() => {\n        delete running[requestId];\n        if (!countObjectKeys(running)) {\n          runningMutations.delete(dispatch);\n        }\n      });\n      if (fixedCacheKey) {\n        running[fixedCacheKey] = ret;\n        ret.then(() => {\n          if (running[fixedCacheKey] === ret) {\n            delete running[fixedCacheKey];\n            if (!countObjectKeys(running)) {\n              runningMutations.delete(dispatch);\n            }\n          }\n        });\n      }\n      return ret;\n    };\n  }\n}","import type { Middleware, StoreEnhancer } from 'redux';\nimport type { Tuple } from './utils';\nexport function safeAssign<T extends object>(target: T, ...args: Array<Partial<NoInfer<T>>>) {\n  Object.assign(target, ...args);\n}\n\n/**\n * return True if T is `any`, otherwise return False\n * taken from https://github.com/joonhocho/tsdef\n *\n * @internal\n */\nexport type IsAny<T, True, False = never> =\n// test if we are going the left AND right path in the condition\ntrue | false extends (T extends never ? true : false) ? True : False;\nexport type CastAny<T, CastTo> = IsAny<T, CastTo, T>;\n\n/**\n * return True if T is `unknown`, otherwise return False\n * taken from https://github.com/joonhocho/tsdef\n *\n * @internal\n */\nexport type IsUnknown<T, True, False = never> = unknown extends T ? IsAny<T, False, True> : False;\nexport type FallbackIfUnknown<T, Fallback> = IsUnknown<T, Fallback, T>;\n\n/**\n * @internal\n */\nexport type IfMaybeUndefined<P, True, False> = [undefined] extends [P] ? True : False;\n\n/**\n * @internal\n */\nexport type IfVoid<P, True, False> = [void] extends [P] ? True : False;\n\n/**\n * @internal\n */\nexport type IsEmptyObj<T, True, False = never> = T extends any ? keyof T extends never ? IsUnknown<T, False, IfMaybeUndefined<T, False, IfVoid<T, False, True>>> : False : never;\n\n/**\n * returns True if TS version is above 3.5, False if below.\n * uses feature detection to detect TS version >= 3.5\n * * versions below 3.5 will return `{}` for unresolvable interference\n * * versions above will return `unknown`\n *\n * @internal\n */\nexport type AtLeastTS35<True, False> = [True, False][IsUnknown<ReturnType<<T>() => T>, 0, 1>];\n\n/**\n * @internal\n */\nexport type IsUnknownOrNonInferrable<T, True, False> = AtLeastTS35<IsUnknown<T, True, False>, IsEmptyObj<T, True, IsUnknown<T, True, False>>>;\n\n/**\n * Convert a Union type `(A|B)` to an intersection type `(A&B)`\n */\nexport type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;\n\n// Appears to have a convenient side effect of ignoring `never` even if that's not what you specified\nexport type ExcludeFromTuple<T, E, Acc extends unknown[] = []> = T extends [infer Head, ...infer Tail] ? ExcludeFromTuple<Tail, E, [...Acc, ...([Head] extends [E] ? [] : [Head])]> : Acc;\ntype ExtractDispatchFromMiddlewareTuple<MiddlewareTuple extends readonly any[], Acc extends {}> = MiddlewareTuple extends [infer Head, ...infer Tail] ? ExtractDispatchFromMiddlewareTuple<Tail, Acc & (Head extends Middleware<infer D> ? IsAny<D, {}, D> : {})> : Acc;\nexport type ExtractDispatchExtensions<M> = M extends Tuple<infer MiddlewareTuple> ? ExtractDispatchFromMiddlewareTuple<MiddlewareTuple, {}> : M extends ReadonlyArray<Middleware> ? ExtractDispatchFromMiddlewareTuple<[...M], {}> : never;\ntype ExtractStoreExtensionsFromEnhancerTuple<EnhancerTuple extends readonly any[], Acc extends {}> = EnhancerTuple extends [infer Head, ...infer Tail] ? ExtractStoreExtensionsFromEnhancerTuple<Tail, Acc & (Head extends StoreEnhancer<infer Ext> ? IsAny<Ext, {}, Ext> : {})> : Acc;\nexport type ExtractStoreExtensions<E> = E extends Tuple<infer EnhancerTuple> ? ExtractStoreExtensionsFromEnhancerTuple<EnhancerTuple, {}> : E extends ReadonlyArray<StoreEnhancer> ? UnionToIntersection<E[number] extends StoreEnhancer<infer Ext> ? Ext extends {} ? IsAny<Ext, {}, Ext> : {} : {}> : never;\ntype ExtractStateExtensionsFromEnhancerTuple<EnhancerTuple extends readonly any[], Acc extends {}> = EnhancerTuple extends [infer Head, ...infer Tail] ? ExtractStateExtensionsFromEnhancerTuple<Tail, Acc & (Head extends StoreEnhancer<any, infer StateExt> ? IsAny<StateExt, {}, StateExt> : {})> : Acc;\nexport type ExtractStateExtensions<E> = E extends Tuple<infer EnhancerTuple> ? ExtractStateExtensionsFromEnhancerTuple<EnhancerTuple, {}> : E extends ReadonlyArray<StoreEnhancer> ? UnionToIntersection<E[number] extends StoreEnhancer<any, infer StateExt> ? StateExt extends {} ? IsAny<StateExt, {}, StateExt> : {} : {}> : never;\n\n/**\n * Helper type. Passes T out again, but boxes it in a way that it cannot\n * \"widen\" the type by accident if it is a generic that should be inferred\n * from elsewhere.\n *\n * @internal\n */\nexport type NoInfer<T> = [T][T extends any ? 0 : never];\nexport type NonUndefined<T> = T extends undefined ? never : T;\nexport type WithRequiredProp<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\nexport type WithOptionalProp<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\nexport interface TypeGuard<T> {\n  (value: any): value is T;\n}\nexport interface HasMatchFunction<T> {\n  match: TypeGuard<T>;\n}\nexport const hasMatchFunction = <T,>(v: Matcher<T>): v is HasMatchFunction<T> => {\n  return v && typeof (v as HasMatchFunction<T>).match === 'function';\n};\n\n/** @public */\nexport type Matcher<T> = HasMatchFunction<T> | TypeGuard<T>;\n\n/** @public */\nexport type ActionFromMatcher<M extends Matcher<any>> = M extends Matcher<infer T> ? T : never;\nexport type Id<T> = { [K in keyof T]: T[K] } & {};\nexport type Tail<T extends any[]> = T extends [any, ...infer Tail] ? Tail : never;\nexport type UnknownIfNonSpecific<T> = {} extends T ? unknown : T;\n\n/**\n * A Promise that will never reject.\n * @see https://github.com/reduxjs/redux-toolkit/issues/4101\n */\nexport type SafePromise<T> = Promise<T> & {\n  __linterBrands: 'SafePromise';\n};\n\n/**\n * Properly wraps a Promise as a {@link SafePromise} with .catch(fallback).\n */\nexport function asSafePromise<Resolved, Rejected>(promise: Promise<Resolved>, fallback: (error: unknown) => Rejected) {\n  return promise.catch(fallback) as SafePromise<Resolved | Rejected>;\n}","import type { Action, PayloadAction, UnknownAction } from '@reduxjs/toolkit';\nimport { combineReducers, createAction, createSlice, isAnyOf, isFulfilled, isRejectedWithValue, createNextState, prepareAutoBatched, SHOULD_AUTOBATCH, nanoid } from './rtkImports';\nimport type { QuerySubstateIdentifier, QuerySubState, MutationSubstateIdentifier, MutationSubState, MutationState, QueryState, InvalidationState, Subscribers, QueryCacheKey, SubscriptionState, ConfigState, QueryKeys } from './apiState';\nimport { QueryStatus } from './apiState';\nimport type { MutationThunk, QueryThunk, QueryThunkArg, RejectedAction } from './buildThunks';\nimport { calculateProvidedByThunk } from './buildThunks';\nimport type { AssertTagTypes, DefinitionType, EndpointDefinitions, FullTagDescription, QueryArgFrom, QueryDefinition, ResultTypeFrom } from '../endpointDefinitions';\nimport type { Patch } from 'immer';\nimport { isDraft } from 'immer';\nimport { applyPatches, original } from 'immer';\nimport { onFocus, onFocusLost, onOffline, onOnline } from './setupListeners';\nimport { isDocumentVisible, isOnline, copyWithStructuralSharing } from '../utils';\nimport type { ApiContext } from '../apiTypes';\nimport { isUpsertQuery } from './buildInitiate';\nimport type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs';\n\n/**\n * A typesafe single entry to be upserted into the cache\n */\nexport type NormalizedQueryUpsertEntry<Definitions extends EndpointDefinitions, EndpointName extends QueryKeys<Definitions>> = {\n  endpointName: EndpointName;\n  arg: QueryArgFrom<Definitions[EndpointName]>;\n  value: ResultTypeFrom<Definitions[EndpointName]>;\n};\n\n/**\n * The internal version that is not typesafe since we can't carry the generics through `createSlice`\n */\ntype NormalizedQueryUpsertEntryPayload = {\n  endpointName: string;\n  arg: unknown;\n  value: unknown;\n};\nexport type ProcessedQueryUpsertEntry = {\n  queryDescription: QueryThunkArg;\n  value: unknown;\n};\n\n/**\n * A typesafe representation of a util action creator that accepts cache entry descriptions to upsert\n */\nexport type UpsertEntries<Definitions extends EndpointDefinitions> = (<EndpointNames extends Array<QueryKeys<Definitions>>>(entries: [...{ [I in keyof EndpointNames]: NormalizedQueryUpsertEntry<Definitions, EndpointNames[I]> }]) => PayloadAction<NormalizedQueryUpsertEntryPayload[]>) & {\n  match: (action: unknown) => action is PayloadAction<NormalizedQueryUpsertEntryPayload[]>;\n};\nfunction updateQuerySubstateIfExists(state: QueryState<any>, queryCacheKey: QueryCacheKey, update: (substate: QuerySubState<any>) => void) {\n  const substate = state[queryCacheKey];\n  if (substate) {\n    update(substate);\n  }\n}\nexport function getMutationCacheKey(id: MutationSubstateIdentifier | {\n  requestId: string;\n  arg: {\n    fixedCacheKey?: string | undefined;\n  };\n}): string;\nexport function getMutationCacheKey(id: {\n  fixedCacheKey?: string;\n  requestId?: string;\n}): string | undefined;\nexport function getMutationCacheKey(id: {\n  fixedCacheKey?: string;\n  requestId?: string;\n} | MutationSubstateIdentifier | {\n  requestId: string;\n  arg: {\n    fixedCacheKey?: string | undefined;\n  };\n}): string | undefined {\n  return ('arg' in id ? id.arg.fixedCacheKey : id.fixedCacheKey) ?? id.requestId;\n}\nfunction updateMutationSubstateIfExists(state: MutationState<any>, id: MutationSubstateIdentifier | {\n  requestId: string;\n  arg: {\n    fixedCacheKey?: string | undefined;\n  };\n}, update: (substate: MutationSubState<any>) => void) {\n  const substate = state[getMutationCacheKey(id)];\n  if (substate) {\n    update(substate);\n  }\n}\nconst initialState = {} as any;\nexport function buildSlice({\n  reducerPath,\n  queryThunk,\n  mutationThunk,\n  serializeQueryArgs,\n  context: {\n    endpointDefinitions: definitions,\n    apiUid,\n    extractRehydrationInfo,\n    hasRehydrationInfo\n  },\n  assertTagType,\n  config\n}: {\n  reducerPath: string;\n  queryThunk: QueryThunk;\n  mutationThunk: MutationThunk;\n  serializeQueryArgs: InternalSerializeQueryArgs;\n  context: ApiContext<EndpointDefinitions>;\n  assertTagType: AssertTagTypes;\n  config: Omit<ConfigState<string>, 'online' | 'focused' | 'middlewareRegistered'>;\n}) {\n  const resetApiState = createAction(`${reducerPath}/resetApiState`);\n  function writePendingCacheEntry(draft: QueryState<any>, arg: QueryThunkArg, upserting: boolean, meta: {\n    arg: QueryThunkArg;\n    requestId: string;\n    // requestStatus: 'pending'\n  } & {\n    startedTimeStamp: number;\n  }) {\n    draft[arg.queryCacheKey] ??= {\n      status: QueryStatus.uninitialized,\n      endpointName: arg.endpointName\n    };\n    updateQuerySubstateIfExists(draft, arg.queryCacheKey, substate => {\n      substate.status = QueryStatus.pending;\n      substate.requestId = upserting && substate.requestId ?\n      // for `upsertQuery` **updates**, keep the current `requestId`\n      substate.requestId :\n      // for normal queries or `upsertQuery` **inserts** always update the `requestId`\n      meta.requestId;\n      if (arg.originalArgs !== undefined) {\n        substate.originalArgs = arg.originalArgs;\n      }\n      substate.startedTimeStamp = meta.startedTimeStamp;\n    });\n  }\n  function writeFulfilledCacheEntry(draft: QueryState<any>, meta: {\n    arg: QueryThunkArg;\n    requestId: string;\n    // requestStatus: 'fulfilled'\n  } & {\n    fulfilledTimeStamp: number;\n    baseQueryMeta: unknown;\n    // RTK_autoBatch: true\n  }, payload: unknown, upserting: boolean) {\n    updateQuerySubstateIfExists(draft, meta.arg.queryCacheKey, substate => {\n      if (substate.requestId !== meta.requestId && !upserting) return;\n      const {\n        merge\n      } = definitions[meta.arg.endpointName] as QueryDefinition<any, any, any, any>;\n      substate.status = QueryStatus.fulfilled;\n      if (merge) {\n        if (substate.data !== undefined) {\n          const {\n            fulfilledTimeStamp,\n            arg,\n            baseQueryMeta,\n            requestId\n          } = meta;\n          // There's existing cache data. Let the user merge it in themselves.\n          // We're already inside an Immer-powered reducer, and the user could just mutate `substate.data`\n          // themselves inside of `merge()`. But, they might also want to return a new value.\n          // Try to let Immer figure that part out, save the result, and assign it to `substate.data`.\n          let newData = createNextState(substate.data, draftSubstateData => {\n            // As usual with Immer, you can mutate _or_ return inside here, but not both\n            return merge(draftSubstateData, payload, {\n              arg: arg.originalArgs,\n              baseQueryMeta,\n              fulfilledTimeStamp,\n              requestId\n            });\n          });\n          substate.data = newData;\n        } else {\n          // Presumably a fresh request. Just cache the response data.\n          substate.data = payload;\n        }\n      } else {\n        // Assign or safely update the cache data.\n        substate.data = definitions[meta.arg.endpointName].structuralSharing ?? true ? copyWithStructuralSharing(isDraft(substate.data) ? original(substate.data) : substate.data, payload) : payload;\n      }\n      delete substate.error;\n      substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n    });\n  }\n  const querySlice = createSlice({\n    name: `${reducerPath}/queries`,\n    initialState: initialState as QueryState<any>,\n    reducers: {\n      removeQueryResult: {\n        reducer(draft, {\n          payload: {\n            queryCacheKey\n          }\n        }: PayloadAction<QuerySubstateIdentifier>) {\n          delete draft[queryCacheKey];\n        },\n        prepare: prepareAutoBatched<QuerySubstateIdentifier>()\n      },\n      cacheEntriesUpserted: {\n        reducer(draft, action: PayloadAction<ProcessedQueryUpsertEntry[], string, {\n          RTK_autoBatch: boolean;\n          requestId: string;\n          timestamp: number;\n        }>) {\n          for (const entry of action.payload) {\n            const {\n              queryDescription: arg,\n              value\n            } = entry;\n            writePendingCacheEntry(draft, arg, true, {\n              arg,\n              requestId: action.meta.requestId,\n              startedTimeStamp: action.meta.timestamp\n            });\n            writeFulfilledCacheEntry(draft, {\n              arg,\n              requestId: action.meta.requestId,\n              fulfilledTimeStamp: action.meta.timestamp,\n              baseQueryMeta: {}\n            }, value,\n            // We know we're upserting here\n            true);\n          }\n        },\n        prepare: (payload: NormalizedQueryUpsertEntryPayload[]) => {\n          const queryDescriptions: ProcessedQueryUpsertEntry[] = payload.map(entry => {\n            const {\n              endpointName,\n              arg,\n              value\n            } = entry;\n            const endpointDefinition = definitions[endpointName];\n            const queryDescription: QueryThunkArg = {\n              type: 'query',\n              endpointName: endpointName,\n              originalArgs: entry.arg,\n              queryCacheKey: serializeQueryArgs({\n                queryArgs: arg,\n                endpointDefinition,\n                endpointName\n              })\n            };\n            return {\n              queryDescription,\n              value\n            };\n          });\n          const result = {\n            payload: queryDescriptions,\n            meta: {\n              [SHOULD_AUTOBATCH]: true,\n              requestId: nanoid(),\n              timestamp: Date.now()\n            }\n          };\n          return result;\n        }\n      },\n      queryResultPatched: {\n        reducer(draft, {\n          payload: {\n            queryCacheKey,\n            patches\n          }\n        }: PayloadAction<QuerySubstateIdentifier & {\n          patches: readonly Patch[];\n        }>) {\n          updateQuerySubstateIfExists(draft, queryCacheKey, substate => {\n            substate.data = applyPatches(substate.data as any, patches.concat());\n          });\n        },\n        prepare: prepareAutoBatched<QuerySubstateIdentifier & {\n          patches: readonly Patch[];\n        }>()\n      }\n    },\n    extraReducers(builder) {\n      builder.addCase(queryThunk.pending, (draft, {\n        meta,\n        meta: {\n          arg\n        }\n      }) => {\n        const upserting = isUpsertQuery(arg);\n        writePendingCacheEntry(draft, arg, upserting, meta);\n      }).addCase(queryThunk.fulfilled, (draft, {\n        meta,\n        payload\n      }) => {\n        const upserting = isUpsertQuery(meta.arg);\n        writeFulfilledCacheEntry(draft, meta, payload, upserting);\n      }).addCase(queryThunk.rejected, (draft, {\n        meta: {\n          condition,\n          arg,\n          requestId\n        },\n        error,\n        payload\n      }) => {\n        updateQuerySubstateIfExists(draft, arg.queryCacheKey, substate => {\n          if (condition) {\n            // request was aborted due to condition (another query already running)\n          } else {\n            // request failed\n            if (substate.requestId !== requestId) return;\n            substate.status = QueryStatus.rejected;\n            substate.error = (payload ?? error) as any;\n          }\n        });\n      }).addMatcher(hasRehydrationInfo, (draft, action) => {\n        const {\n          queries\n        } = extractRehydrationInfo(action)!;\n        for (const [key, entry] of Object.entries(queries)) {\n          if (\n          // do not rehydrate entries that were currently in flight.\n          entry?.status === QueryStatus.fulfilled || entry?.status === QueryStatus.rejected) {\n            draft[key] = entry;\n          }\n        }\n      });\n    }\n  });\n  const mutationSlice = createSlice({\n    name: `${reducerPath}/mutations`,\n    initialState: initialState as MutationState<any>,\n    reducers: {\n      removeMutationResult: {\n        reducer(draft, {\n          payload\n        }: PayloadAction<MutationSubstateIdentifier>) {\n          const cacheKey = getMutationCacheKey(payload);\n          if (cacheKey in draft) {\n            delete draft[cacheKey];\n          }\n        },\n        prepare: prepareAutoBatched<MutationSubstateIdentifier>()\n      }\n    },\n    extraReducers(builder) {\n      builder.addCase(mutationThunk.pending, (draft, {\n        meta,\n        meta: {\n          requestId,\n          arg,\n          startedTimeStamp\n        }\n      }) => {\n        if (!arg.track) return;\n        draft[getMutationCacheKey(meta)] = {\n          requestId,\n          status: QueryStatus.pending,\n          endpointName: arg.endpointName,\n          startedTimeStamp\n        };\n      }).addCase(mutationThunk.fulfilled, (draft, {\n        payload,\n        meta\n      }) => {\n        if (!meta.arg.track) return;\n        updateMutationSubstateIfExists(draft, meta, substate => {\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = QueryStatus.fulfilled;\n          substate.data = payload;\n          substate.fulfilledTimeStamp = meta.fulfilledTimeStamp;\n        });\n      }).addCase(mutationThunk.rejected, (draft, {\n        payload,\n        error,\n        meta\n      }) => {\n        if (!meta.arg.track) return;\n        updateMutationSubstateIfExists(draft, meta, substate => {\n          if (substate.requestId !== meta.requestId) return;\n          substate.status = QueryStatus.rejected;\n          substate.error = (payload ?? error) as any;\n        });\n      }).addMatcher(hasRehydrationInfo, (draft, action) => {\n        const {\n          mutations\n        } = extractRehydrationInfo(action)!;\n        for (const [key, entry] of Object.entries(mutations)) {\n          if (\n          // do not rehydrate entries that were currently in flight.\n          (entry?.status === QueryStatus.fulfilled || entry?.status === QueryStatus.rejected) &&\n          // only rehydrate endpoints that were persisted using a `fixedCacheKey`\n          key !== entry?.requestId) {\n            draft[key] = entry;\n          }\n        }\n      });\n    }\n  });\n  const invalidationSlice = createSlice({\n    name: `${reducerPath}/invalidation`,\n    initialState: initialState as InvalidationState<string>,\n    reducers: {\n      updateProvidedBy: {\n        reducer(draft, action: PayloadAction<{\n          queryCacheKey: QueryCacheKey;\n          providedTags: readonly FullTagDescription<string>[];\n        }>) {\n          const {\n            queryCacheKey,\n            providedTags\n          } = action.payload;\n          for (const tagTypeSubscriptions of Object.values(draft)) {\n            for (const idSubscriptions of Object.values(tagTypeSubscriptions)) {\n              const foundAt = idSubscriptions.indexOf(queryCacheKey);\n              if (foundAt !== -1) {\n                idSubscriptions.splice(foundAt, 1);\n              }\n            }\n          }\n          for (const {\n            type,\n            id\n          } of providedTags) {\n            const subscribedQueries = (draft[type] ??= {})[id || '__internal_without_id'] ??= [];\n            const alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n            if (!alreadySubscribed) {\n              subscribedQueries.push(queryCacheKey);\n            }\n          }\n        },\n        prepare: prepareAutoBatched<{\n          queryCacheKey: QueryCacheKey;\n          providedTags: readonly FullTagDescription<string>[];\n        }>()\n      }\n    },\n    extraReducers(builder) {\n      builder.addCase(querySlice.actions.removeQueryResult, (draft, {\n        payload: {\n          queryCacheKey\n        }\n      }) => {\n        for (const tagTypeSubscriptions of Object.values(draft)) {\n          for (const idSubscriptions of Object.values(tagTypeSubscriptions)) {\n            const foundAt = idSubscriptions.indexOf(queryCacheKey);\n            if (foundAt !== -1) {\n              idSubscriptions.splice(foundAt, 1);\n            }\n          }\n        }\n      }).addMatcher(hasRehydrationInfo, (draft, action) => {\n        const {\n          provided\n        } = extractRehydrationInfo(action)!;\n        for (const [type, incomingTags] of Object.entries(provided)) {\n          for (const [id, cacheKeys] of Object.entries(incomingTags)) {\n            const subscribedQueries = (draft[type] ??= {})[id || '__internal_without_id'] ??= [];\n            for (const queryCacheKey of cacheKeys) {\n              const alreadySubscribed = subscribedQueries.includes(queryCacheKey);\n              if (!alreadySubscribed) {\n                subscribedQueries.push(queryCacheKey);\n              }\n            }\n          }\n        }\n      }).addMatcher(isAnyOf(isFulfilled(queryThunk), isRejectedWithValue(queryThunk)), (draft, action) => {\n        const providedTags = calculateProvidedByThunk(action, 'providesTags', definitions, assertTagType);\n        const {\n          queryCacheKey\n        } = action.meta.arg;\n        invalidationSlice.caseReducers.updateProvidedBy(draft, invalidationSlice.actions.updateProvidedBy({\n          queryCacheKey,\n          providedTags\n        }));\n      });\n    }\n  });\n\n  // Dummy slice to generate actions\n  const subscriptionSlice = createSlice({\n    name: `${reducerPath}/subscriptions`,\n    initialState: initialState as SubscriptionState,\n    reducers: {\n      updateSubscriptionOptions(d, a: PayloadAction<{\n        endpointName: string;\n        requestId: string;\n        options: Subscribers[number];\n      } & QuerySubstateIdentifier>) {\n        // Dummy\n      },\n      unsubscribeQueryResult(d, a: PayloadAction<{\n        requestId: string;\n      } & QuerySubstateIdentifier>) {\n        // Dummy\n      },\n      internal_getRTKQSubscriptions() {}\n    }\n  });\n  const internalSubscriptionsSlice = createSlice({\n    name: `${reducerPath}/internalSubscriptions`,\n    initialState: initialState as SubscriptionState,\n    reducers: {\n      subscriptionsUpdated: {\n        reducer(state, action: PayloadAction<Patch[]>) {\n          return applyPatches(state, action.payload);\n        },\n        prepare: prepareAutoBatched<Patch[]>()\n      }\n    }\n  });\n  const configSlice = createSlice({\n    name: `${reducerPath}/config`,\n    initialState: {\n      online: isOnline(),\n      focused: isDocumentVisible(),\n      middlewareRegistered: false,\n      ...config\n    } as ConfigState<string>,\n    reducers: {\n      middlewareRegistered(state, {\n        payload\n      }: PayloadAction<string>) {\n        state.middlewareRegistered = state.middlewareRegistered === 'conflict' || apiUid !== payload ? 'conflict' : true;\n      }\n    },\n    extraReducers: builder => {\n      builder.addCase(onOnline, state => {\n        state.online = true;\n      }).addCase(onOffline, state => {\n        state.online = false;\n      }).addCase(onFocus, state => {\n        state.focused = true;\n      }).addCase(onFocusLost, state => {\n        state.focused = false;\n      })\n      // update the state to be a new object to be picked up as a \"state change\"\n      // by redux-persist's `autoMergeLevel2`\n      .addMatcher(hasRehydrationInfo, draft => ({\n        ...draft\n      }));\n    }\n  });\n  const combinedReducer = combineReducers({\n    queries: querySlice.reducer,\n    mutations: mutationSlice.reducer,\n    provided: invalidationSlice.reducer,\n    subscriptions: internalSubscriptionsSlice.reducer,\n    config: configSlice.reducer\n  });\n  const reducer: typeof combinedReducer = (state, action) => combinedReducer(resetApiState.match(action) ? undefined : state, action);\n  const actions = {\n    ...configSlice.actions,\n    ...querySlice.actions,\n    ...subscriptionSlice.actions,\n    ...internalSubscriptionsSlice.actions,\n    ...mutationSlice.actions,\n    ...invalidationSlice.actions,\n    resetApiState\n  };\n  return {\n    reducer,\n    actions\n  };\n}\nexport type SliceActions = ReturnType<typeof buildSlice>['actions'];","import type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs';\nimport type { EndpointDefinitions, MutationDefinition, QueryArgFrom, QueryDefinition, ReducerPathFrom, TagDescription, TagTypesFrom } from '../endpointDefinitions';\nimport { expandTagDescription } from '../endpointDefinitions';\nimport { flatten, isNotNullish } from '../utils';\nimport type { MutationSubState, QueryCacheKey, QueryKeys, QueryState, QuerySubState, RequestStatusFlags, RootState as _RootState } from './apiState';\nimport { QueryStatus, getRequestStatusFlags } from './apiState';\nimport { getMutationCacheKey } from './buildSlice';\nimport type { createSelector as _createSelector } from './rtkImports';\nimport { createNextState } from './rtkImports';\nexport type SkipToken = typeof skipToken;\n/**\n * Can be passed into `useQuery`, `useQueryState` or `useQuerySubscription`\n * instead of the query argument to get the same effect as if setting\n * `skip: true` in the query options.\n *\n * Useful for scenarios where a query should be skipped when `arg` is `undefined`\n * and TypeScript complains about it because `arg` is not allowed to be passed\n * in as `undefined`, such as\n *\n * ```ts\n * // codeblock-meta title=\"will error if the query argument is not allowed to be undefined\" no-transpile\n * useSomeQuery(arg, { skip: !!arg })\n * ```\n *\n * ```ts\n * // codeblock-meta title=\"using skipToken instead\" no-transpile\n * useSomeQuery(arg ?? skipToken)\n * ```\n *\n * If passed directly into a query or mutation selector, that selector will always\n * return an uninitialized state.\n */\nexport const skipToken = /* @__PURE__ */Symbol.for('RTKQ/skipToken');\nexport type BuildSelectorsApiEndpointQuery<Definition extends QueryDefinition<any, any, any, any, any>, Definitions extends EndpointDefinitions> = {\n  select: QueryResultSelectorFactory<Definition, _RootState<Definitions, TagTypesFrom<Definition>, ReducerPathFrom<Definition>>>;\n};\nexport type BuildSelectorsApiEndpointMutation<Definition extends MutationDefinition<any, any, any, any, any>, Definitions extends EndpointDefinitions> = {\n  select: MutationResultSelectorFactory<Definition, _RootState<Definitions, TagTypesFrom<Definition>, ReducerPathFrom<Definition>>>;\n};\ntype QueryResultSelectorFactory<Definition extends QueryDefinition<any, any, any, any>, RootState> = (queryArg: QueryArgFrom<Definition> | SkipToken) => (state: RootState) => QueryResultSelectorResult<Definition>;\nexport type QueryResultSelectorResult<Definition extends QueryDefinition<any, any, any, any>> = QuerySubState<Definition> & RequestStatusFlags;\ntype MutationResultSelectorFactory<Definition extends MutationDefinition<any, any, any, any>, RootState> = (requestId: string | {\n  requestId: string | undefined;\n  fixedCacheKey: string | undefined;\n} | SkipToken) => (state: RootState) => MutationResultSelectorResult<Definition>;\nexport type MutationResultSelectorResult<Definition extends MutationDefinition<any, any, any, any>> = MutationSubState<Definition> & RequestStatusFlags;\nconst initialSubState: QuerySubState<any> = {\n  status: QueryStatus.uninitialized as const\n};\n\n// abuse immer to freeze default states\nconst defaultQuerySubState = /* @__PURE__ */createNextState(initialSubState, () => {});\nconst defaultMutationSubState = /* @__PURE__ */createNextState(initialSubState as MutationSubState<any>, () => {});\nexport function buildSelectors<Definitions extends EndpointDefinitions, ReducerPath extends string>({\n  serializeQueryArgs,\n  reducerPath,\n  createSelector\n}: {\n  serializeQueryArgs: InternalSerializeQueryArgs;\n  reducerPath: ReducerPath;\n  createSelector: typeof _createSelector;\n}) {\n  type RootState = _RootState<Definitions, string, string>;\n  const selectSkippedQuery = (state: RootState) => defaultQuerySubState;\n  const selectSkippedMutation = (state: RootState) => defaultMutationSubState;\n  return {\n    buildQuerySelector,\n    buildMutationSelector,\n    selectInvalidatedBy,\n    selectCachedArgsForQuery\n  };\n  function withRequestFlags<T extends {\n    status: QueryStatus;\n  }>(substate: T): T & RequestStatusFlags {\n    return {\n      ...substate,\n      ...getRequestStatusFlags(substate.status)\n    };\n  }\n  function selectInternalState(rootState: RootState) {\n    const state = rootState[reducerPath];\n    if (process.env.NODE_ENV !== 'production') {\n      if (!state) {\n        if ((selectInternalState as any).triggered) return state;\n        (selectInternalState as any).triggered = true;\n        console.error(`Error: No data found at \\`state.${reducerPath}\\`. Did you forget to add the reducer to the store?`);\n      }\n    }\n    return state;\n  }\n  function buildQuerySelector(endpointName: string, endpointDefinition: QueryDefinition<any, any, any, any>) {\n    return ((queryArgs: any) => {\n      if (queryArgs === skipToken) {\n        return createSelector(selectSkippedQuery, withRequestFlags);\n      }\n      const serializedArgs = serializeQueryArgs({\n        queryArgs,\n        endpointDefinition,\n        endpointName\n      });\n      const selectQuerySubstate = (state: RootState) => selectInternalState(state)?.queries?.[serializedArgs] ?? defaultQuerySubState;\n      return createSelector(selectQuerySubstate, withRequestFlags);\n    }) as QueryResultSelectorFactory<any, RootState>;\n  }\n  function buildMutationSelector() {\n    return (id => {\n      let mutationId: string | typeof skipToken;\n      if (typeof id === 'object') {\n        mutationId = getMutationCacheKey(id) ?? skipToken;\n      } else {\n        mutationId = id;\n      }\n      const selectMutationSubstate = (state: RootState) => selectInternalState(state)?.mutations?.[mutationId as string] ?? defaultMutationSubState;\n      const finalSelectMutationSubstate = mutationId === skipToken ? selectSkippedMutation : selectMutationSubstate;\n      return createSelector(finalSelectMutationSubstate, withRequestFlags);\n    }) as MutationResultSelectorFactory<any, RootState>;\n  }\n  function selectInvalidatedBy(state: RootState, tags: ReadonlyArray<TagDescription<string> | null | undefined>): Array<{\n    endpointName: string;\n    originalArgs: any;\n    queryCacheKey: QueryCacheKey;\n  }> {\n    const apiState = state[reducerPath];\n    const toInvalidate = new Set<QueryCacheKey>();\n    for (const tag of tags.filter(isNotNullish).map(expandTagDescription)) {\n      const provided = apiState.provided[tag.type];\n      if (!provided) {\n        continue;\n      }\n      let invalidateSubscriptions = (tag.id !== undefined ?\n      // id given: invalidate all queries that provide this type & id\n      provided[tag.id] :\n      // no id: invalidate all queries that provide this type\n      flatten(Object.values(provided))) ?? [];\n      for (const invalidate of invalidateSubscriptions) {\n        toInvalidate.add(invalidate);\n      }\n    }\n    return flatten(Array.from(toInvalidate.values()).map(queryCacheKey => {\n      const querySubState = apiState.queries[queryCacheKey];\n      return querySubState ? [{\n        queryCacheKey,\n        endpointName: querySubState.endpointName!,\n        originalArgs: querySubState.originalArgs\n      }] : [];\n    }));\n  }\n  function selectCachedArgsForQuery<QueryName extends QueryKeys<Definitions>>(state: RootState, queryName: QueryName): Array<QueryArgFrom<Definitions[QueryName]>> {\n    return Object.values(state[reducerPath].queries as QueryState<any>).filter((entry): entry is Exclude<QuerySubState<Definitions[QueryName]>, {\n      status: QueryStatus.uninitialized;\n    }> => entry?.endpointName === queryName && entry.status !== QueryStatus.uninitialized).map(entry => entry.originalArgs);\n  }\n}","import { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport type { Api, ApiContext, Module, ModuleName } from './apiTypes';\nimport type { CombinedState } from './core/apiState';\nimport type { BaseQueryArg, BaseQueryFn } from './baseQueryTypes';\nimport type { SerializeQueryArgs } from './defaultSerializeQueryArgs';\nimport { defaultSerializeQueryArgs } from './defaultSerializeQueryArgs';\nimport type { EndpointBuilder, EndpointDefinitions } from './endpointDefinitions';\nimport { DefinitionType, isQueryDefinition } from './endpointDefinitions';\nimport { nanoid } from './core/rtkImports';\nimport type { UnknownAction } from '@reduxjs/toolkit';\nimport type { NoInfer } from './tsHelpers';\nimport { weakMapMemoize } from 'reselect';\nexport interface CreateApiOptions<BaseQuery extends BaseQueryFn, Definitions extends EndpointDefinitions, ReducerPath extends string = 'api', TagTypes extends string = never> {\n  /**\n   * The base query used by each endpoint if no `queryFn` option is specified. RTK Query exports a utility called [fetchBaseQuery](./fetchBaseQuery) as a lightweight wrapper around `fetch` for common use-cases. See [Customizing Queries](../../rtk-query/usage/customizing-queries) if `fetchBaseQuery` does not handle your requirements.\n   *\n   * @example\n   *\n   * ```ts\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n   *\n   * const api = createApi({\n   *   // highlight-start\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   // highlight-end\n   *   endpoints: (build) => ({\n   *     // ...endpoints\n   *   }),\n   * })\n   * ```\n   */\n  baseQuery: BaseQuery;\n  /**\n   * An array of string tag type names. Specifying tag types is optional, but you should define them so that they can be used for caching and invalidation. When defining a tag type, you will be able to [provide](../../rtk-query/usage/automated-refetching#providing-tags) them with `providesTags` and [invalidate](../../rtk-query/usage/automated-refetching#invalidating-tags) them with `invalidatesTags` when configuring [endpoints](#endpoints).\n   *\n   * @example\n   *\n   * ```ts\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   // highlight-start\n   *   tagTypes: ['Post', 'User'],\n   *   // highlight-end\n   *   endpoints: (build) => ({\n   *     // ...endpoints\n   *   }),\n   * })\n   * ```\n   */\n  tagTypes?: readonly TagTypes[];\n  /**\n   * The `reducerPath` is a _unique_ key that your service will be mounted to in your store. If you call `createApi` more than once in your application, you will need to provide a unique value each time. Defaults to `'api'`.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"apis.js\"\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query';\n   *\n   * const apiOne = createApi({\n   *   // highlight-start\n   *   reducerPath: 'apiOne',\n   *   // highlight-end\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (builder) => ({\n   *     // ...endpoints\n   *   }),\n   * });\n   *\n   * const apiTwo = createApi({\n   *   // highlight-start\n   *   reducerPath: 'apiTwo',\n   *   // highlight-end\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (builder) => ({\n   *     // ...endpoints\n   *   }),\n   * });\n   * ```\n   */\n  reducerPath?: ReducerPath;\n  /**\n   * Accepts a custom function if you have a need to change the creation of cache keys for any reason.\n   */\n  serializeQueryArgs?: SerializeQueryArgs<unknown>;\n  /**\n   * Endpoints are just a set of operations that you want to perform against your server. You define them as an object using the builder syntax. There are two basic endpoint types: [`query`](../../rtk-query/usage/queries) and [`mutation`](../../rtk-query/usage/mutations).\n   */\n  endpoints(build: EndpointBuilder<BaseQuery, TagTypes, ReducerPath>): Definitions;\n  /**\n   * Defaults to `60` _(this value is in seconds)_. This is how long RTK Query will keep your data cached for **after** the last component unsubscribes. For example, if you query an endpoint, then unmount the component, then mount another component that makes the same request within the given time frame, the most recent value will be served from the cache.\n   *\n   * ```ts\n   * // codeblock-meta title=\"keepUnusedDataFor example\"\n   *\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * interface Post {\n   *   id: number\n   *   name: string\n   * }\n   * type PostsResponse = Post[]\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   endpoints: (build) => ({\n   *     getPosts: build.query<PostsResponse, void>({\n   *       query: () => 'posts',\n   *       // highlight-start\n   *       keepUnusedDataFor: 5\n   *       // highlight-end\n   *     })\n   *   })\n   * })\n   * ```\n   */\n  keepUnusedDataFor?: number;\n  /**\n   * Defaults to `false`. This setting allows you to control whether if a cached result is already available RTK Query will only serve a cached result, or if it should `refetch` when set to `true` or if an adequate amount of time has passed since the last successful query result.\n   * - `false` - Will not cause a query to be performed _unless_ it does not exist yet.\n   * - `true` - Will always refetch when a new subscriber to a query is added. Behaves the same as calling the `refetch` callback or passing `forceRefetch: true` in the action creator.\n   * - `number` - **Value is in seconds**. If a number is provided and there is an existing query in the cache, it will compare the current time vs the last fulfilled timestamp, and only refetch if enough time has elapsed.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   */\n  refetchOnMountOrArgChange?: boolean | number;\n  /**\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after the application window regains focus.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   *\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\n   */\n  refetchOnFocus?: boolean;\n  /**\n   * Defaults to `false`. This setting allows you to control whether RTK Query will try to refetch all subscribed queries after regaining a network connection.\n   *\n   * If you specify this option alongside `skip: true`, this **will not be evaluated** until `skip` is false.\n   *\n   * Note: requires [`setupListeners`](./setupListeners) to have been called.\n   */\n  refetchOnReconnect?: boolean;\n  /**\n   * Defaults to `'delayed'`. This setting allows you to control when tags are invalidated after a mutation.\n   *\n   * - `'immediately'`: Queries are invalidated instantly after the mutation finished, even if they are running.\n   *   If the query provides tags that were invalidated while it ran, it won't be re-fetched.\n   * - `'delayed'`: Invalidation only happens after all queries and mutations are settled.\n   *   This ensures that queries are always invalidated correctly and automatically \"batches\" invalidations of concurrent mutations.\n   *   Note that if you constantly have some queries (or mutations) running, this can delay tag invalidations indefinitely.\n   */\n  invalidationBehavior?: 'delayed' | 'immediately';\n  /**\n   * A function that is passed every dispatched action. If this returns something other than `undefined`,\n   * that return value will be used to rehydrate fulfilled & errored queries.\n   *\n   * @example\n   *\n   * ```ts\n   * // codeblock-meta title=\"next-redux-wrapper rehydration example\"\n   * import type { Action, PayloadAction } from '@reduxjs/toolkit'\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n   * import { HYDRATE } from 'next-redux-wrapper'\n   *\n   * type RootState = any; // normally inferred from state\n   *\n   * function isHydrateAction(action: Action): action is PayloadAction<RootState> {\n   *   return action.type === HYDRATE\n   * }\n   *\n   * export const api = createApi({\n   *   baseQuery: fetchBaseQuery({ baseUrl: '/' }),\n   *   // highlight-start\n   *   extractRehydrationInfo(action, { reducerPath }): any {\n   *     if (isHydrateAction(action)) {\n   *       return action.payload[reducerPath]\n   *     }\n   *   },\n   *   // highlight-end\n   *   endpoints: (build) => ({\n   *     // omitted\n   *   }),\n   * })\n   * ```\n   */\n  extractRehydrationInfo?: (action: UnknownAction, {\n    reducerPath\n  }: {\n    reducerPath: ReducerPath;\n  }) => undefined | CombinedState<NoInfer<Definitions>, NoInfer<TagTypes>, NoInfer<ReducerPath>>;\n}\nexport type CreateApi<Modules extends ModuleName> = {\n  /**\n   * Creates a service to use in your application. Contains only the basic redux logic (the core module).\n   *\n   * @link https://rtk-query-docs.netlify.app/api/createApi\n   */\n  <BaseQuery extends BaseQueryFn, Definitions extends EndpointDefinitions, ReducerPath extends string = 'api', TagTypes extends string = never>(options: CreateApiOptions<BaseQuery, Definitions, ReducerPath, TagTypes>): Api<BaseQuery, Definitions, ReducerPath, TagTypes, Modules>;\n};\n\n/**\n * Builds a `createApi` method based on the provided `modules`.\n *\n * @link https://rtk-query-docs.netlify.app/concepts/customizing-create-api\n *\n * @example\n * ```ts\n * const MyContext = React.createContext<ReactReduxContextValue | null>(null);\n * const customCreateApi = buildCreateApi(\n *   coreModule(),\n *   reactHooksModule({\n *     hooks: {\n *       useDispatch: createDispatchHook(MyContext),\n *       useSelector: createSelectorHook(MyContext),\n *       useStore: createStoreHook(MyContext)\n *     }\n *   })\n * );\n * ```\n *\n * @param modules - A variable number of modules that customize how the `createApi` method handles endpoints\n * @returns A `createApi` method using the provided `modules`.\n */\nexport function buildCreateApi<Modules extends [Module<any>, ...Module<any>[]]>(...modules: Modules): CreateApi<Modules[number]['name']> {\n  return function baseCreateApi(options) {\n    const extractRehydrationInfo = weakMapMemoize((action: UnknownAction) => options.extractRehydrationInfo?.(action, {\n      reducerPath: (options.reducerPath ?? 'api') as any\n    }));\n    const optionsWithDefaults: CreateApiOptions<any, any, any, any> = {\n      reducerPath: 'api',\n      keepUnusedDataFor: 60,\n      refetchOnMountOrArgChange: false,\n      refetchOnFocus: false,\n      refetchOnReconnect: false,\n      invalidationBehavior: 'delayed',\n      ...options,\n      extractRehydrationInfo,\n      serializeQueryArgs(queryArgsApi) {\n        let finalSerializeQueryArgs = defaultSerializeQueryArgs;\n        if ('serializeQueryArgs' in queryArgsApi.endpointDefinition) {\n          const endpointSQA = queryArgsApi.endpointDefinition.serializeQueryArgs!;\n          finalSerializeQueryArgs = queryArgsApi => {\n            const initialResult = endpointSQA(queryArgsApi);\n            if (typeof initialResult === 'string') {\n              // If the user function returned a string, use it as-is\n              return initialResult;\n            } else {\n              // Assume they returned an object (such as a subset of the original\n              // query args) or a primitive, and serialize it ourselves\n              return defaultSerializeQueryArgs({\n                ...queryArgsApi,\n                queryArgs: initialResult\n              });\n            }\n          };\n        } else if (options.serializeQueryArgs) {\n          finalSerializeQueryArgs = options.serializeQueryArgs;\n        }\n        return finalSerializeQueryArgs(queryArgsApi);\n      },\n      tagTypes: [...(options.tagTypes || [])]\n    };\n    const context: ApiContext<EndpointDefinitions> = {\n      endpointDefinitions: {},\n      batch(fn) {\n        // placeholder \"batch\" method to be overridden by plugins, for example with React.unstable_batchedUpdate\n        fn();\n      },\n      apiUid: nanoid(),\n      extractRehydrationInfo,\n      hasRehydrationInfo: weakMapMemoize(action => extractRehydrationInfo(action) != null)\n    };\n    const api = {\n      injectEndpoints,\n      enhanceEndpoints({\n        addTagTypes,\n        endpoints\n      }) {\n        if (addTagTypes) {\n          for (const eT of addTagTypes) {\n            if (!optionsWithDefaults.tagTypes!.includes(eT as any)) {\n              ;\n              (optionsWithDefaults.tagTypes as any[]).push(eT);\n            }\n          }\n        }\n        if (endpoints) {\n          for (const [endpointName, partialDefinition] of Object.entries(endpoints)) {\n            if (typeof partialDefinition === 'function') {\n              partialDefinition(context.endpointDefinitions[endpointName]);\n            } else {\n              Object.assign(context.endpointDefinitions[endpointName] || {}, partialDefinition);\n            }\n          }\n        }\n        return api;\n      }\n    } as Api<BaseQueryFn, {}, string, string, Modules[number]['name']>;\n    const initializedModules = modules.map(m => m.init(api as any, optionsWithDefaults as any, context));\n    function injectEndpoints(inject: Parameters<typeof api.injectEndpoints>[0]) {\n      const evaluatedEndpoints = inject.endpoints({\n        query: x => ({\n          ...x,\n          type: DefinitionType.query\n        }) as any,\n        mutation: x => ({\n          ...x,\n          type: DefinitionType.mutation\n        }) as any\n      });\n      for (const [endpointName, definition] of Object.entries(evaluatedEndpoints)) {\n        if (inject.overrideExisting !== true && endpointName in context.endpointDefinitions) {\n          if (inject.overrideExisting === 'throw') {\n            throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(39) : `called \\`injectEndpoints\\` to override already-existing endpointName ${endpointName} without specifying \\`overrideExisting: true\\``);\n          } else if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n            console.error(`called \\`injectEndpoints\\` to override already-existing endpointName ${endpointName} without specifying \\`overrideExisting: true\\``);\n          }\n          continue;\n        }\n        context.endpointDefinitions[endpointName] = definition;\n        for (const m of initializedModules) {\n          m.injectEndpoint(endpointName, definition);\n        }\n      }\n      return api as any;\n    }\n    return api.injectEndpoints({\n      endpoints: options.endpoints as any\n    });\n  };\n}","import type { QueryCacheKey } from './core/apiState';\nimport type { EndpointDefinition } from './endpointDefinitions';\nimport { isPlainObject } from './core/rtkImports';\nconst cache: WeakMap<any, string> | undefined = WeakMap ? new WeakMap() : undefined;\nexport const defaultSerializeQueryArgs: SerializeQueryArgs<any> = ({\n  endpointName,\n  queryArgs\n}) => {\n  let serialized = '';\n  const cached = cache?.get(queryArgs);\n  if (typeof cached === 'string') {\n    serialized = cached;\n  } else {\n    const stringified = JSON.stringify(queryArgs, (key, value) => {\n      // Handle bigints\n      value = typeof value === 'bigint' ? {\n        $bigint: value.toString()\n      } : value;\n      // Sort the object keys before stringifying, to prevent useQuery({ a: 1, b: 2 }) having a different cache key than useQuery({ b: 2, a: 1 })\n      value = isPlainObject(value) ? Object.keys(value).sort().reduce<any>((acc, key) => {\n        acc[key] = (value as any)[key];\n        return acc;\n      }, {}) : value;\n      return value;\n    });\n    if (isPlainObject(queryArgs)) {\n      cache?.set(queryArgs, stringified);\n    }\n    serialized = stringified;\n  }\n  return `${endpointName}(${serialized})`;\n};\nexport type SerializeQueryArgs<QueryArgs, ReturnType = string> = (_: {\n  queryArgs: QueryArgs;\n  endpointDefinition: EndpointDefinition<any, any, any, any>;\n  endpointName: string;\n}) => ReturnType;\nexport type InternalSerializeQueryArgs = (_: {\n  queryArgs: any;\n  endpointDefinition: EndpointDefinition<any, any, any, any>;\n  endpointName: string;\n}) => QueryCacheKey;","import { formatProdErrorMessage as _formatProdErrorMessage } from \"@reduxjs/toolkit\";\nimport type { BaseQueryFn } from './baseQueryTypes';\nexport const _NEVER = /* @__PURE__ */Symbol();\nexport type NEVER = typeof _NEVER;\n\n/**\n * Creates a \"fake\" baseQuery to be used if your api *only* uses the `queryFn` definition syntax.\n * This also allows you to specify a specific error type to be shared by all your `queryFn` definitions.\n */\nexport function fakeBaseQuery<ErrorType>(): BaseQueryFn<void, NEVER, ErrorType, {}> {\n  return function () {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(33) : 'When using `fakeBaseQuery`, all queries & mutations must use the `queryFn` definition syntax.');\n  };\n}","/**\n * Note: this file should import all other files for type discovery and declaration merging\n */\nimport type { ActionCreatorWithPayload, Middleware, Reducer, ThunkAction, ThunkDispatch, UnknownAction } from '@reduxjs/toolkit';\nimport { enablePatches } from 'immer';\nimport type { Api, Module } from '../apiTypes';\nimport type { BaseQueryFn } from '../baseQueryTypes';\nimport type { InternalSerializeQueryArgs } from '../defaultSerializeQueryArgs';\nimport type { AssertTagTypes, EndpointDefinitions, MutationDefinition, QueryArgFrom, QueryDefinition, TagDescription } from '../endpointDefinitions';\nimport { isMutationDefinition, isQueryDefinition } from '../endpointDefinitions';\nimport { assertCast, safeAssign } from '../tsHelpers';\nimport type { CombinedState, MutationKeys, QueryKeys, RootState } from './apiState';\nimport type { BuildInitiateApiEndpointMutation, BuildInitiateApiEndpointQuery, MutationActionCreatorResult, QueryActionCreatorResult } from './buildInitiate';\nimport { buildInitiate } from './buildInitiate';\nimport type { ReferenceCacheCollection, ReferenceCacheLifecycle, ReferenceQueryLifecycle } from './buildMiddleware';\nimport { buildMiddleware } from './buildMiddleware';\nimport type { BuildSelectorsApiEndpointMutation, BuildSelectorsApiEndpointQuery } from './buildSelectors';\nimport { buildSelectors } from './buildSelectors';\nimport type { SliceActions, UpsertEntries } from './buildSlice';\nimport { buildSlice } from './buildSlice';\nimport type { BuildThunksApiEndpointMutation, BuildThunksApiEndpointQuery, PatchQueryDataThunk, UpdateQueryDataThunk, UpsertQueryDataThunk } from './buildThunks';\nimport { buildThunks } from './buildThunks';\nimport { createSelector as _createSelector } from './rtkImports';\nimport { onFocus, onFocusLost, onOffline, onOnline } from './setupListeners';\n\n/**\n * `ifOlderThan` - (default: `false` | `number`) - _number is value in seconds_\n * - If specified, it will only run the query if the difference between `new Date()` and the last `fulfilledTimeStamp` is greater than the given value\n *\n * @overloadSummary\n * `force`\n * - If `force: true`, it will ignore the `ifOlderThan` value if it is set and the query will be run even if it exists in the cache.\n */\nexport type PrefetchOptions = {\n  ifOlderThan?: false | number;\n} | {\n  force?: boolean;\n};\nexport const coreModuleName = /* @__PURE__ */Symbol();\nexport type CoreModule = typeof coreModuleName | ReferenceCacheLifecycle | ReferenceQueryLifecycle | ReferenceCacheCollection;\nexport type ThunkWithReturnValue<T> = ThunkAction<T, any, any, UnknownAction>;\nexport interface ApiModules<\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nBaseQuery extends BaseQueryFn, Definitions extends EndpointDefinitions, ReducerPath extends string, TagTypes extends string> {\n  [coreModuleName]: {\n    /**\n     * This api's reducer should be mounted at `store[api.reducerPath]`.\n     *\n     * @example\n     * ```ts\n     * configureStore({\n     *   reducer: {\n     *     [api.reducerPath]: api.reducer,\n     *   },\n     *   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),\n     * })\n     * ```\n     */\n    reducerPath: ReducerPath;\n    /**\n     * Internal actions not part of the public API. Note: These are subject to change at any given time.\n     */\n    internalActions: InternalActions;\n    /**\n     *  A standard redux reducer that enables core functionality. Make sure it's included in your store.\n     *\n     * @example\n     * ```ts\n     * configureStore({\n     *   reducer: {\n     *     [api.reducerPath]: api.reducer,\n     *   },\n     *   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),\n     * })\n     * ```\n     */\n    reducer: Reducer<CombinedState<Definitions, TagTypes, ReducerPath>, UnknownAction>;\n    /**\n     * This is a standard redux middleware and is responsible for things like polling, garbage collection and a handful of other things. Make sure it's included in your store.\n     *\n     * @example\n     * ```ts\n     * configureStore({\n     *   reducer: {\n     *     [api.reducerPath]: api.reducer,\n     *   },\n     *   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),\n     * })\n     * ```\n     */\n    middleware: Middleware<{}, RootState<Definitions, string, ReducerPath>, ThunkDispatch<any, any, UnknownAction>>;\n    /**\n     * A collection of utility thunks for various situations.\n     */\n    util: {\n      /**\n       * A thunk that (if dispatched) will return a specific running query, identified\n       * by `endpointName` and `arg`.\n       * If that query is not running, dispatching the thunk will result in `undefined`.\n       *\n       * Can be used to await a specific query triggered in any way,\n       * including via hook calls or manually dispatching `initiate` actions.\n       *\n       * See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for details.\n       */\n      getRunningQueryThunk<EndpointName extends QueryKeys<Definitions>>(endpointName: EndpointName, arg: QueryArgFrom<Definitions[EndpointName]>): ThunkWithReturnValue<QueryActionCreatorResult<Definitions[EndpointName] & {\n        type: 'query';\n      }> | undefined>;\n\n      /**\n       * A thunk that (if dispatched) will return a specific running mutation, identified\n       * by `endpointName` and `fixedCacheKey` or `requestId`.\n       * If that mutation is not running, dispatching the thunk will result in `undefined`.\n       *\n       * Can be used to await a specific mutation triggered in any way,\n       * including via hook trigger functions or manually dispatching `initiate` actions.\n       *\n       * See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for details.\n       */\n      getRunningMutationThunk<EndpointName extends MutationKeys<Definitions>>(endpointName: EndpointName, fixedCacheKeyOrRequestId: string): ThunkWithReturnValue<MutationActionCreatorResult<Definitions[EndpointName] & {\n        type: 'mutation';\n      }> | undefined>;\n\n      /**\n       * A thunk that (if dispatched) will return all running queries.\n       *\n       * Useful for SSR scenarios to await all running queries triggered in any way,\n       * including via hook calls or manually dispatching `initiate` actions.\n       *\n       * See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for details.\n       */\n      getRunningQueriesThunk(): ThunkWithReturnValue<Array<QueryActionCreatorResult<any>>>;\n\n      /**\n       * A thunk that (if dispatched) will return all running mutations.\n       *\n       * Useful for SSR scenarios to await all running mutations triggered in any way,\n       * including via hook calls or manually dispatching `initiate` actions.\n       *\n       * See https://redux-toolkit.js.org/rtk-query/usage/server-side-rendering for details.\n       */\n      getRunningMutationsThunk(): ThunkWithReturnValue<Array<MutationActionCreatorResult<any>>>;\n\n      /**\n       * A Redux thunk that can be used to manually trigger pre-fetching of data.\n       *\n       * The thunk accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), the appropriate query arg values to construct the desired cache key, and a set of options used to determine if the data actually should be re-fetched based on cache staleness.\n       *\n       * React Hooks users will most likely never need to use this directly, as the `usePrefetch` hook will dispatch this thunk internally as needed when you call the prefetching function supplied by the hook.\n       *\n       * @example\n       *\n       * ```ts no-transpile\n       * dispatch(api.util.prefetch('getPosts', undefined, { force: true }))\n       * ```\n       */\n      prefetch<EndpointName extends QueryKeys<Definitions>>(endpointName: EndpointName, arg: QueryArgFrom<Definitions[EndpointName]>, options: PrefetchOptions): ThunkAction<void, any, any, UnknownAction>;\n      /**\n       * A Redux thunk action creator that, when dispatched, creates and applies a set of JSON diff/patch objects to the current state. This immediately updates the Redux state with those changes.\n       *\n       * The thunk action creator accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), the appropriate query arg values to construct the desired cache key, and an `updateRecipe` callback function. The callback receives an Immer-wrapped `draft` of the current state, and may modify the draft to match the expected results after the mutation completes successfully.\n       *\n       * The thunk executes _synchronously_, and returns an object containing `{patches: Patch[], inversePatches: Patch[], undo: () => void}`. The `patches` and `inversePatches` are generated using Immer's [`produceWithPatches` method](https://immerjs.github.io/immer/patches).\n       *\n       * This is typically used as the first step in implementing optimistic updates. The generated `inversePatches` can be used to revert the updates by calling `dispatch(patchQueryData(endpointName, arg, inversePatches))`. Alternatively, the `undo` method can be called directly to achieve the same effect.\n       *\n       * Note that the first two arguments (`endpointName` and `arg`) are used to determine which existing cache entry to update. If no existing cache entry is found, the `updateRecipe` callback will not run.\n       *\n       * @example\n       *\n       * ```ts\n       * const patchCollection = dispatch(\n       *   api.util.updateQueryData('getPosts', undefined, (draftPosts) => {\n       *     draftPosts.push({ id: 1, name: 'Teddy' })\n       *   })\n       * )\n       * ```\n       */\n      updateQueryData: UpdateQueryDataThunk<Definitions, RootState<Definitions, string, ReducerPath>>;\n\n      /**\n       * A Redux thunk action creator that, when dispatched, acts as an artificial API request to upsert a value into the cache.\n       *\n       * The thunk action creator accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), the appropriate query arg values to construct the desired cache key, and the data to upsert.\n       *\n       * If no cache entry for that cache key exists, a cache entry will be created and the data added. If a cache entry already exists, this will _overwrite_ the existing cache entry data.\n       *\n       * The thunk executes _asynchronously_, and returns a promise that resolves when the store has been updated.\n       *\n       * If dispatched while an actual request is in progress, both the upsert and request will be handled as soon as they resolve, resulting in a \"last result wins\" update behavior.\n       *\n       * @example\n       *\n       * ```ts\n       * await dispatch(\n       *   api.util.upsertQueryData('getPost', {id: 1}, {id: 1, text: \"Hello!\"})\n       * )\n       * ```\n       */\n      upsertQueryData: UpsertQueryDataThunk<Definitions, RootState<Definitions, string, ReducerPath>>;\n      /**\n       * A Redux thunk that applies a JSON diff/patch array to the cached data for a given query result. This immediately updates the Redux state with those changes.\n       *\n       * The thunk accepts three arguments: the name of the endpoint we are updating (such as `'getPost'`), the appropriate query arg values to construct the desired cache key, and a JSON diff/patch array as produced by Immer's `produceWithPatches`.\n       *\n       * This is typically used as the second step in implementing optimistic updates. If a request fails, the optimistically-applied changes can be reverted by dispatching `patchQueryData` with the `inversePatches` that were generated by `updateQueryData` earlier.\n       *\n       * In cases where it is desired to simply revert the previous changes, it may be preferable to call the `undo` method returned from dispatching `updateQueryData` instead.\n       *\n       * @example\n       * ```ts\n       * const patchCollection = dispatch(\n       *   api.util.updateQueryData('getPosts', undefined, (draftPosts) => {\n       *     draftPosts.push({ id: 1, name: 'Teddy' })\n       *   })\n       * )\n       *\n       * // later\n       * dispatch(\n       *   api.util.patchQueryData('getPosts', undefined, patchCollection.inversePatches)\n       * )\n       *\n       * // or\n       * patchCollection.undo()\n       * ```\n       */\n      patchQueryData: PatchQueryDataThunk<Definitions, RootState<Definitions, string, ReducerPath>>;\n\n      /**\n       * A Redux action creator that can be dispatched to manually reset the api state completely. This will immediately remove all existing cache entries, and all queries will be considered 'uninitialized'.\n       *\n       * @example\n       *\n       * ```ts\n       * dispatch(api.util.resetApiState())\n       * ```\n       */\n      resetApiState: SliceActions['resetApiState'];\n      upsertQueryEntries: UpsertEntries<Definitions>;\n\n      /**\n       * A Redux action creator that can be used to manually invalidate cache tags for [automated re-fetching](../../usage/automated-refetching.mdx).\n       *\n       * The action creator accepts one argument: the cache tags to be invalidated. It returns an action with those tags as a payload, and the corresponding `invalidateTags` action type for the api.\n       *\n       * Dispatching the result of this action creator will [invalidate](../../usage/automated-refetching.mdx#invalidating-cache-data) the given tags, causing queries to automatically re-fetch if they are subscribed to cache data that [provides](../../usage/automated-refetching.mdx#providing-cache-data) the corresponding tags.\n       *\n       * The array of tags provided to the action creator should be in one of the following formats, where `TagType` is equal to a string provided to the [`tagTypes`](../createApi.mdx#tagtypes) property of the api:\n       *\n       * - `[TagType]`\n       * - `[{ type: TagType }]`\n       * - `[{ type: TagType, id: number | string }]`\n       *\n       * @example\n       *\n       * ```ts\n       * dispatch(api.util.invalidateTags(['Post']))\n       * dispatch(api.util.invalidateTags([{ type: 'Post', id: 1 }]))\n       * dispatch(\n       *   api.util.invalidateTags([\n       *     { type: 'Post', id: 1 },\n       *     { type: 'Post', id: 'LIST' },\n       *   ])\n       * )\n       * ```\n       */\n      invalidateTags: ActionCreatorWithPayload<Array<TagDescription<TagTypes> | null | undefined>, string>;\n\n      /**\n       * A function to select all `{ endpointName, originalArgs, queryCacheKey }` combinations that would be invalidated by a specific set of tags.\n       *\n       * Can be used for mutations that want to do optimistic updates instead of invalidating a set of tags, but don't know exactly what they need to update.\n       */\n      selectInvalidatedBy: (state: RootState<Definitions, string, ReducerPath>, tags: ReadonlyArray<TagDescription<TagTypes> | null | undefined>) => Array<{\n        endpointName: string;\n        originalArgs: any;\n        queryCacheKey: string;\n      }>;\n\n      /**\n       * A function to select all arguments currently cached for a given endpoint.\n       *\n       * Can be used for mutations that want to do optimistic updates instead of invalidating a set of tags, but don't know exactly what they need to update.\n       */\n      selectCachedArgsForQuery: <QueryName extends QueryKeys<Definitions>>(state: RootState<Definitions, string, ReducerPath>, queryName: QueryName) => Array<QueryArgFrom<Definitions[QueryName]>>;\n    };\n    /**\n     * Endpoints based on the input endpoints provided to `createApi`, containing `select` and `action matchers`.\n     */\n    endpoints: { [K in keyof Definitions]: Definitions[K] extends QueryDefinition<any, any, any, any, any> ? ApiEndpointQuery<Definitions[K], Definitions> : Definitions[K] extends MutationDefinition<any, any, any, any, any> ? ApiEndpointMutation<Definitions[K], Definitions> : never };\n  };\n}\nexport interface ApiEndpointQuery<\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nDefinition extends QueryDefinition<any, any, any, any, any>,\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nDefinitions extends EndpointDefinitions> extends BuildThunksApiEndpointQuery<Definition>, BuildInitiateApiEndpointQuery<Definition>, BuildSelectorsApiEndpointQuery<Definition, Definitions> {\n  name: string;\n  /**\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\n   */\n  Types: NonNullable<Definition['Types']>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface ApiEndpointMutation<\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nDefinition extends MutationDefinition<any, any, any, any, any>,\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nDefinitions extends EndpointDefinitions> extends BuildThunksApiEndpointMutation<Definition>, BuildInitiateApiEndpointMutation<Definition>, BuildSelectorsApiEndpointMutation<Definition, Definitions> {\n  name: string;\n  /**\n   * All of these are `undefined` at runtime, purely to be used in TypeScript declarations!\n   */\n  Types: NonNullable<Definition['Types']>;\n}\nexport type ListenerActions = {\n  /**\n   * Will cause the RTK Query middleware to trigger any refetchOnReconnect-related behavior\n   * @link https://rtk-query-docs.netlify.app/api/setupListeners\n   */\n  onOnline: typeof onOnline;\n  onOffline: typeof onOffline;\n  /**\n   * Will cause the RTK Query middleware to trigger any refetchOnFocus-related behavior\n   * @link https://rtk-query-docs.netlify.app/api/setupListeners\n   */\n  onFocus: typeof onFocus;\n  onFocusLost: typeof onFocusLost;\n};\nexport type InternalActions = SliceActions & ListenerActions;\nexport interface CoreModuleOptions {\n  /**\n   * A selector creator (usually from `reselect`, or matching the same signature)\n   */\n  createSelector?: typeof _createSelector;\n}\n\n/**\n * Creates a module containing the basic redux logic for use with `buildCreateApi`.\n *\n * @example\n * ```ts\n * const createBaseApi = buildCreateApi(coreModule());\n * ```\n */\nexport const coreModule = ({\n  createSelector = _createSelector\n}: CoreModuleOptions = {}): Module<CoreModule> => ({\n  name: coreModuleName,\n  init(api, {\n    baseQuery,\n    tagTypes,\n    reducerPath,\n    serializeQueryArgs,\n    keepUnusedDataFor,\n    refetchOnMountOrArgChange,\n    refetchOnFocus,\n    refetchOnReconnect,\n    invalidationBehavior\n  }, context) {\n    enablePatches();\n    assertCast<InternalSerializeQueryArgs>(serializeQueryArgs);\n    const assertTagType: AssertTagTypes = tag => {\n      if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n        if (!tagTypes.includes(tag.type as any)) {\n          console.error(`Tag type '${tag.type}' was used, but not specified in \\`tagTypes\\`!`);\n        }\n      }\n      return tag;\n    };\n    Object.assign(api, {\n      reducerPath,\n      endpoints: {},\n      internalActions: {\n        onOnline,\n        onOffline,\n        onFocus,\n        onFocusLost\n      },\n      util: {}\n    });\n    const {\n      queryThunk,\n      mutationThunk,\n      patchQueryData,\n      updateQueryData,\n      upsertQueryData,\n      prefetch,\n      buildMatchThunkActions\n    } = buildThunks({\n      baseQuery,\n      reducerPath,\n      context,\n      api,\n      serializeQueryArgs,\n      assertTagType\n    });\n    const {\n      reducer,\n      actions: sliceActions\n    } = buildSlice({\n      context,\n      queryThunk,\n      mutationThunk,\n      serializeQueryArgs,\n      reducerPath,\n      assertTagType,\n      config: {\n        refetchOnFocus,\n        refetchOnReconnect,\n        refetchOnMountOrArgChange,\n        keepUnusedDataFor,\n        reducerPath,\n        invalidationBehavior\n      }\n    });\n    safeAssign(api.util, {\n      patchQueryData,\n      updateQueryData,\n      upsertQueryData,\n      prefetch,\n      resetApiState: sliceActions.resetApiState,\n      upsertQueryEntries: sliceActions.cacheEntriesUpserted as any\n    });\n    safeAssign(api.internalActions, sliceActions);\n    const {\n      middleware,\n      actions: middlewareActions\n    } = buildMiddleware({\n      reducerPath,\n      context,\n      queryThunk,\n      mutationThunk,\n      api,\n      assertTagType\n    });\n    safeAssign(api.util, middlewareActions);\n    safeAssign(api, {\n      reducer: reducer as any,\n      middleware\n    });\n    const {\n      buildQuerySelector,\n      buildMutationSelector,\n      selectInvalidatedBy,\n      selectCachedArgsForQuery\n    } = buildSelectors({\n      serializeQueryArgs: serializeQueryArgs as any,\n      reducerPath,\n      createSelector\n    });\n    safeAssign(api.util, {\n      selectInvalidatedBy,\n      selectCachedArgsForQuery\n    });\n    const {\n      buildInitiateQuery,\n      buildInitiateMutation,\n      getRunningMutationThunk,\n      getRunningMutationsThunk,\n      getRunningQueriesThunk,\n      getRunningQueryThunk\n    } = buildInitiate({\n      queryThunk,\n      mutationThunk,\n      api,\n      serializeQueryArgs: serializeQueryArgs as any,\n      context\n    });\n    safeAssign(api.util, {\n      getRunningMutationThunk,\n      getRunningMutationsThunk,\n      getRunningQueryThunk,\n      getRunningQueriesThunk\n    });\n    return {\n      name: coreModuleName,\n      injectEndpoint(endpointName, definition) {\n        const anyApi = api as any as Api<any, Record<string, any>, string, string, CoreModule>;\n        anyApi.endpoints[endpointName] ??= {} as any;\n        if (isQueryDefinition(definition)) {\n          safeAssign(anyApi.endpoints[endpointName], {\n            name: endpointName,\n            select: buildQuerySelector(endpointName, definition),\n            initiate: buildInitiateQuery(endpointName, definition)\n          }, buildMatchThunkActions(queryThunk, endpointName));\n        } else if (isMutationDefinition(definition)) {\n          safeAssign(anyApi.endpoints[endpointName], {\n            name: endpointName,\n            select: buildMutationSelector(),\n            initiate: buildInitiateMutation(endpointName)\n          }, buildMatchThunkActions(mutationThunk, endpointName));\n        }\n      }\n    };\n  }\n});","export type Id<T> = { [K in keyof T]: T[K] } & {};\nexport type WithRequiredProp<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\nexport type Override<T1, T2> = T2 extends any ? Omit<T1, keyof T2> & T2 : never;\nexport function assertCast<T>(v: any): asserts v is T {}\nexport function safeAssign<T extends object>(target: T, ...args: Array<Partial<NoInfer<T>>>): T {\n  return Object.assign(target, ...args);\n}\n\n/**\n * Convert a Union type `(A|B)` to an intersection type `(A&B)`\n */\nexport type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;\nexport type NonOptionalKeys<T> = { [K in keyof T]-?: undefined extends T[K] ? never : K }[keyof T];\nexport type HasRequiredProps<T, True, False> = NonOptionalKeys<T> extends never ? False : True;\nexport type OptionalIfAllPropsOptional<T> = HasRequiredProps<T, T, T | never>;\nexport type NoInfer<T> = [T][T extends any ? 0 : never];\nexport type NonUndefined<T> = T extends undefined ? never : T;\nexport type UnwrapPromise<T> = T extends PromiseLike<infer V> ? V : T;\nexport type MaybePromise<T> = T | PromiseLike<T>;\nexport type OmitFromUnion<T, K extends keyof T> = T extends any ? Omit<T, K> : never;\nexport type IsAny<T, True, False = never> = true | false extends (T extends never ? true : false) ? True : False;\nexport type CastAny<T, CastTo> = IsAny<T, CastTo, T>;","import type { InternalHandlerBuilder, SubscriptionSelectors } from './types';\nimport type { SubscriptionState } from '../apiState';\nimport { produceWithPatches } from 'immer';\nimport type { Action } from '@reduxjs/toolkit';\nimport { countObjectKeys } from '../../utils/countObjectKeys';\nexport const buildBatchedActionsHandler: InternalHandlerBuilder<[actionShouldContinue: boolean, returnValue: SubscriptionSelectors | boolean]> = ({\n  api,\n  queryThunk,\n  internalState\n}) => {\n  const subscriptionsPrefix = `${api.reducerPath}/subscriptions`;\n  let previousSubscriptions: SubscriptionState = null as unknown as SubscriptionState;\n  let updateSyncTimer: ReturnType<typeof window.setTimeout> | null = null;\n  const {\n    updateSubscriptionOptions,\n    unsubscribeQueryResult\n  } = api.internalActions;\n\n  // Actually intentionally mutate the subscriptions state used in the middleware\n  // This is done to speed up perf when loading many components\n  const actuallyMutateSubscriptions = (mutableState: SubscriptionState, action: Action) => {\n    if (updateSubscriptionOptions.match(action)) {\n      const {\n        queryCacheKey,\n        requestId,\n        options\n      } = action.payload;\n      if (mutableState?.[queryCacheKey]?.[requestId]) {\n        mutableState[queryCacheKey]![requestId] = options;\n      }\n      return true;\n    }\n    if (unsubscribeQueryResult.match(action)) {\n      const {\n        queryCacheKey,\n        requestId\n      } = action.payload;\n      if (mutableState[queryCacheKey]) {\n        delete mutableState[queryCacheKey]![requestId];\n      }\n      return true;\n    }\n    if (api.internalActions.removeQueryResult.match(action)) {\n      delete mutableState[action.payload.queryCacheKey];\n      return true;\n    }\n    if (queryThunk.pending.match(action)) {\n      const {\n        meta: {\n          arg,\n          requestId\n        }\n      } = action;\n      const substate = mutableState[arg.queryCacheKey] ??= {};\n      substate[`${requestId}_running`] = {};\n      if (arg.subscribe) {\n        substate[requestId] = arg.subscriptionOptions ?? substate[requestId] ?? {};\n      }\n      return true;\n    }\n    let mutated = false;\n    if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action)) {\n      const state = mutableState[action.meta.arg.queryCacheKey] || {};\n      const key = `${action.meta.requestId}_running`;\n      mutated ||= !!state[key];\n      delete state[key];\n    }\n    if (queryThunk.rejected.match(action)) {\n      const {\n        meta: {\n          condition,\n          arg,\n          requestId\n        }\n      } = action;\n      if (condition && arg.subscribe) {\n        const substate = mutableState[arg.queryCacheKey] ??= {};\n        substate[requestId] = arg.subscriptionOptions ?? substate[requestId] ?? {};\n        mutated = true;\n      }\n    }\n    return mutated;\n  };\n  const getSubscriptions = () => internalState.currentSubscriptions;\n  const getSubscriptionCount = (queryCacheKey: string) => {\n    const subscriptions = getSubscriptions();\n    const subscriptionsForQueryArg = subscriptions[queryCacheKey] ?? {};\n    return countObjectKeys(subscriptionsForQueryArg);\n  };\n  const isRequestSubscribed = (queryCacheKey: string, requestId: string) => {\n    const subscriptions = getSubscriptions();\n    return !!subscriptions?.[queryCacheKey]?.[requestId];\n  };\n  const subscriptionSelectors: SubscriptionSelectors = {\n    getSubscriptions,\n    getSubscriptionCount,\n    isRequestSubscribed\n  };\n  return (action, mwApi): [actionShouldContinue: boolean, result: SubscriptionSelectors | boolean] => {\n    if (!previousSubscriptions) {\n      // Initialize it the first time this handler runs\n      previousSubscriptions = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n    }\n    if (api.util.resetApiState.match(action)) {\n      previousSubscriptions = internalState.currentSubscriptions = {};\n      updateSyncTimer = null;\n      return [true, false];\n    }\n\n    // Intercept requests by hooks to see if they're subscribed\n    // We return the internal state reference so that hooks\n    // can do their own checks to see if they're still active.\n    // It's stupid and hacky, but it does cut down on some dispatch calls.\n    if (api.internalActions.internal_getRTKQSubscriptions.match(action)) {\n      return [false, subscriptionSelectors];\n    }\n\n    // Update subscription data based on this action\n    const didMutate = actuallyMutateSubscriptions(internalState.currentSubscriptions, action);\n    let actionShouldContinue = true;\n    if (didMutate) {\n      if (!updateSyncTimer) {\n        // We only use the subscription state for the Redux DevTools at this point,\n        // as the real data is kept here in the middleware.\n        // Given that, we can throttle synchronizing this state significantly to\n        // save on overall perf.\n        // In 1.9, it was updated in a microtask, but now we do it at most every 500ms.\n        updateSyncTimer = setTimeout(() => {\n          // Deep clone the current subscription data\n          const newSubscriptions: SubscriptionState = JSON.parse(JSON.stringify(internalState.currentSubscriptions));\n          // Figure out a smaller diff between original and current\n          const [, patches] = produceWithPatches(previousSubscriptions, () => newSubscriptions);\n\n          // Sync the store state for visibility\n          mwApi.next(api.internalActions.subscriptionsUpdated(patches));\n          // Save the cloned state for later reference\n          previousSubscriptions = newSubscriptions;\n          updateSyncTimer = null;\n        }, 500);\n      }\n      const isSubscriptionSliceAction = typeof action.type == 'string' && !!action.type.startsWith(subscriptionsPrefix);\n      const isAdditionalSubscriptionAction = queryThunk.rejected.match(action) && action.meta.condition && !!action.meta.arg.subscribe;\n      actionShouldContinue = !isSubscriptionSliceAction && !isAdditionalSubscriptionAction;\n    }\n    return [actionShouldContinue, false];\n  };\n};","import type { QueryDefinition } from '../../endpointDefinitions';\nimport type { ConfigState, QueryCacheKey } from '../apiState';\nimport { isAnyOf } from '../rtkImports';\nimport type { ApiMiddlewareInternalHandler, InternalHandlerBuilder, QueryStateMeta, SubMiddlewareApi, TimeoutId } from './types';\nexport type ReferenceCacheCollection = never;\nfunction isObjectEmpty(obj: Record<any, any>) {\n  // Apparently a for..in loop is faster than `Object.keys()` here:\n  // https://stackoverflow.com/a/59787784/62937\n  for (const k in obj) {\n    // If there is at least one key, it's not empty\n    return false;\n  }\n  return true;\n}\nexport type CacheCollectionQueryExtraOptions = {\n  /**\n   * Overrides the api-wide definition of `keepUnusedDataFor` for this endpoint only. _(This value is in seconds.)_\n   *\n   * This is how long RTK Query will keep your data cached for **after** the last component unsubscribes. For example, if you query an endpoint, then unmount the component, then mount another component that makes the same request within the given time frame, the most recent value will be served from the cache.\n   */\n  keepUnusedDataFor?: number;\n};\n\n// Per https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value , browsers store\n// `setTimeout()` timer values in a 32-bit int. If we pass a value in that's larger than that,\n// it wraps and ends up executing immediately.\n// Our `keepUnusedDataFor` values are in seconds, so adjust the numbers here accordingly.\nexport const THIRTY_TWO_BIT_MAX_INT = 2_147_483_647;\nexport const THIRTY_TWO_BIT_MAX_TIMER_SECONDS = 2_147_483_647 / 1_000 - 1;\nexport const buildCacheCollectionHandler: InternalHandlerBuilder = ({\n  reducerPath,\n  api,\n  queryThunk,\n  context,\n  internalState\n}) => {\n  const {\n    removeQueryResult,\n    unsubscribeQueryResult,\n    cacheEntriesUpserted\n  } = api.internalActions;\n  const canTriggerUnsubscribe = isAnyOf(unsubscribeQueryResult.match, queryThunk.fulfilled, queryThunk.rejected, cacheEntriesUpserted.match);\n  function anySubscriptionsRemainingForKey(queryCacheKey: string) {\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    return !!subscriptions && !isObjectEmpty(subscriptions);\n  }\n  const currentRemovalTimeouts: QueryStateMeta<TimeoutId> = {};\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi, internalState) => {\n    if (canTriggerUnsubscribe(action)) {\n      const state = mwApi.getState()[reducerPath];\n      let queryCacheKeys: QueryCacheKey[];\n      if (cacheEntriesUpserted.match(action)) {\n        queryCacheKeys = action.payload.map(entry => entry.queryDescription.queryCacheKey);\n      } else {\n        const {\n          queryCacheKey\n        } = unsubscribeQueryResult.match(action) ? action.payload : action.meta.arg;\n        queryCacheKeys = [queryCacheKey];\n      }\n      for (const queryCacheKey of queryCacheKeys) {\n        handleUnsubscribe(queryCacheKey, state.queries[queryCacheKey]?.endpointName, mwApi, state.config);\n      }\n    }\n    if (api.util.resetApiState.match(action)) {\n      for (const [key, timeout] of Object.entries(currentRemovalTimeouts)) {\n        if (timeout) clearTimeout(timeout);\n        delete currentRemovalTimeouts[key];\n      }\n    }\n    if (context.hasRehydrationInfo(action)) {\n      const state = mwApi.getState()[reducerPath];\n      const {\n        queries\n      } = context.extractRehydrationInfo(action)!;\n      for (const [queryCacheKey, queryState] of Object.entries(queries)) {\n        // Gotcha:\n        // If rehydrating before the endpoint has been injected,the global `keepUnusedDataFor`\n        // will be used instead of the endpoint-specific one.\n        handleUnsubscribe(queryCacheKey as QueryCacheKey, queryState?.endpointName, mwApi, state.config);\n      }\n    }\n  };\n  function handleUnsubscribe(queryCacheKey: QueryCacheKey, endpointName: string | undefined, api: SubMiddlewareApi, config: ConfigState<string>) {\n    const endpointDefinition = context.endpointDefinitions[endpointName!] as QueryDefinition<any, any, any, any>;\n    const keepUnusedDataFor = endpointDefinition?.keepUnusedDataFor ?? config.keepUnusedDataFor;\n    if (keepUnusedDataFor === Infinity) {\n      // Hey, user said keep this forever!\n      return;\n    }\n    // Prevent `setTimeout` timers from overflowing a 32-bit internal int, by\n    // clamping the max value to be at most 1000ms less than the 32-bit max.\n    // Look, a 24.8-day keepalive ought to be enough for anybody, right? :)\n    // Also avoid negative values too.\n    const finalKeepUnusedDataFor = Math.max(0, Math.min(keepUnusedDataFor, THIRTY_TWO_BIT_MAX_TIMER_SECONDS));\n    if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n      const currentTimeout = currentRemovalTimeouts[queryCacheKey];\n      if (currentTimeout) {\n        clearTimeout(currentTimeout);\n      }\n      currentRemovalTimeouts[queryCacheKey] = setTimeout(() => {\n        if (!anySubscriptionsRemainingForKey(queryCacheKey)) {\n          api.dispatch(removeQueryResult({\n            queryCacheKey\n          }));\n        }\n        delete currentRemovalTimeouts![queryCacheKey];\n      }, finalKeepUnusedDataFor * 1000);\n    }\n  }\n  return handler;\n};","import type { ThunkDispatch, UnknownAction } from '@reduxjs/toolkit';\nimport type { BaseQueryFn, BaseQueryMeta } from '../../baseQueryTypes';\nimport type { BaseEndpointDefinition } from '../../endpointDefinitions';\nimport { DefinitionType } from '../../endpointDefinitions';\nimport type { RootState } from '../apiState';\nimport type { MutationResultSelectorResult, QueryResultSelectorResult } from '../buildSelectors';\nimport { getMutationCacheKey } from '../buildSlice';\nimport type { PatchCollection, Recipe } from '../buildThunks';\nimport { isAsyncThunkAction, isFulfilled } from '../rtkImports';\nimport type { ApiMiddlewareInternalHandler, InternalHandlerBuilder, PromiseWithKnownReason, SubMiddlewareApi } from './types';\nexport type ReferenceCacheLifecycle = never;\nexport interface QueryBaseLifecycleApi<QueryArg, BaseQuery extends BaseQueryFn, ResultType, ReducerPath extends string = string> extends LifecycleApi<ReducerPath> {\n  /**\n   * Gets the current value of this cache entry.\n   */\n  getCacheEntry(): QueryResultSelectorResult<{\n    type: DefinitionType.query;\n  } & BaseEndpointDefinition<QueryArg, BaseQuery, ResultType>>;\n  /**\n   * Updates the current cache entry value.\n   * For documentation see `api.util.updateQueryData`.\n   */\n  updateCachedData(updateRecipe: Recipe<ResultType>): PatchCollection;\n}\nexport type MutationBaseLifecycleApi<QueryArg, BaseQuery extends BaseQueryFn, ResultType, ReducerPath extends string = string> = LifecycleApi<ReducerPath> & {\n  /**\n   * Gets the current value of this cache entry.\n   */\n  getCacheEntry(): MutationResultSelectorResult<{\n    type: DefinitionType.mutation;\n  } & BaseEndpointDefinition<QueryArg, BaseQuery, ResultType>>;\n};\ntype LifecycleApi<ReducerPath extends string = string> = {\n  /**\n   * The dispatch method for the store\n   */\n  dispatch: ThunkDispatch<any, any, UnknownAction>;\n  /**\n   * A method to get the current state\n   */\n  getState(): RootState<any, any, ReducerPath>;\n  /**\n   * `extra` as provided as `thunk.extraArgument` to the `configureStore` `getDefaultMiddleware` option.\n   */\n  extra: unknown;\n  /**\n   * A unique ID generated for the mutation\n   */\n  requestId: string;\n};\ntype CacheLifecyclePromises<ResultType = unknown, MetaType = unknown> = {\n  /**\n   * Promise that will resolve with the first value for this cache key.\n   * This allows you to `await` until an actual value is in cache.\n   *\n   * If the cache entry is removed from the cache before any value has ever\n   * been resolved, this Promise will reject with\n   * `new Error('Promise never resolved before cacheEntryRemoved.')`\n   * to prevent memory leaks.\n   * You can just re-throw that error (or not handle it at all) -\n   * it will be caught outside of `cacheEntryAdded`.\n   *\n   * If you don't interact with this promise, it will not throw.\n   */\n  cacheDataLoaded: PromiseWithKnownReason<{\n    /**\n     * The (transformed) query result.\n     */\n    data: ResultType;\n    /**\n     * The `meta` returned by the `baseQuery`\n     */\n    meta: MetaType;\n  }, typeof neverResolvedError>;\n  /**\n   * Promise that allows you to wait for the point in time when the cache entry\n   * has been removed from the cache, by not being used/subscribed to any more\n   * in the application for too long or by dispatching `api.util.resetApiState`.\n   */\n  cacheEntryRemoved: Promise<void>;\n};\nexport interface QueryCacheLifecycleApi<QueryArg, BaseQuery extends BaseQueryFn, ResultType, ReducerPath extends string = string> extends QueryBaseLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>, CacheLifecyclePromises<ResultType, BaseQueryMeta<BaseQuery>> {}\nexport type MutationCacheLifecycleApi<QueryArg, BaseQuery extends BaseQueryFn, ResultType, ReducerPath extends string = string> = MutationBaseLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath> & CacheLifecyclePromises<ResultType, BaseQueryMeta<BaseQuery>>;\nexport type CacheLifecycleQueryExtraOptions<ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> = {\n  onCacheEntryAdded?(arg: QueryArg, api: QueryCacheLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>): Promise<void> | void;\n};\nexport type CacheLifecycleMutationExtraOptions<ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> = {\n  onCacheEntryAdded?(arg: QueryArg, api: MutationCacheLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>): Promise<void> | void;\n};\nconst neverResolvedError = new Error('Promise never resolved before cacheEntryRemoved.') as Error & {\n  message: 'Promise never resolved before cacheEntryRemoved.';\n};\nexport const buildCacheLifecycleHandler: InternalHandlerBuilder = ({\n  api,\n  reducerPath,\n  context,\n  queryThunk,\n  mutationThunk,\n  internalState\n}) => {\n  const isQueryThunk = isAsyncThunkAction(queryThunk);\n  const isMutationThunk = isAsyncThunkAction(mutationThunk);\n  const isFulfilledThunk = isFulfilled(queryThunk, mutationThunk);\n  type CacheLifecycle = {\n    valueResolved?(value: {\n      data: unknown;\n      meta: unknown;\n    }): unknown;\n    cacheEntryRemoved(): void;\n  };\n  const lifecycleMap: Record<string, CacheLifecycle> = {};\n  function resolveLifecycleEntry(cacheKey: string, data: unknown, meta: unknown) {\n    const lifecycle = lifecycleMap[cacheKey];\n    if (lifecycle?.valueResolved) {\n      lifecycle.valueResolved({\n        data,\n        meta\n      });\n      delete lifecycle.valueResolved;\n    }\n  }\n  function removeLifecycleEntry(cacheKey: string) {\n    const lifecycle = lifecycleMap[cacheKey];\n    if (lifecycle) {\n      delete lifecycleMap[cacheKey];\n      lifecycle.cacheEntryRemoved();\n    }\n  }\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi, stateBefore) => {\n    const cacheKey = getCacheKey(action);\n    function checkForNewCacheKey(endpointName: string, cacheKey: string, requestId: string, originalArgs: unknown) {\n      const oldState = stateBefore[reducerPath].queries[cacheKey];\n      const state = mwApi.getState()[reducerPath].queries[cacheKey];\n      if (!oldState && state) {\n        handleNewKey(endpointName, originalArgs, cacheKey, mwApi, requestId);\n      }\n    }\n    if (queryThunk.pending.match(action)) {\n      checkForNewCacheKey(action.meta.arg.endpointName, cacheKey, action.meta.requestId, action.meta.arg.originalArgs);\n    } else if (api.internalActions.cacheEntriesUpserted.match(action)) {\n      for (const {\n        queryDescription,\n        value\n      } of action.payload) {\n        const {\n          endpointName,\n          originalArgs,\n          queryCacheKey\n        } = queryDescription;\n        checkForNewCacheKey(endpointName, queryCacheKey, action.meta.requestId, originalArgs);\n        resolveLifecycleEntry(queryCacheKey, value, {});\n      }\n    } else if (mutationThunk.pending.match(action)) {\n      const state = mwApi.getState()[reducerPath].mutations[cacheKey];\n      if (state) {\n        handleNewKey(action.meta.arg.endpointName, action.meta.arg.originalArgs, cacheKey, mwApi, action.meta.requestId);\n      }\n    } else if (isFulfilledThunk(action)) {\n      resolveLifecycleEntry(cacheKey, action.payload, action.meta.baseQueryMeta);\n    } else if (api.internalActions.removeQueryResult.match(action) || api.internalActions.removeMutationResult.match(action)) {\n      removeLifecycleEntry(cacheKey);\n    } else if (api.util.resetApiState.match(action)) {\n      for (const cacheKey of Object.keys(lifecycleMap)) {\n        removeLifecycleEntry(cacheKey);\n      }\n    }\n  };\n  function getCacheKey(action: any) {\n    if (isQueryThunk(action)) return action.meta.arg.queryCacheKey;\n    if (isMutationThunk(action)) {\n      return action.meta.arg.fixedCacheKey ?? action.meta.requestId;\n    }\n    if (api.internalActions.removeQueryResult.match(action)) return action.payload.queryCacheKey;\n    if (api.internalActions.removeMutationResult.match(action)) return getMutationCacheKey(action.payload);\n    return '';\n  }\n  function handleNewKey(endpointName: string, originalArgs: any, queryCacheKey: string, mwApi: SubMiddlewareApi, requestId: string) {\n    const endpointDefinition = context.endpointDefinitions[endpointName];\n    const onCacheEntryAdded = endpointDefinition?.onCacheEntryAdded;\n    if (!onCacheEntryAdded) return;\n    const lifecycle = {} as CacheLifecycle;\n    const cacheEntryRemoved = new Promise<void>(resolve => {\n      lifecycle.cacheEntryRemoved = resolve;\n    });\n    const cacheDataLoaded: PromiseWithKnownReason<{\n      data: unknown;\n      meta: unknown;\n    }, typeof neverResolvedError> = Promise.race([new Promise<{\n      data: unknown;\n      meta: unknown;\n    }>(resolve => {\n      lifecycle.valueResolved = resolve;\n    }), cacheEntryRemoved.then(() => {\n      throw neverResolvedError;\n    })]);\n    // prevent uncaught promise rejections from happening.\n    // if the original promise is used in any way, that will create a new promise that will throw again\n    cacheDataLoaded.catch(() => {});\n    lifecycleMap[queryCacheKey] = lifecycle;\n    const selector = (api.endpoints[endpointName] as any).select(endpointDefinition.type === DefinitionType.query ? originalArgs : queryCacheKey);\n    const extra = mwApi.dispatch((_, __, extra) => extra);\n    const lifecycleApi = {\n      ...mwApi,\n      getCacheEntry: () => selector(mwApi.getState()),\n      requestId,\n      extra,\n      updateCachedData: (endpointDefinition.type === DefinitionType.query ? (updateRecipe: Recipe<any>) => mwApi.dispatch(api.util.updateQueryData(endpointName as never, originalArgs, updateRecipe)) : undefined) as any,\n      cacheDataLoaded,\n      cacheEntryRemoved\n    };\n    const runningHandler = onCacheEntryAdded(originalArgs, lifecycleApi);\n    // if a `neverResolvedError` was thrown, but not handled in the running handler, do not let it leak out further\n    Promise.resolve(runningHandler).catch(e => {\n      if (e === neverResolvedError) return;\n      throw e;\n    });\n  }\n  return handler;\n};","import type { InternalHandlerBuilder } from './types';\nexport const buildDevCheckHandler: InternalHandlerBuilder = ({\n  api,\n  context: {\n    apiUid\n  },\n  reducerPath\n}) => {\n  return (action, mwApi) => {\n    if (api.util.resetApiState.match(action)) {\n      // dispatch after api reset\n      mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n    }\n    if (typeof process !== 'undefined' && process.env.NODE_ENV === 'development') {\n      if (api.internalActions.middlewareRegistered.match(action) && action.payload === apiUid && mwApi.getState()[reducerPath]?.config?.middlewareRegistered === 'conflict') {\n        console.warn(`There is a mismatch between slice and middleware for the reducerPath \"${reducerPath}\".\nYou can only have one api per reducer path, this will lead to crashes in various situations!${reducerPath === 'api' ? `\nIf you have multiple apis, you *have* to specify the reducerPath option when using createApi!` : ''}`);\n      }\n    }\n  };\n};","import { isAnyOf, isFulfilled, isRejected, isRejectedWithValue } from '../rtkImports';\nimport type { EndpointDefinitions, FullTagDescription } from '../../endpointDefinitions';\nimport { calculateProvidedBy } from '../../endpointDefinitions';\nimport type { CombinedState, QueryCacheKey } from '../apiState';\nimport { QueryStatus } from '../apiState';\nimport { calculateProvidedByThunk } from '../buildThunks';\nimport type { SubMiddlewareApi, InternalHandlerBuilder, ApiMiddlewareInternalHandler, InternalMiddlewareState } from './types';\nimport { countObjectKeys } from '../../utils/countObjectKeys';\nexport const buildInvalidationByTagsHandler: InternalHandlerBuilder = ({\n  reducerPath,\n  context,\n  context: {\n    endpointDefinitions\n  },\n  mutationThunk,\n  queryThunk,\n  api,\n  assertTagType,\n  refetchQuery,\n  internalState\n}) => {\n  const {\n    removeQueryResult\n  } = api.internalActions;\n  const isThunkActionWithTags = isAnyOf(isFulfilled(mutationThunk), isRejectedWithValue(mutationThunk));\n  const isQueryEnd = isAnyOf(isFulfilled(mutationThunk, queryThunk), isRejected(mutationThunk, queryThunk));\n  let pendingTagInvalidations: FullTagDescription<string>[] = [];\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi) => {\n    if (isThunkActionWithTags(action)) {\n      invalidateTags(calculateProvidedByThunk(action, 'invalidatesTags', endpointDefinitions, assertTagType), mwApi);\n    } else if (isQueryEnd(action)) {\n      invalidateTags([], mwApi);\n    } else if (api.util.invalidateTags.match(action)) {\n      invalidateTags(calculateProvidedBy(action.payload, undefined, undefined, undefined, undefined, assertTagType), mwApi);\n    }\n  };\n  function hasPendingRequests(state: CombinedState<EndpointDefinitions, string, string>) {\n    for (const key in state.queries) {\n      if (state.queries[key]?.status === QueryStatus.pending) return true;\n    }\n    for (const key in state.mutations) {\n      if (state.mutations[key]?.status === QueryStatus.pending) return true;\n    }\n    return false;\n  }\n  function invalidateTags(newTags: readonly FullTagDescription<string>[], mwApi: SubMiddlewareApi) {\n    const rootState = mwApi.getState();\n    const state = rootState[reducerPath];\n    pendingTagInvalidations.push(...newTags);\n    if (state.config.invalidationBehavior === 'delayed' && hasPendingRequests(state)) {\n      return;\n    }\n    const tags = pendingTagInvalidations;\n    pendingTagInvalidations = [];\n    if (tags.length === 0) return;\n    const toInvalidate = api.util.selectInvalidatedBy(rootState, tags);\n    context.batch(() => {\n      const valuesArray = Array.from(toInvalidate.values());\n      for (const {\n        queryCacheKey\n      } of valuesArray) {\n        const querySubState = state.queries[queryCacheKey];\n        const subscriptionSubState = internalState.currentSubscriptions[queryCacheKey] ?? {};\n        if (querySubState) {\n          if (countObjectKeys(subscriptionSubState) === 0) {\n            mwApi.dispatch(removeQueryResult({\n              queryCacheKey: queryCacheKey as QueryCacheKey\n            }));\n          } else if (querySubState.status !== QueryStatus.uninitialized) {\n            mwApi.dispatch(refetchQuery(querySubState));\n          }\n        }\n      }\n    });\n  }\n  return handler;\n};","import type { QuerySubstateIdentifier, Subscribers } from '../apiState';\nimport { QueryStatus } from '../apiState';\nimport type { QueryStateMeta, SubMiddlewareApi, TimeoutId, InternalHandlerBuilder, ApiMiddlewareInternalHandler, InternalMiddlewareState } from './types';\nexport const buildPollingHandler: InternalHandlerBuilder = ({\n  reducerPath,\n  queryThunk,\n  api,\n  refetchQuery,\n  internalState\n}) => {\n  const currentPolls: QueryStateMeta<{\n    nextPollTimestamp: number;\n    timeout?: TimeoutId;\n    pollingInterval: number;\n  }> = {};\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi) => {\n    if (api.internalActions.updateSubscriptionOptions.match(action) || api.internalActions.unsubscribeQueryResult.match(action)) {\n      updatePollingInterval(action.payload, mwApi);\n    }\n    if (queryThunk.pending.match(action) || queryThunk.rejected.match(action) && action.meta.condition) {\n      updatePollingInterval(action.meta.arg, mwApi);\n    }\n    if (queryThunk.fulfilled.match(action) || queryThunk.rejected.match(action) && !action.meta.condition) {\n      startNextPoll(action.meta.arg, mwApi);\n    }\n    if (api.util.resetApiState.match(action)) {\n      clearPolls();\n    }\n  };\n  function startNextPoll({\n    queryCacheKey\n  }: QuerySubstateIdentifier, api: SubMiddlewareApi) {\n    const state = api.getState()[reducerPath];\n    const querySubState = state.queries[queryCacheKey];\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    if (!querySubState || querySubState.status === QueryStatus.uninitialized) return;\n    const {\n      lowestPollingInterval,\n      skipPollingIfUnfocused\n    } = findLowestPollingInterval(subscriptions);\n    if (!Number.isFinite(lowestPollingInterval)) return;\n    const currentPoll = currentPolls[queryCacheKey];\n    if (currentPoll?.timeout) {\n      clearTimeout(currentPoll.timeout);\n      currentPoll.timeout = undefined;\n    }\n    const nextPollTimestamp = Date.now() + lowestPollingInterval;\n    currentPolls[queryCacheKey] = {\n      nextPollTimestamp,\n      pollingInterval: lowestPollingInterval,\n      timeout: setTimeout(() => {\n        if (state.config.focused || !skipPollingIfUnfocused) {\n          api.dispatch(refetchQuery(querySubState));\n        }\n        startNextPoll({\n          queryCacheKey\n        }, api);\n      }, lowestPollingInterval)\n    };\n  }\n  function updatePollingInterval({\n    queryCacheKey\n  }: QuerySubstateIdentifier, api: SubMiddlewareApi) {\n    const state = api.getState()[reducerPath];\n    const querySubState = state.queries[queryCacheKey];\n    const subscriptions = internalState.currentSubscriptions[queryCacheKey];\n    if (!querySubState || querySubState.status === QueryStatus.uninitialized) {\n      return;\n    }\n    const {\n      lowestPollingInterval\n    } = findLowestPollingInterval(subscriptions);\n    if (!Number.isFinite(lowestPollingInterval)) {\n      cleanupPollForKey(queryCacheKey);\n      return;\n    }\n    const currentPoll = currentPolls[queryCacheKey];\n    const nextPollTimestamp = Date.now() + lowestPollingInterval;\n    if (!currentPoll || nextPollTimestamp < currentPoll.nextPollTimestamp) {\n      startNextPoll({\n        queryCacheKey\n      }, api);\n    }\n  }\n  function cleanupPollForKey(key: string) {\n    const existingPoll = currentPolls[key];\n    if (existingPoll?.timeout) {\n      clearTimeout(existingPoll.timeout);\n    }\n    delete currentPolls[key];\n  }\n  function clearPolls() {\n    for (const key of Object.keys(currentPolls)) {\n      cleanupPollForKey(key);\n    }\n  }\n  function findLowestPollingInterval(subscribers: Subscribers = {}) {\n    let skipPollingIfUnfocused: boolean | undefined = false;\n    let lowestPollingInterval = Number.POSITIVE_INFINITY;\n    for (let key in subscribers) {\n      if (!!subscribers[key].pollingInterval) {\n        lowestPollingInterval = Math.min(subscribers[key].pollingInterval!, lowestPollingInterval);\n        skipPollingIfUnfocused = subscribers[key].skipPollingIfUnfocused || skipPollingIfUnfocused;\n      }\n    }\n    return {\n      lowestPollingInterval,\n      skipPollingIfUnfocused\n    };\n  }\n  return handler;\n};","import type { BaseQueryError, BaseQueryFn, BaseQueryMeta } from '../../baseQueryTypes';\nimport { DefinitionType } from '../../endpointDefinitions';\nimport type { Recipe } from '../buildThunks';\nimport { isFulfilled, isPending, isRejected } from '../rtkImports';\nimport type { MutationBaseLifecycleApi, QueryBaseLifecycleApi } from './cacheLifecycle';\nimport type { ApiMiddlewareInternalHandler, InternalHandlerBuilder, PromiseConstructorWithKnownReason, PromiseWithKnownReason } from './types';\nexport type ReferenceQueryLifecycle = never;\ntype QueryLifecyclePromises<ResultType, BaseQuery extends BaseQueryFn> = {\n  /**\n   * Promise that will resolve with the (transformed) query result.\n   *\n   * If the query fails, this promise will reject with the error.\n   *\n   * This allows you to `await` for the query to finish.\n   *\n   * If you don't interact with this promise, it will not throw.\n   */\n  queryFulfilled: PromiseWithKnownReason<{\n    /**\n     * The (transformed) query result.\n     */\n    data: ResultType;\n    /**\n     * The `meta` returned by the `baseQuery`\n     */\n    meta: BaseQueryMeta<BaseQuery>;\n  }, QueryFulfilledRejectionReason<BaseQuery>>;\n};\ntype QueryFulfilledRejectionReason<BaseQuery extends BaseQueryFn> = {\n  error: BaseQueryError<BaseQuery>;\n  /**\n   * If this is `false`, that means this error was returned from the `baseQuery` or `queryFn` in a controlled manner.\n   */\n  isUnhandledError: false;\n  /**\n   * The `meta` returned by the `baseQuery`\n   */\n  meta: BaseQueryMeta<BaseQuery>;\n} | {\n  error: unknown;\n  meta?: undefined;\n  /**\n   * If this is `true`, that means that this error is the result of `baseQueryFn`, `queryFn`, `transformResponse` or `transformErrorResponse` throwing an error instead of handling it properly.\n   * There can not be made any assumption about the shape of `error`.\n   */\n  isUnhandledError: true;\n};\nexport type QueryLifecycleQueryExtraOptions<ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> = {\n  /**\n   * A function that is called when the individual query is started. The function is called with a lifecycle api object containing properties such as `queryFulfilled`, allowing code to be run when a query is started, when it succeeds, and when it fails (i.e. throughout the lifecycle of an individual query/mutation call).\n   *\n   * Can be used to perform side-effects throughout the lifecycle of the query.\n   *\n   * @example\n   * ```ts\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n   * import { messageCreated } from './notificationsSlice\n   * export interface Post {\n   *   id: number\n   *   name: string\n   * }\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({\n   *     baseUrl: '/',\n   *   }),\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, number>({\n   *       query: (id) => `post/${id}`,\n   *       async onQueryStarted(id, { dispatch, queryFulfilled }) {\n   *         // `onStart` side-effect\n   *         dispatch(messageCreated('Fetching posts...'))\n   *         try {\n   *           const { data } = await queryFulfilled\n   *           // `onSuccess` side-effect\n   *           dispatch(messageCreated('Posts received!'))\n   *         } catch (err) {\n   *           // `onError` side-effect\n   *           dispatch(messageCreated('Error fetching posts!'))\n   *         }\n   *       }\n   *     }),\n   *   }),\n   * })\n   * ```\n   */\n  onQueryStarted?(queryArgument: QueryArg, queryLifeCycleApi: QueryLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>): Promise<void> | void;\n};\nexport type QueryLifecycleMutationExtraOptions<ResultType, QueryArg, BaseQuery extends BaseQueryFn, ReducerPath extends string = string> = {\n  /**\n   * A function that is called when the individual mutation is started. The function is called with a lifecycle api object containing properties such as `queryFulfilled`, allowing code to be run when a query is started, when it succeeds, and when it fails (i.e. throughout the lifecycle of an individual query/mutation call).\n   *\n   * Can be used for `optimistic updates`.\n   *\n   * @example\n   *\n   * ```ts\n   * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n   * export interface Post {\n   *   id: number\n   *   name: string\n   * }\n   *\n   * const api = createApi({\n   *   baseQuery: fetchBaseQuery({\n   *     baseUrl: '/',\n   *   }),\n   *   tagTypes: ['Post'],\n   *   endpoints: (build) => ({\n   *     getPost: build.query<Post, number>({\n   *       query: (id) => `post/${id}`,\n   *       providesTags: ['Post'],\n   *     }),\n   *     updatePost: build.mutation<void, Pick<Post, 'id'> & Partial<Post>>({\n   *       query: ({ id, ...patch }) => ({\n   *         url: `post/${id}`,\n   *         method: 'PATCH',\n   *         body: patch,\n   *       }),\n   *       invalidatesTags: ['Post'],\n   *       async onQueryStarted({ id, ...patch }, { dispatch, queryFulfilled }) {\n   *         const patchResult = dispatch(\n   *           api.util.updateQueryData('getPost', id, (draft) => {\n   *             Object.assign(draft, patch)\n   *           })\n   *         )\n   *         try {\n   *           await queryFulfilled\n   *         } catch {\n   *           patchResult.undo()\n   *         }\n   *       },\n   *     }),\n   *   }),\n   * })\n   * ```\n   */\n  onQueryStarted?(queryArgument: QueryArg, mutationLifeCycleApi: MutationLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>): Promise<void> | void;\n};\nexport interface QueryLifecycleApi<QueryArg, BaseQuery extends BaseQueryFn, ResultType, ReducerPath extends string = string> extends QueryBaseLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath>, QueryLifecyclePromises<ResultType, BaseQuery> {}\nexport type MutationLifecycleApi<QueryArg, BaseQuery extends BaseQueryFn, ResultType, ReducerPath extends string = string> = MutationBaseLifecycleApi<QueryArg, BaseQuery, ResultType, ReducerPath> & QueryLifecyclePromises<ResultType, BaseQuery>;\n\n/**\n * Provides a way to define a strongly-typed version of\n * {@linkcode QueryLifecycleQueryExtraOptions.onQueryStarted | onQueryStarted}\n * for a specific query.\n *\n * @example\n * <caption>#### __Create and reuse a strongly-typed `onQueryStarted` function__</caption>\n *\n * ```ts\n * import type { TypedQueryOnQueryStarted } from '@reduxjs/toolkit/query'\n * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n *\n * type Post = {\n *   id: number\n *   title: string\n *   userId: number\n * }\n *\n * type PostsApiResponse = {\n *   posts: Post[]\n *   total: number\n *   skip: number\n *   limit: number\n * }\n *\n * type QueryArgument = number | undefined\n *\n * type BaseQueryFunction = ReturnType<typeof fetchBaseQuery>\n *\n * const baseApiSlice = createApi({\n *   baseQuery: fetchBaseQuery({ baseUrl: 'https://dummyjson.com' }),\n *   reducerPath: 'postsApi',\n *   tagTypes: ['Posts'],\n *   endpoints: (builder) => ({\n *     getPosts: builder.query<PostsApiResponse, void>({\n *       query: () => `/posts`,\n *     }),\n *\n *     getPostById: builder.query<Post, QueryArgument>({\n *       query: (postId) => `/posts/${postId}`,\n *     }),\n *   }),\n * })\n *\n * const updatePostOnFulfilled: TypedQueryOnQueryStarted<\n *   PostsApiResponse,\n *   QueryArgument,\n *   BaseQueryFunction,\n *   'postsApi'\n * > = async (queryArgument, { dispatch, queryFulfilled }) => {\n *   const result = await queryFulfilled\n *\n *   const { posts } = result.data\n *\n *   // Pre-fill the individual post entries with the results\n *   // from the list endpoint query\n *   dispatch(\n *     baseApiSlice.util.upsertQueryEntries(\n *       posts.map((post) => ({\n *         endpointName: 'getPostById',\n *         arg: post.id,\n *         value: post,\n *       })),\n *     ),\n *   )\n * }\n *\n * export const extendedApiSlice = baseApiSlice.injectEndpoints({\n *   endpoints: (builder) => ({\n *     getPostsByUserId: builder.query<PostsApiResponse, QueryArgument>({\n *       query: (userId) => `/posts/user/${userId}`,\n *\n *       onQueryStarted: updatePostOnFulfilled,\n *     }),\n *   }),\n * })\n * ```\n *\n * @template ResultType - The type of the result `data` returned by the query.\n * @template QueryArgumentType - The type of the argument passed into the query.\n * @template BaseQueryFunctionType - The type of the base query function being used.\n * @template ReducerPath - The type representing the `reducerPath` for the API slice.\n *\n * @since 2.4.0\n * @public\n */\nexport type TypedQueryOnQueryStarted<ResultType, QueryArgumentType, BaseQueryFunctionType extends BaseQueryFn, ReducerPath extends string = string> = QueryLifecycleQueryExtraOptions<ResultType, QueryArgumentType, BaseQueryFunctionType, ReducerPath>['onQueryStarted'];\n\n/**\n * Provides a way to define a strongly-typed version of\n * {@linkcode QueryLifecycleMutationExtraOptions.onQueryStarted | onQueryStarted}\n * for a specific mutation.\n *\n * @example\n * <caption>#### __Create and reuse a strongly-typed `onQueryStarted` function__</caption>\n *\n * ```ts\n * import type { TypedMutationOnQueryStarted } from '@reduxjs/toolkit/query'\n * import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query'\n *\n * type Post = {\n *   id: number\n *   title: string\n *   userId: number\n * }\n *\n * type PostsApiResponse = {\n *   posts: Post[]\n *   total: number\n *   skip: number\n *   limit: number\n * }\n *\n * type QueryArgument = Pick<Post, 'id'> & Partial<Post>\n *\n * type BaseQueryFunction = ReturnType<typeof fetchBaseQuery>\n *\n * const baseApiSlice = createApi({\n *   baseQuery: fetchBaseQuery({ baseUrl: 'https://dummyjson.com' }),\n *   reducerPath: 'postsApi',\n *   tagTypes: ['Posts'],\n *   endpoints: (builder) => ({\n *     getPosts: builder.query<PostsApiResponse, void>({\n *       query: () => `/posts`,\n *     }),\n *\n *     getPostById: builder.query<Post, number>({\n *       query: (postId) => `/posts/${postId}`,\n *     }),\n *   }),\n * })\n *\n * const updatePostOnFulfilled: TypedMutationOnQueryStarted<\n *   Post,\n *   QueryArgument,\n *   BaseQueryFunction,\n *   'postsApi'\n * > = async ({ id, ...patch }, { dispatch, queryFulfilled }) => {\n *   const patchCollection = dispatch(\n *     baseApiSlice.util.updateQueryData('getPostById', id, (draftPost) => {\n *       Object.assign(draftPost, patch)\n *     }),\n *   )\n *\n *   try {\n *     await queryFulfilled\n *   } catch {\n *     patchCollection.undo()\n *   }\n * }\n *\n * export const extendedApiSlice = baseApiSlice.injectEndpoints({\n *   endpoints: (builder) => ({\n *     addPost: builder.mutation<Post, Omit<QueryArgument, 'id'>>({\n *       query: (body) => ({\n *         url: `posts/add`,\n *         method: 'POST',\n *         body,\n *       }),\n *\n *       onQueryStarted: updatePostOnFulfilled,\n *     }),\n *\n *     updatePost: builder.mutation<Post, QueryArgument>({\n *       query: ({ id, ...patch }) => ({\n *         url: `post/${id}`,\n *         method: 'PATCH',\n *         body: patch,\n *       }),\n *\n *       onQueryStarted: updatePostOnFulfilled,\n *     }),\n *   }),\n * })\n * ```\n *\n * @template ResultType - The type of the result `data` returned by the query.\n * @template QueryArgumentType - The type of the argument passed into the query.\n * @template BaseQueryFunctionType - The type of the base query function being used.\n * @template ReducerPath - The type representing the `reducerPath` for the API slice.\n *\n * @since 2.4.0\n * @public\n */\nexport type TypedMutationOnQueryStarted<ResultType, QueryArgumentType, BaseQueryFunctionType extends BaseQueryFn, ReducerPath extends string = string> = QueryLifecycleMutationExtraOptions<ResultType, QueryArgumentType, BaseQueryFunctionType, ReducerPath>['onQueryStarted'];\nexport const buildQueryLifecycleHandler: InternalHandlerBuilder = ({\n  api,\n  context,\n  queryThunk,\n  mutationThunk\n}) => {\n  const isPendingThunk = isPending(queryThunk, mutationThunk);\n  const isRejectedThunk = isRejected(queryThunk, mutationThunk);\n  const isFullfilledThunk = isFulfilled(queryThunk, mutationThunk);\n  type CacheLifecycle = {\n    resolve(value: {\n      data: unknown;\n      meta: unknown;\n    }): unknown;\n    reject(value: QueryFulfilledRejectionReason<any>): unknown;\n  };\n  const lifecycleMap: Record<string, CacheLifecycle> = {};\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi) => {\n    if (isPendingThunk(action)) {\n      const {\n        requestId,\n        arg: {\n          endpointName,\n          originalArgs\n        }\n      } = action.meta;\n      const endpointDefinition = context.endpointDefinitions[endpointName];\n      const onQueryStarted = endpointDefinition?.onQueryStarted;\n      if (onQueryStarted) {\n        const lifecycle = {} as CacheLifecycle;\n        const queryFulfilled = new (Promise as PromiseConstructorWithKnownReason)<{\n          data: unknown;\n          meta: unknown;\n        }, QueryFulfilledRejectionReason<any>>((resolve, reject) => {\n          lifecycle.resolve = resolve;\n          lifecycle.reject = reject;\n        });\n        // prevent uncaught promise rejections from happening.\n        // if the original promise is used in any way, that will create a new promise that will throw again\n        queryFulfilled.catch(() => {});\n        lifecycleMap[requestId] = lifecycle;\n        const selector = (api.endpoints[endpointName] as any).select(endpointDefinition.type === DefinitionType.query ? originalArgs : requestId);\n        const extra = mwApi.dispatch((_, __, extra) => extra);\n        const lifecycleApi = {\n          ...mwApi,\n          getCacheEntry: () => selector(mwApi.getState()),\n          requestId,\n          extra,\n          updateCachedData: (endpointDefinition.type === DefinitionType.query ? (updateRecipe: Recipe<any>) => mwApi.dispatch(api.util.updateQueryData(endpointName as never, originalArgs, updateRecipe)) : undefined) as any,\n          queryFulfilled\n        };\n        onQueryStarted(originalArgs, lifecycleApi);\n      }\n    } else if (isFullfilledThunk(action)) {\n      const {\n        requestId,\n        baseQueryMeta\n      } = action.meta;\n      lifecycleMap[requestId]?.resolve({\n        data: action.payload,\n        meta: baseQueryMeta\n      });\n      delete lifecycleMap[requestId];\n    } else if (isRejectedThunk(action)) {\n      const {\n        requestId,\n        rejectedWithValue,\n        baseQueryMeta\n      } = action.meta;\n      lifecycleMap[requestId]?.reject({\n        error: action.payload ?? action.error,\n        isUnhandledError: !rejectedWithValue,\n        meta: baseQueryMeta as any\n      });\n      delete lifecycleMap[requestId];\n    }\n  };\n  return handler;\n};","import { QueryStatus } from '../apiState';\nimport type { QueryCacheKey } from '../apiState';\nimport { onFocus, onOnline } from '../setupListeners';\nimport type { ApiMiddlewareInternalHandler, InternalHandlerBuilder, SubMiddlewareApi } from './types';\nimport { countObjectKeys } from '../../utils/countObjectKeys';\nexport const buildWindowEventHandler: InternalHandlerBuilder = ({\n  reducerPath,\n  context,\n  api,\n  refetchQuery,\n  internalState\n}) => {\n  const {\n    removeQueryResult\n  } = api.internalActions;\n  const handler: ApiMiddlewareInternalHandler = (action, mwApi) => {\n    if (onFocus.match(action)) {\n      refetchValidQueries(mwApi, 'refetchOnFocus');\n    }\n    if (onOnline.match(action)) {\n      refetchValidQueries(mwApi, 'refetchOnReconnect');\n    }\n  };\n  function refetchValidQueries(api: SubMiddlewareApi, type: 'refetchOnFocus' | 'refetchOnReconnect') {\n    const state = api.getState()[reducerPath];\n    const queries = state.queries;\n    const subscriptions = internalState.currentSubscriptions;\n    context.batch(() => {\n      for (const queryCacheKey of Object.keys(subscriptions)) {\n        const querySubState = queries[queryCacheKey];\n        const subscriptionSubState = subscriptions[queryCacheKey];\n        if (!subscriptionSubState || !querySubState) continue;\n        const shouldRefetch = Object.values(subscriptionSubState).some(sub => sub[type] === true) || Object.values(subscriptionSubState).every(sub => sub[type] === undefined) && state.config[type];\n        if (shouldRefetch) {\n          if (countObjectKeys(subscriptionSubState) === 0) {\n            api.dispatch(removeQueryResult({\n              queryCacheKey: queryCacheKey as QueryCacheKey\n            }));\n          } else if (querySubState.status !== QueryStatus.uninitialized) {\n            api.dispatch(refetchQuery(querySubState));\n          }\n        }\n      }\n    });\n  }\n  return handler;\n};","import type { Action, Middleware, ThunkDispatch, UnknownAction } from '@reduxjs/toolkit';\nimport type { EndpointDefinitions, FullTagDescription } from '../../endpointDefinitions';\nimport type { QueryStatus, QuerySubState, RootState } from '../apiState';\nimport type { QueryThunkArg } from '../buildThunks';\nimport { createAction, isAction } from '../rtkImports';\nimport { buildBatchedActionsHandler } from './batchActions';\nimport { buildCacheCollectionHandler } from './cacheCollection';\nimport { buildCacheLifecycleHandler } from './cacheLifecycle';\nimport { buildDevCheckHandler } from './devMiddleware';\nimport { buildInvalidationByTagsHandler } from './invalidationByTags';\nimport { buildPollingHandler } from './polling';\nimport { buildQueryLifecycleHandler } from './queryLifecycle';\nimport type { BuildMiddlewareInput, InternalHandlerBuilder, InternalMiddlewareState } from './types';\nimport { buildWindowEventHandler } from './windowEventHandling';\nimport type { ApiEndpointQuery } from '../module';\nexport type { ReferenceCacheCollection } from './cacheCollection';\nexport type { MutationCacheLifecycleApi, QueryCacheLifecycleApi, ReferenceCacheLifecycle } from './cacheLifecycle';\nexport type { MutationLifecycleApi, QueryLifecycleApi, ReferenceQueryLifecycle, TypedMutationOnQueryStarted, TypedQueryOnQueryStarted } from './queryLifecycle';\nexport type { SubscriptionSelectors } from './types';\nexport function buildMiddleware<Definitions extends EndpointDefinitions, ReducerPath extends string, TagTypes extends string>(input: BuildMiddlewareInput<Definitions, ReducerPath, TagTypes>) {\n  const {\n    reducerPath,\n    queryThunk,\n    api,\n    context\n  } = input;\n  const {\n    apiUid\n  } = context;\n  const actions = {\n    invalidateTags: createAction<Array<TagTypes | FullTagDescription<TagTypes> | null | undefined>>(`${reducerPath}/invalidateTags`)\n  };\n  const isThisApiSliceAction = (action: Action) => action.type.startsWith(`${reducerPath}/`);\n  const handlerBuilders: InternalHandlerBuilder[] = [buildDevCheckHandler, buildCacheCollectionHandler, buildInvalidationByTagsHandler, buildPollingHandler, buildCacheLifecycleHandler, buildQueryLifecycleHandler];\n  const middleware: Middleware<{}, RootState<Definitions, string, ReducerPath>, ThunkDispatch<any, any, UnknownAction>> = mwApi => {\n    let initialized = false;\n    const internalState: InternalMiddlewareState = {\n      currentSubscriptions: {}\n    };\n    const builderArgs = {\n      ...(input as any as BuildMiddlewareInput<EndpointDefinitions, string, string>),\n      internalState,\n      refetchQuery,\n      isThisApiSliceAction\n    };\n    const handlers = handlerBuilders.map(build => build(builderArgs));\n    const batchedActionsHandler = buildBatchedActionsHandler(builderArgs);\n    const windowEventsHandler = buildWindowEventHandler(builderArgs);\n    return next => {\n      return action => {\n        if (!isAction(action)) {\n          return next(action);\n        }\n        if (!initialized) {\n          initialized = true;\n          // dispatch before any other action\n          mwApi.dispatch(api.internalActions.middlewareRegistered(apiUid));\n        }\n        const mwApiWithNext = {\n          ...mwApi,\n          next\n        };\n        const stateBefore = mwApi.getState();\n        const [actionShouldContinue, internalProbeResult] = batchedActionsHandler(action, mwApiWithNext, stateBefore);\n        let res: any;\n        if (actionShouldContinue) {\n          res = next(action);\n        } else {\n          res = internalProbeResult;\n        }\n        if (!!mwApi.getState()[reducerPath]) {\n          // Only run these checks if the middleware is registered okay\n\n          // This looks for actions that aren't specific to the API slice\n          windowEventsHandler(action, mwApiWithNext, stateBefore);\n          if (isThisApiSliceAction(action) || context.hasRehydrationInfo(action)) {\n            // Only run these additional checks if the actions are part of the API slice,\n            // or the action has hydration-related data\n            for (const handler of handlers) {\n              handler(action, mwApiWithNext, stateBefore);\n            }\n          }\n        }\n        return res;\n      };\n    };\n  };\n  return {\n    middleware,\n    actions\n  };\n  function refetchQuery(querySubState: Exclude<QuerySubState<any>, {\n    status: QueryStatus.uninitialized;\n  }>) {\n    return (input.api.endpoints[querySubState.endpointName] as ApiEndpointQuery<any, any>).initiate(querySubState.originalArgs as any, {\n      subscribe: false,\n      forceRefetch: true\n    });\n  }\n}","import { buildCreateApi } from '../createApi';\nimport { coreModule } from './module';\nexport const createApi = /* @__PURE__ */buildCreateApi(coreModule());\nexport { QueryStatus } from './apiState';\nexport type { CombinedState, MutationKeys, QueryCacheKey, QueryKeys, QuerySubState, RootState, SubscriptionOptions } from './apiState';\nexport type { MutationActionCreatorResult, QueryActionCreatorResult, StartQueryActionCreatorOptions } from './buildInitiate';\nexport type { MutationCacheLifecycleApi, MutationLifecycleApi, QueryCacheLifecycleApi, QueryLifecycleApi, SubscriptionSelectors, TypedMutationOnQueryStarted, TypedQueryOnQueryStarted } from './buildMiddleware/index';\nexport { skipToken } from './buildSelectors';\nexport type { MutationResultSelectorResult, QueryResultSelectorResult, SkipToken } from './buildSelectors';\nexport type { SliceActions } from './buildSlice';\nexport type { PatchQueryDataThunk, UpdateQueryDataThunk, UpsertQueryDataThunk } from './buildThunks';\nexport { coreModuleName } from './module';\nexport type { ApiEndpointMutation, ApiEndpointQuery, CoreModule, InternalActions, PrefetchOptions, ThunkWithReturnValue } from './module';\nexport { setupListeners } from './setupListeners';\nexport { buildCreateApi, coreModule };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}